<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infragistics2.Win.UltraWinCalcManager.v9.1</name>
    </assembly>
    <members>
        <member name="M:Infragistics.Shared.LocalizedCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Returns the localized category name
            </summary>
            <param name="value">Name of the category to retreive</param>
            <returns>The localized string value</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.RE.AlternativeElement" -->
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.RE.Element" -->
        <member name="M:PerCederberg.Grammatica.Parser.RE.Element.Clone">
            Creates a copy of this element. The copy will be an
            instance of the same class matching the same strings.
            Copies of elements are necessary to allow elements to cache
            intermediate results while matching strings without
            interfering with other threads.
            
            @return a copy of this element
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.Element.Match(PerCederberg.Grammatica.Parser.RE.Matcher,System.String,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also
             be specified, but numbers higher than zero (0) cause a
             failed match for any element that doesn't attempt to
             combine other elements.
            
             @param m              the matcher being used 
             @param str            the string to match
             @param start          the starting position
             @param skip           the number of matches to skip
             
             @return the length of the matching string, or
                     -1 if no match was found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.Element.PrintTo(System.IO.TextWriter,System.String)">
            Prints this element to the specified output stream.
            
            @param output         the output stream to use
            @param indent         the current indentation
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.AlternativeElement.elem1">
            The first alternative element.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.AlternativeElement.elem2">
            The second alternative element.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.AlternativeElement.#ctor(PerCederberg.Grammatica.Parser.RE.Element,PerCederberg.Grammatica.Parser.RE.Element)">
            Creates a new alternative element.
            
            @param first          the first alternative
            @param second         the second alternative
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.AlternativeElement.Clone">
            Creates a copy of this element. The copy will be an
            instance of the same class matching the same strings.
            Copies of elements are necessary to allow elements to cache
            intermediate results while matching strings without
            interfering with other threads.
            
            @return a copy of this element
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.AlternativeElement.Match(PerCederberg.Grammatica.Parser.RE.Matcher,System.String,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also
             be specified, but numbers higher than zero (0) cause a
             failed match for any element that doesn't attempt to
             combine other elements.
            
             @param m              the matcher being used 
             @param str            the string to match
             @param start          the starting position
             @param skip           the number of matches to skip
             
             @return the length of the longest matching string, or
                     -1 if no match was found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.AlternativeElement.PrintTo(System.IO.TextWriter,System.String)">
            Prints this element to the specified output stream.
            
            @param output         the output stream to use
            @param indent         the current indentation
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.RE.CharacterSetElement" -->
        <member name="F:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.DOT">
            The dot ('.') character set. This element matches a single
            character that is not equal to a newline character.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.DIGIT">
            The digit character set. This element matches a single
            numeric character.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.NON_DIGIT">
            The non-digit character set. This element matches a single
            non-numeric character.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.WHITESPACE">
            The whitespace character set. This element matches a single
            whitespace character.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.NON_WHITESPACE">
            The non-whitespace character set. This element matches a
            single non-whitespace character.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.WORD">
            The word character set. This element matches a single word
            character.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.NON_WORD">
            The non-word character set. This element matches a single
            non-word character.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.inverted">
            The inverted character set flag.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.contents">
            The character set content. This array may contain either
            range objects or Character objects.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.#ctor(System.Boolean)">
            Creates a new character set element. If the inverted character 
            set flag is set, only characters NOT in the set will match.
            
            @param inverted       the inverted character set flag
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.AddCharacter(System.Char)">
            Adds a single character to this character set.
            
            @param c              the character to add
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.AddCharacters(System.String)">
            Adds multiple characters to this character set.
            
            @param str            the string with characters to add
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.AddCharacters(PerCederberg.Grammatica.Parser.RE.StringElement)">
            Adds multiple characters to this character set.
            
            @param elem           the string element with characters to add
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.AddRange(System.Char,System.Char)">
            Adds a character range to this character set.
            
            @param min            the minimum character value
            @param max            the maximum character value
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.AddCharacterSet(PerCederberg.Grammatica.Parser.RE.CharacterSetElement)">
            Adds a character subset to this character set.
            
            @param elem           the character set to add
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.Clone">
            Returns this element as the character set shouldn't be
            modified after creation. This partially breaks the contract
            of clone(), but as new characters are not added to the
            character set after creation, this will work correctly.
            
            @return this character set element
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.Match(PerCederberg.Grammatica.Parser.RE.Matcher,System.String,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the 
             specified position. The number of matches to skip can also be
             specified, but numbers higher than zero (0) cause a failed 
             match for any element that doesn't attempt to combine other 
             elements.
            
             @param m              the matcher being used 
             @param str            the string to match
             @param start          the starting position
             @param skip           the number of matches to skip
             
             @return the length of the matching string, or
                     -1 if no match was found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.InSet(System.Char)">
            Checks if the specified character matches this character
            set. This method takes the inverted flag into account.
            
            @param c               the character to check
            
            @return true if the character matches, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.InDotSet(System.Char)">
            Checks if the specified character is present in the 'dot'
            set. This method does not consider the inverted flag.
            
            @param c               the character to check
            
            @return true if the character is present, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.InDigitSet(System.Char)">
            Checks if the specified character is a digit. This method
            does not consider the inverted flag.
            
            @param c               the character to check
            
            @return true if the character is a digit, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.InWhitespaceSet(System.Char)">
            Checks if the specified character is a whitespace
            character. This method does not consider the inverted flag.
            
            @param c               the character to check
            
            @return true if the character is a whitespace character, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.InWordSet(System.Char)">
            Checks if the specified character is a word character. This
            method does not consider the inverted flag.
            
            @param c               the character to check
            
            @return true if the character is a word character, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.InUserSet(System.Char)">
            Checks if the specified character is present in the user-
            defined set. This method does not consider the inverted
            flag.
            
            @param value           the character to check
            
            @return true if the character is present, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.PrintTo(System.IO.TextWriter,System.String)">
            Prints this element to the specified output stream.
            
            @param output         the output stream to use
            @param indent         the current indentation
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.ToString">
            Returns a string description of this character set.
            
            @return a string description of this character set
        </member>
        <member name="T:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.Range">
            A character range class.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.Range.min">
            The minimum character value.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.Range.max">
            The maximum character value.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.Range.#ctor(System.Char,System.Char)">
            Creates a new character range.
            
            @param min        the minimum character value
            @param max        the maximum character value
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.Range.Inside(System.Char)">
            Checks if the specified character is inside the range.
            
            @param c          the character to check
            
            @return true if the character is in the range, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CharacterSetElement.Range.ToString">
            Returns a string representation of this object.
            
            @return a string representation of this object
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.RE.CombineElement" -->
        <member name="F:PerCederberg.Grammatica.Parser.RE.CombineElement.elem1">
            The first element.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.CombineElement.elem2">
            The second element.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CombineElement.#ctor(PerCederberg.Grammatica.Parser.RE.Element,PerCederberg.Grammatica.Parser.RE.Element)">
            Creates a new combine element.
            
            @param first          the first element
            @param second         the second element
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CombineElement.Clone">
            Creates a copy of this element. The copy will be an
            instance of the same class matching the same strings.
            Copies of elements are necessary to allow elements to cache
            intermediate results while matching strings without
            interfering with other threads.
            
            @return a copy of this element
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CombineElement.Match(PerCederberg.Grammatica.Parser.RE.Matcher,System.String,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the 
             specified position. The number of matches to skip can also be
             specified, but numbers higher than zero (0) cause a failed 
             match for any element that doesn't attempt to combine other 
             elements.
            
             @param m              the matcher being used 
             @param str            the string to match
             @param start          the starting position
             @param skip           the number of matches to skip
             
             @return the length of the longest matching string, or
                     -1 if no match was found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.CombineElement.PrintTo(System.IO.TextWriter,System.String)">
            Prints this element to the specified output stream.
            
            @param output         the output stream to use
            @param indent         the current indentation
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.RE.Matcher" -->
        <member name="F:PerCederberg.Grammatica.Parser.RE.Matcher.element">
            The base regular expression element.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.Matcher.str">
            The string to work with
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.Matcher.start">
            The start of the latest match found.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.Matcher.length">
            The length of the latest match found.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.Matcher.endOfString">
            The end of string reached flag. This flag is set if the end
            of the string was encountered during the latest match.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.Matcher.#ctor(PerCederberg.Grammatica.Parser.RE.Element,System.String)">
            Creates a new matcher with the specified element.
            
            @param e              the base regular expression element
            @param str            the string to work with
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.Matcher.Reset">
            Resets the information about the last match. This will
            clear all flags and set the match length to a negative
            value. This method is automatically called by all matching
            methods.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.Matcher.Start">
            Returns the start position of the latest match. If no match
            has been encountered, this method returns zero (0).
            
            @return the start position of the latest match
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.Matcher.End">
            Returns the end position of the latest match. This is one
            character after the match end, i.e. the first character
            after the match. If no match has been encountered, this
            method returns the same value as start().
            
            @return the end position of the latest match
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.Matcher.Length">
            Returns the length of the latest match.
            
            @return the length of the latest match, or
                    -1 if no match was found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.Matcher.HasReadEndOfString">
            Checks if the end of the string was encountered during the
            last match attempt. This flag signals that more input may
            be needed in order to get a match (or a longer match).
            
            @return true if the end of string was encountered, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.Matcher.MatchFromBeginning">
            Attempts to find a match starting at the beginning of the
            string.
            
            @return true if a match was found, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.Matcher.MatchFrom(System.Int32)">
            Attempts to find a match starting at the specified position
            in the string.
            
            @param pos            the starting position of the match
            
            @return true if a match was found, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.Matcher.ToString">
            Returns the latest matched string. If no string has been
            matched, an empty string will be returned.
            
            @return the latest matched string
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.Matcher.SetReadEndOfString">
            Sets the end of string encountered flag. This method is
            called by the various elements analyzing the string.
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.RE.RegExp" -->
        <member name="F:PerCederberg.Grammatica.Parser.RE.RegExp.element">
            The base regular expression element.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.RegExp.pattern">
            The regular expression pattern.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.RegExp.pos">
            The current position in the pattern. This variable is used by
            the parsing methods.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.#ctor(System.String)">
            Creates a new regular expression.
            
            @param pattern        the regular expression pattern
            
            @throws RegExpException if the regular expression couldn't be
                        parsed correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.Matcher(System.String)">
            Creates a new matcher for the specified string.
            
            @param str            the string to work with
            
            @return the regular expresion matcher
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.ToString">
            Returns a string representation of the regular expression.
            
            @return a string representation of the regular expression
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.ParseExpr">
            Parses a regular expression. This method handles the Expr
            production in the grammar (see regexp.grammar).
            
            @return the element representing this expression
            
            @throws RegExpException if an error was encountered in the 
                        pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.ParseTerm">
            Parses a regular expression term. This method handles the 
            Term production in the grammar (see regexp.grammar).
            
            @return the element representing this term
            
            @throws RegExpException if an error was encountered in the 
                        pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.ParseFact">
            Parses a regular expression factor. This method handles the 
            Fact production in the grammar (see regexp.grammar).
            
            @return the element representing this factor
            
            @throws RegExpException if an error was encountered in the 
                        pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.ParseAtom">
            Parses a regular expression atom. This method handles the 
            Atom production in the grammar (see regexp.grammar).
            
            @return the element representing this atom
            
            @throws RegExpException if an error was encountered in the 
                        pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.ParseAtomModifier(PerCederberg.Grammatica.Parser.RE.Element)">
             Parses a regular expression atom modifier. This method handles 
             the AtomModifier production in the grammar (see regexp.grammar).
            
             @param elem           the element to modify
              
             @return the modified element 
             
             @throws RegExpException if an error was encountered in the 
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.ParseCharSet">
            Parses a regular expression character set. This method handles 
            the contents of the '[...]' construct in a regular expression.
            
            @return the element representing this character set
            
            @throws RegExpException if an error was encountered in the 
                        pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.ParseChar">
            Parses a regular expression character. This method handles 
            a single normal character in a regular expression.
            
            @return the element representing this character
            
            @throws RegExpException if an error was encountered in the 
                        pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.ParseEscapeChar">
            Parses a regular expression character escape. This method 
            handles a single character escape in a regular expression.
            
            @return the element representing this character escape
            
            @throws RegExpException if an error was encountered in the 
                        pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.ReadNumber">
            Reads a number from the pattern. If the next character isn't a
            numeric character, an exception is thrown. This method reads
            several consecutive numeric characters. 
            
            @return the numeric value read
            
            @throws RegExpException if an error was encountered in the 
                        pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.ReadChar">
            Reads the next character in the pattern. If no next character
            exists, an exception is thrown.
            
            @return the character read 
            
            @throws RegExpException if no next character was available in  
                        the pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.ReadChar(System.Char)">
            Reads the next character in the pattern. If the character 
            wasn't the specified one, an exception is thrown.
            
            @param c              the character to read
            
            @return the character read 
            
            @throws RegExpException if the character read didn't match the
                        specified one, or if no next character was 
                        available in the pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.PeekChar(System.Int32)">
            Returns a character that has not yet been read from the 
            pattern. If the requested position is beyond the end of the 
            pattern string, -1 is returned.
            
            @param count          the preview position, from zero (0)
            
            @return the character found, or
                    -1 if beyond the end of the pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExp.CombineElements(System.Collections.ArrayList)">
            Combines a list of elements. This method takes care to always 
            concatenate adjacent string elements into a single string 
            element.  
            
            @param list           the list with elements
            
            @return the combined element
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.RE.RegExpException" -->
        <member name="F:PerCederberg.Grammatica.Parser.RE.RegExpException.type">
            The error type constant.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.RegExpException.position">
            The error position.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.RegExpException.pattern">
            The regular expression pattern.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExpException.#ctor(PerCederberg.Grammatica.Parser.RE.RegExpException.ErrorType,System.Int32,System.String)">
            Creates a new regular expression exception.
            
            @param type           the error type constant
            @param pos            the error position
            @param pattern        the regular expression pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RegExpException.GetMessage">
            Returns the exception error message.
            
            @return the exception error message
        </member>
        <member name="P:PerCederberg.Grammatica.Parser.RE.RegExpException.Message">
            The message property. This property contains the detailed
            exception error message.
        </member>
        <member name="T:PerCederberg.Grammatica.Parser.RE.RegExpException.ErrorType">
            The error type enumeration.
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.RE.RepeatElement" -->
        <member name="F:PerCederberg.Grammatica.Parser.RE.RepeatElement.elem">
            The element to repeat.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.RepeatElement.min">
            The minimum number of repetitions.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.RepeatElement.max">
            The maximum number of repetitions.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.RepeatElement.type">
            The repeat type.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.RepeatElement.matchStart">
            The start position of the last set of matches. 
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RE.RepeatElement.matches">
            A set with all matches starting at matchStart. A match with
            a specific length is reported by a non-zero bit in the bit
            array.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RepeatElement.#ctor(PerCederberg.Grammatica.Parser.RE.Element,System.Int32,System.Int32,PerCederberg.Grammatica.Parser.RE.RepeatElement.RepeatType)">
            Creats a new element repeater.
            
            @param elem           the element to repeat
            @param min            the minimum count
            @param max            the maximum count
            @param type           the repeat type constant
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RepeatElement.Clone">
            Creates a copy of this element. The copy will be an
            instance of the same class matching the same strings.
            Copies of elements are necessary to allow elements to cache
            intermediate results while matching strings without
            interfering with other threads.
            
            @return a copy of this element
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RepeatElement.Match(PerCederberg.Grammatica.Parser.RE.Matcher,System.String,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the 
             specified position. The number of matches to skip can also be
             specified.
            
             @param m              the matcher being used 
             @param str            the string to match
             @param start          the starting position
             @param skip           the number of matches to skip
             
             @return the length of the matching string, or
                     -1 if no match was found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RepeatElement.MatchGreedy(PerCederberg.Grammatica.Parser.RE.Matcher,System.String,System.Int32,System.Int32)">
             Returns the length of the longest possible matching string
             starting at the specified position. The number of matches
             to skip can also be specified.
            
             @param m              the matcher being used 
             @param str            the string to match
             @param start          the starting position
             @param skip           the number of matches to skip
             
             @return the length of the longest matching string, or
                     -1 if no match was found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RepeatElement.MatchReluctant(PerCederberg.Grammatica.Parser.RE.Matcher,System.String,System.Int32,System.Int32)">
             Returns the length of the shortest possible matchine string
             starting at the specified position. The number of matches to 
             skip can also be specified.
            
             @param m              the matcher being used 
             @param str            the string to match
             @param start          the starting position
             @param skip           the number of matches to skip
             
             @return the length of the shortest matching string, or
                     -1 if no match was found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RepeatElement.MatchPossessive(PerCederberg.Grammatica.Parser.RE.Matcher,System.String,System.Int32,System.Int32)">
             Returns the length of the maximum number of elements matching 
             the string starting at the specified position. This method 
             allows no backtracking, i.e. no skips..
            
             @param m              the matcher being used 
             @param str            the string to match
             @param start          the starting position
             @param count          the start count, normally zero (0)
             
             @return the length of the longest matching string, or
                     -1 if no match was found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RepeatElement.FindMatches(PerCederberg.Grammatica.Parser.RE.Matcher,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            Finds all matches and adds the lengths to the matches set.  
            
            @param m              the matcher being used 
            @param str            the string to match
            @param start          the starting position
            @param length         the match length at the start position
            @param count          the number of sub-elements matched
            @param attempt        the number of match attempts here
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.RepeatElement.PrintTo(System.IO.TextWriter,System.String)">
            Prints this element to the specified output stream.
            
            @param output         the output stream to use
            @param indent         the current indentation
        </member>
        <member name="T:PerCederberg.Grammatica.Parser.RE.RepeatElement.RepeatType">
            The repeat type constants.
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.RE.StringElement" -->
        <member name="F:PerCederberg.Grammatica.Parser.RE.StringElement.value">
            The string to match with.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.StringElement.#ctor(System.Char)">
            Creates a new string element.
            
            @param c              the character to match with
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.StringElement.#ctor(System.String)">
            Creates a new string element.
            
            @param str            the string to match with
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.StringElement.GetString">
            Returns the string to be matched.
            
            @return the string to be matched
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.StringElement.Clone">
            Returns this element as it is immutable. 
            
            @return this string element
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.StringElement.Match(PerCederberg.Grammatica.Parser.RE.Matcher,System.String,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also
             be specified, but numbers higher than zero (0) cause a
             failed match for any element that doesn't attempt to
             combine other elements.
            
             @param m              the matcher being used 
             @param str            the string to match
             @param start          the starting position
             @param skip           the number of matches to skip
             
             @return the length of the longest matching string, or
                     -1 if no match was found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RE.StringElement.PrintTo(System.IO.TextWriter,System.String)">
            Prints this element to the specified output stream.
            
            @param output         the output stream to use
            @param indent         the current indentation
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.Analyzer" -->
        <member name="M:PerCederberg.Grammatica.Parser.Analyzer.#ctor">
            Creates a new parse tree analyzer.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Analyzer.Analyze(PerCederberg.Grammatica.Parser.Node)">
            Analyzes a parse tree node by traversing all it's child nodes. 
            The tree traversal is depth-first, and the appropriate 
            callback methods will be called. If the node is a production 
            node, a new production node will be created and children will 
            be added by recursively processing the children of the 
            specified production node. This method is used to process a 
            parse tree after creation.
            
            @param node           the parse tree node to process
            
            @return the resulting parse tree node 
            
            @throws ParserLogException if the node analysis discovered 
                        errors
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Analyzer.Analyze(PerCederberg.Grammatica.Parser.Node,PerCederberg.Grammatica.Parser.ParserLogException)">
            Analyzes a parse tree node by traversing all it's child nodes. 
            The tree traversal is depth-first, and the appropriate 
            callback methods will be called. If the node is a production 
            node, a new production node will be created and children will 
            be added by recursively processing the children of the 
            specified production node. This method is used to process a 
            parse tree after creation.
            
            @param node           the parse tree node to process
            @param log            the parser error log
            
            @return the resulting parse tree node 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Analyzer.Enter(PerCederberg.Grammatica.Parser.Node)">
            Called when entering a parse tree node. By default this method
            does nothing. A subclass can override this method to handle 
            each node separately.  
            
            @param node           the node being entered
            
            @throws ParseException if the node analysis discovered errors
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Analyzer.Exit(PerCederberg.Grammatica.Parser.Node)">
            Called when exiting a parse tree node. By default this method
            returns the node. A subclass can override this method to handle 
            each node separately. If no parse tree should be created, this 
            method should return null.
            
            @param node           the node being exited
            
            @return the node to add to the parse tree, or
                    null if no parse tree should be created
            
            @throws ParseException if the node analysis discovered errors
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Analyzer.Child(PerCederberg.Grammatica.Parser.Production,PerCederberg.Grammatica.Parser.Node)">
            Called when adding a child to a parse tree node. By default 
            this method adds the child to the production node. A subclass 
            can override this method to handle each node separately. Note 
            that the child node may be null if the corresponding exit() 
            method returned null.
            
            @param node           the parent node
            @param child          the child node, or null
            
            @throws ParseException if the node analysis discovered errors
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Analyzer.GetChildAt(PerCederberg.Grammatica.Parser.Node,System.Int32)">
            Returns a child at the specified position. If either the node
            or the child node is null, this method will throw a parse 
            exception with the internal error type.
            
            @param node           the parent node 
            @param pos            the child position
            
            @return the child node
            
            @throws ParseException if either the node or the child node 
                        was null
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Analyzer.GetChildWithId(PerCederberg.Grammatica.Parser.Node,System.Int32)">
            Returns the first child with the specified id. If the node is
            null, or no child with the specified id could be found, this 
            method will throw a parse exception with the internal error 
            type.
            
            @param node           the parent node 
            @param id             the child node id
            
            @return the child node
            
            @throws ParseException if the node was null, or a child node 
                        couldn't be found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Analyzer.GetValue(PerCederberg.Grammatica.Parser.Node,System.Int32)">
            Returns the node value at the specified position. If either 
            the node or the value is null, this method will throw a parse 
            exception with the internal error type.
            
            @param node           the parse tree node 
            @param pos            the child position
            
            @return the value object
            
            @throws ParseException if either the node or the value was null
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Analyzer.GetIntValue(PerCederberg.Grammatica.Parser.Node,System.Int32)">
            Returns the node integer value at the specified position. If 
            either the node is null, or the value is not an instance of 
            the Integer class, this method will throw a parse exception 
            with the internal error type.
            
            @param node           the parse tree node 
            @param pos            the child position
            
            @return the value object
            
            @throws ParseException if either the node was null, or the 
                        value wasn't an integer 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Analyzer.GetStringValue(PerCederberg.Grammatica.Parser.Node,System.Int32)">
            Returns the node string value at the specified position. If 
            either the node is null, or the value is not an instance of 
            the String class, this method will throw a parse exception 
            with the internal error type.
            
            @param node           the parse tree node 
            @param pos            the child position
            
            @return the value object
            
            @throws ParseException if either the node was null, or the 
                        value wasn't a string 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Analyzer.GetChildValues(PerCederberg.Grammatica.Parser.Node)">
             Returns all the node values for all child nodes.
            
             @param node           the parse tree node
            
             @return a list with all the child node values
             
             @since 1.3
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.LookAheadSet" -->
        <member name="F:PerCederberg.Grammatica.Parser.LookAheadSet.elements">
            The set of token look-ahead sequences. Each sequence in 
            turn is represented by an ArrayList with Integers for the
            token id:s.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.LookAheadSet.maxLength">
            The maximum length of any look-ahead sequence.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.#ctor(System.Int32)">
            Creates a new look-ahead set with the specified maximum
            length.
            
            @param maxLength      the maximum token sequence length
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.#ctor(System.Int32,PerCederberg.Grammatica.Parser.LookAheadSet)">
            Creates a duplicate look-ahead set, possibly with a
            different maximum length.
            
            @param maxLength      the maximum token sequence length
            @param set            the look-ahead set to copy
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Size">
            Returns the size of this look-ahead set.
            
            @return the number of token sequences in the set
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.GetMinLength">
            Returns the length of the shortest token sequence in this
            set. This method will return zero (0) if the set is empty.
            
            @return the length of the shortest token sequence
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.GetMaxLength">
            Returns the length of the longest token sequence in this
            set. This method will return zero (0) if the set is empty.
            
            @return the length of the longest token sequence
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.GetInitialTokens">
            Returns a list of the initial token id:s in this look-ahead
            set. The list returned will not contain any duplicates.
            
            @return a list of the inital token id:s in this look-ahead set
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.IsRepetitive">
            Checks if this look-ahead set contains a repetitive token
            sequence.
            
            @return true if at least one token sequence is repetitive, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.IsNext(PerCederberg.Grammatica.Parser.Parser)">
             Checks if the next token(s) in the parser match any token
             sequence in this set.
            
             @param parser         the parser to check
              
             @return true if the next tokens are in the set, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.IsNext(PerCederberg.Grammatica.Parser.Parser,System.Int32)">
             Checks if the next token(s) in the parser match any token
             sequence in this set.
            
             @param parser         the parser to check
             @param length         the maximum number of tokens to check
              
             @return true if the next tokens are in the set, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.IsOverlap(PerCederberg.Grammatica.Parser.LookAheadSet)">
            Checks if another look-ahead set has an overlapping token
            sequence. An overlapping token sequence is a token sequence
            that is identical to another sequence, but for the length.
            I.e. one of the two sequences may be longer than the other.
            
            @param set            the look-ahead set to check
            
            @return true if there is some token sequence that overlaps, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.IsOverlap(PerCederberg.Grammatica.Parser.LookAheadSet.Sequence)">
            Checks if a token sequence is overlapping. An overlapping token
            sequence is a token sequence that is identical to another 
            sequence, but for the length. I.e. one of the two sequences may
            be longer than the other. 
            
            @param seq            the token sequence to check
            
            @return true if there is some token sequence that overlaps, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Contains(PerCederberg.Grammatica.Parser.LookAheadSet.Sequence)">
            Checks if the specified token sequence is present in the
            set.
            
            @param elem           the token sequence to check
            
            @return true if the sequence is present in this set, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Intersects(PerCederberg.Grammatica.Parser.LookAheadSet)">
            Checks if some token sequence is present in both this set
            and a specified one.
            
            @param set            the look-ahead set to compare with
            
            @return true if the look-ahead sets intersect, or
                    false otherwise 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.FindSequence(PerCederberg.Grammatica.Parser.LookAheadSet.Sequence)">
            Finds an identical token sequence if present in the set.
            
            @param elem           the token sequence to search for
            
            @return an identical the token sequence if found, or
                    null if not found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Add(PerCederberg.Grammatica.Parser.LookAheadSet.Sequence)">
            Adds a token sequence to this set. The sequence will only
            be added if it is not already in the set. Also, if the
            sequence is longer than the allowed maximum, a truncated
            sequence will be added instead.
            
            @param seq            the token sequence to add
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Add(System.Int32)">
            Adds a new token sequence with a single token to this set.
            The sequence will only be added if it is not already in the
            set.
            
            @param token          the token to add
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.AddAll(PerCederberg.Grammatica.Parser.LookAheadSet)">
            Adds all the token sequences from a specified set. Only
            sequences not already in this set will be added.
            
            @param set            the set to add from
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.AddEmpty">
            Adds an empty token sequence to this set. The sequence will
            only be added if it is not already in the set.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Remove(PerCederberg.Grammatica.Parser.LookAheadSet.Sequence)">
            Removes a token sequence from this set.
            
            @param seq            the token sequence to remove
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.RemoveAll(PerCederberg.Grammatica.Parser.LookAheadSet)">
            Removes all the token sequences from a specified set. Only 
            sequences already in this set will be removed.
            
            @param set            the set to remove from
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.CreateNextSet(System.Int32)">
            Creates a new look-ahead set that is the result of reading
            the specified token. The new look-ahead set will contain
            the rest of all the token sequences that started with the
            specified token.
            
            @param token          the token to read 
            
            @return a new look-ahead set containing the remaining tokens 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.CreateIntersection(PerCederberg.Grammatica.Parser.LookAheadSet)">
            Creates a new look-ahead set that is the intersection of
            this set with another set. The token sequences in the net
            set will only have the repeat flag set if it was set in
            both the identical token sequences.
            
            @param set            the set to intersect with
            
            @return a new look-ahead set containing the intersection
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.CreateCombination(PerCederberg.Grammatica.Parser.LookAheadSet)">
            Creates a new look-ahead set that is the combination of
            this set with another set. The combination is created by
            creating new token sequences that consist of appending all
            elements from the specified set onto all elements in this
            set. This is sometimes referred to as the cartesian
            product.
            
            @param set            the set to combine with
            
            @return a new look-ahead set containing the combination
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.CreateOverlaps(PerCederberg.Grammatica.Parser.LookAheadSet)">
            Creates a new look-ahead set with overlaps from another. All
            token sequences in this set that overlaps with the other set
            will be added to the new look-ahead set.
            
            @param set            the look-ahead set to check with
            
            @return a new look-ahead set containing the overlaps
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.CreateFilter(PerCederberg.Grammatica.Parser.LookAheadSet)">
            Creates a new look-ahead set filter. The filter will contain
            all sequences from this set, possibly left trimmed by each one
            of the sequences in the specified set.
            
            @param set            the look-ahead set to trim with
            
            @return a new look-ahead set filter
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.CreateRepetitive">
            Creates a new identical look-ahead set, except for the
            repeat flag being set in each token sequence.
            
            @return a new repetitive look-ahead set 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.ToString">
            Returns a string representation of this object.
            
            @return a string representation of this object
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.ToString(PerCederberg.Grammatica.Parser.Tokenizer)">
            Returns a string representation of this object.
            
            @param tokenizer      the tokenizer containing the tokens
            
            @return a string representation of this object
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence" -->
        <member name="F:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.repeat">
            The repeat flag. If this flag is set, the token
            sequence or some part of it may be repeated infinitely.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.tokens">
            The list of token ids in this sequence.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.#ctor">
            Creates a new empty token sequence. The repeat flag
            will be set to false.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.#ctor(System.Boolean,System.Int32)">
            Creates a new token sequence with a single token.
            
            @param repeat         the repeat flag value
            @param token          the token to add
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.#ctor(System.Int32,PerCederberg.Grammatica.Parser.LookAheadSet.Sequence)">
            Creates a new token sequence that is a duplicate of
            another sequence. Only a limited number of tokens will
            be copied however. The repeat flag from the original
            will be kept intact.
            
            @param length         the maximum number of tokens to copy
            @param seq            the sequence to copy
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.#ctor(System.Boolean,PerCederberg.Grammatica.Parser.LookAheadSet.Sequence)">
            Creates a new token sequence that is a duplicate of
            another sequence. The new value of the repeat flag will
            be used however.
            
            @param repeat         the new repeat flag value
            @param seq            the sequence to copy
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.Length">
            Returns the length of the token sequence.
            
            @return the number of tokens in the sequence
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.GetToken(System.Int32)">
            Returns a token at a specified position in the sequence.
            
            @param pos            the sequence position
            
            @return the token id found, or null
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.Equals(System.Object)">
            Checks if this sequence is equal to another object.
            Only token sequences with the same tokens in the same
            order will be considered equal. The repeat flag will be
            disregarded.
            
            @param obj            the object to compare with
            
            @return true if the objects are equal, or
                    false otherwise 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.Equals(PerCederberg.Grammatica.Parser.LookAheadSet.Sequence)">
            Checks if this sequence is equal to another sequence.
            Only sequences with the same tokens in the same order 
            will be considered equal. The repeat flag will be
            disregarded.
            
            @param seq            the sequence to compare with
            
            @return true if the sequences are equal, or
                    false otherwise 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.StartsWith(PerCederberg.Grammatica.Parser.LookAheadSet.Sequence)">
            Checks if this token sequence starts with the tokens from
            another sequence. If the other sequence is longer than this
            sequence, this method will always return false.
            
            @param seq            the token sequence to check
            
            @return true if this sequence starts with the other, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.IsRepetitive">
            Checks if this token sequence is repetitive. A repetitive 
            token sequence is one with the repeat flag set.
            
            @return true if this token sequence is repetitive, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.IsNext(PerCederberg.Grammatica.Parser.Parser)">
            Checks if the next token(s) in the parser matches this
            token sequence.
            
            @param parser         the parser to check
            
            @return true if the next tokens are in the sequence, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.IsNext(PerCederberg.Grammatica.Parser.Parser,System.Int32)">
            Checks if the next token(s) in the parser matches this
            token sequence.
            
            @param parser         the parser to check
            @param length         the maximum number of tokens to check
            
            @return true if the next tokens are in the sequence, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.ToString">
            Returns a string representation of this object.
            
            @return a string representation of this object
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.ToString(PerCederberg.Grammatica.Parser.Tokenizer)">
             Returns a string representation of this object.
            
             @param tokenizer      the tokenizer containing the tokens
              
             @return a string representation of this object
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.Concat(System.Int32,PerCederberg.Grammatica.Parser.LookAheadSet.Sequence)">
            Creates a new token sequence that is the concatenation
            of this sequence and another. A maximum length for the
            new sequence is also specified.
            
            @param length         the maximum length of the result
            @param seq            the other sequence
            
            @return the concatenated token sequence
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.LookAheadSet.Sequence.Subsequence(System.Int32)">
            Creates a new token sequence that is a subsequence of
            this one.
            
            @param start          the subsequence start position 
            
            @return the new token subsequence
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.Node" -->
        <member name="F:PerCederberg.Grammatica.Parser.Node.parent">
            The parent node. 
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Node.values">
            The computed node values. 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.IsHidden">
            Checks if this node is hidden, i.e. if it should not be
            visible outside the parser.
            
            @return true if the node should be hidden, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.GetId">
            Returns the node type id. This value is set as a unique
            identifier for each type of node, in order to simplify
            later identification.
            
            @return the node type id
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.GetName">
            Returns the node name.
            
            @return the node name
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.GetStartLine">
            The line number of the first character in this node. If the
            node has child elements, this value will be fetched from
            the first child.
            
            @return the line number of the first character, or
                    -1 if not applicable
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.GetStartColumn">
            The column number of the first character in this node. If
            the node has child elements, this value will be fetched
            from the first child.
            
            @return the column number of the first token character, or
                    -1 if not applicable
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.GetEndLine">
            The line number of the last character in this node. If the
            node has child elements, this value will be fetched from
            the last child.
            
            @return the line number of the last token character, or
                    -1 if not applicable
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.GetEndColumn">
            The column number of the last character in this node. If
            the node has child elements, this value will be fetched
            from the last child.
            
            @return the column number of the last token character, or
                    -1 if not applicable
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.GetParent">
            Returns the parent node. 
            
            @return the parent parse tree node
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.SetParent(PerCederberg.Grammatica.Parser.Node)">
            Sets the parent node.
            
            @param parent         the new parent node
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.GetChildCount">
            Returns the number of child nodes.
            
            @return the number of child nodes
        </member>
        <!-- Badly formed XML comment ignored for member "M:PerCederberg.Grammatica.Parser.Node.GetChildAt(System.Int32)" -->
        <member name="M:PerCederberg.Grammatica.Parser.Node.GetDescendantCount">
            Returns the number of descendant nodes.
            
            @return the number of descendant nodes
            
            @since 1.2
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.GetValueCount">
             Returns the number of computed values associated with this
             node. Any number of values can be associated with a node
             through calls to AddValue().
            
             @return the number of values associated with this node
        </member>
        <!-- Badly formed XML comment ignored for member "M:PerCederberg.Grammatica.Parser.Node.GetValue(System.Int32)" -->
        <member name="M:PerCederberg.Grammatica.Parser.Node.GetAllValues">
             Returns the list with all the computed values for this
             node. Note that the list is not a copy, so changes will
             affect the values in this node (as it is the same object).
            
             @return a list with all values, or
                     null if no values have been set 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.AddValue(System.Object)">
            Adds a computed value to this node. The computed value may
            be used for storing intermediate results in the parse tree
            during analysis.
            
            @param value          the node value
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.AddValues(System.Collections.ArrayList)">
             Adds a set of computed values to this node.
            
             @param values         the vector with node values
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.RemoveAllValues">
            Removes all computed values stored in this node.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.PrintTo(System.IO.TextWriter)">
            Prints this node and all subnodes to the specified output 
            stream.
            
            @param output         the output stream to use
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Node.PrintTo(System.IO.TextWriter,System.String)">
            Prints this node and all subnodes to the specified output 
            stream.
            
            @param output         the output stream to use
            @param indent         the indentation string
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.ParseException" -->
        <member name="F:PerCederberg.Grammatica.Parser.ParseException.type">
            The error type.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ParseException.info">
            The additional information string.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ParseException.details">
            The additional details information. This variable is only
            used for unexpected token errors.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ParseException.line">
            The line number.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ParseException.column">
            The column number.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParseException.#ctor(PerCederberg.Grammatica.Parser.ParseException.ErrorType,System.String,System.Int32,System.Int32)">
            Creates a new parse exception.
            
            @param type           the parse error type
            @param info           the additional information
            @param line           the line number, or -1 for unknown
            @param column         the column number, or -1 for unknown
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParseException.#ctor(PerCederberg.Grammatica.Parser.ParseException.ErrorType,System.String,System.Collections.ArrayList,System.Int32,System.Int32)">
            Creates a new parse exception. This constructor is only
            used to supply the detailed information array, which is
            only used for expected token errors. The list then contains
            descriptions of the expected tokens.
            
            @param type           the parse error type
            @param info           the additional information
            @param details        the additional detailed information
            @param line           the line number, or -1 for unknown
            @param column         the column number, or -1 for unknown
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParseException.GetErrorType">
            Returns the error type. 
            
            @return the error type
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParseException.GetInfo">
            Returns the additional error information.
            
            @return the additional error information
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParseException.GetDetails">
            Returns the additional detailed error information. 
            
            @return the additional detailed error information
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParseException.GetLine">
            Returns the line number where the error occured.
            
            @return the line number of the error, or 
                    -1 if unknown
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParseException.GetColumn">
            Returns the column number where the error occured.
            
            @return the column number of the error, or 
                    -1 if unknown
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParseException.GetMessage">
            Returns a default error message.
            
            @return a default error message
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParseException.GetErrorMessage">
            Returns the error message. This message will contain all the 
            information available, except for the line and column number 
            information.
            
            @return the error message
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParseException.GetMessageDetails">
            Returns a string containing all the detailed information in
            a list. The elements are separated with a comma.
            
            @return the detailed information string
        </member>
        <member name="P:PerCederberg.Grammatica.Parser.ParseException.Message">
            The message property. This property contains the detailed
            exception error message.
        </member>
        <member name="T:PerCederberg.Grammatica.Parser.ParseException.ErrorType">
            The error type enumeration.
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.Parser" -->
        <member name="F:PerCederberg.Grammatica.Parser.Parser.initialized">
            The parser initialization flag.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Parser.tokenizer">
            The tokenizer to use.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Parser.analyzer">
            The analyzer to use for callbacks.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Parser.patterns">
            The list of production patterns. 
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Parser.patternIds">
            The map with production patterns and their id:s. This map 
            contains the production patterns indexed by their id:s.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Parser.tokens">
            The list of buffered tokens. This list will contain tokens that
            have been read from the tokenizer, but not yet consumed.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Parser.errorLog">
            The error log. All parse errors will be added to this log as
            the parser attempts to recover from the error. If the error
            count is higher than zero (0), this log will be thrown as the
            result from the parse() method. 
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Parser.errorRecovery">
            The error recovery counter. This counter is initially set to a
            negative value to indicate that no error requiring recovery 
            has been encountered. When a parse error is found, the counter
            is set to three (3), and is then decreased by one for each 
            correctly read token until it reaches zero (0).  
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.#ctor(PerCederberg.Grammatica.Parser.Tokenizer)">
            Creates a new parser.
            
            @param tokenizer       the tokenizer to use
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.#ctor(PerCederberg.Grammatica.Parser.Tokenizer,PerCederberg.Grammatica.Parser.Analyzer)">
            Creates a new parser.
            
            @param tokenizer       the tokenizer to use
            @param analyzer        the analyzer callback to use
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.GetTokenizer">
            Returns the tokenizer in use by this parser.
            
            @return the tokenizer in use by this parser
            
            @since 1.4
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.GetAnalyzer">
            Returns the analyzer in use by this parser.
            
            @return the analyzer in use by this parser
            
            @since 1.4
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.SetInitialized(System.Boolean)">
            Sets the parser initialized flag. Normally this flag is set by
            the prepare() method, but this method allows further 
            modifications to it.
            
            @param initialized    the new initialized flag
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.AddPattern(PerCederberg.Grammatica.Parser.ProductionPattern)">
            Adds a new production pattern to the parser. The first pattern 
            added is assumed to be the starting point in the grammar. The 
            patterns added may be validated to some extent.
            
            @param pattern        the pattern to add
            
            @throws ParserCreationException if the pattern couldn't be 
                        added correctly to the parser
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.Prepare">
            Initializes the parser. All the added production patterns will
            be analyzed for ambiguities and errors. This method also 
            initializes internal data structures used during the parsing. 
            
            @throws ParserCreationException if the parser couldn't be 
                        initialized correctly 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.CheckPattern(PerCederberg.Grammatica.Parser.ProductionPattern)">
            Checks a production pattern for completeness. If some rule
            in the pattern referenced an production pattern not added
            to this parser, a parser creation exception will be thrown.
            
            @param pattern        the production pattern to check
            
            @throws ParserCreationException if the pattern referenced a 
                        pattern not added to this parser
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.CheckRule(System.String,PerCederberg.Grammatica.Parser.ProductionPatternAlternative)">
             Checks a production pattern rule for completeness. If some
             element in the rule referenced an production pattern not
             added to this parser, a parser creation exception will be
             thrown.
            
             @param name           the name of the pattern being checked 
             @param rule           the production pattern rule to check
             
             @throws ParserCreationException if the rule referenced a 
                         pattern not added to this parser
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.CheckElement(System.String,PerCederberg.Grammatica.Parser.ProductionPatternElement)">
            Checks a production pattern element for completeness. If
            the element references a production pattern not added to
            this parser, a parser creation exception will be thrown.
            
            @param name           the name of the pattern being checked 
            @param elem           the production pattern element to check
            
            @throws ParserCreationException if the element referenced a
                        pattern not added to this parser
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.Parse">
            Parses the token stream and returns a parse tree. This method
            will call prepare() if not previously called. In case of a 
            parse error, the parser will attempt to recover and throw all
            the errors found in a parser log exception in the end.
            
            @return the parse tree
            
            @throws ParserCreationException if the parser couldn't be
                        initialized correctly
            @throws ParserLogException if the input couldn't be parsed 
                        correctly
            
            @see #prepare
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.ParseStart">
            Parses the token stream and returns a parse tree.
            
            @return the parse tree
            
            @throws ParseException if the input couldn't be parsed 
                        correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.AddError(PerCederberg.Grammatica.Parser.ParseException,System.Boolean)">
            Adds an error to the error log. If the parser is in error 
            recovery mode, the error will not be added to the log. If the
            recovery flag is set, this method will set the error recovery 
            counter thus enter error recovery mode. Only lexical or 
            syntactical errors require recovery, so this flag shouldn't be
            set otherwise.
            
            @param e              the error to add
            @param recovery       the recover flag 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.GetPattern(System.Int32)">
            Returns the production pattern with the specified id.
             
            @param id             the production pattern id
            
            @return the production pattern found, or
                    null if non-existent
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.GetStartPattern">
            Returns the production pattern for the starting production.
             
            @return the start production pattern, or
                    null if no patterns have been added
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.GetPatterns">
            Returns the ordered set of production patterns.
            
            @return the ordered set of production patterns
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.EnterNode(PerCederberg.Grammatica.Parser.Node)">
            Handles the parser entering a production. This method calls the
            appropriate analyzer callback if the node is not hidden. Note
            that this method will not call any callback if an error 
            requiring recovery has ocurred.
            
            @param node           the parse tree node
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.ExitNode(PerCederberg.Grammatica.Parser.Node)">
            Handles the parser leaving a production. This method calls the
            appropriate analyzer callback if the node is not hidden, and 
            returns the result. Note that this method will not call any 
            callback if an error requiring recovery has ocurred.
            
            @param node           the parse tree node
            
            @return the parse tree node, or
                    null if no parse tree should be created
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.AddNode(PerCederberg.Grammatica.Parser.Production,PerCederberg.Grammatica.Parser.Node)">
            Handles the parser adding a child node to a production. This 
            method calls the appropriate analyzer callback. Note that this 
            method will not call any callback if an error requiring 
            recovery has ocurred.
            
            @param node           the parent parse tree node
            @param child          the child parse tree node, or null
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.NextToken">
            Reads and consumes the next token in the queue. If no token
            was available for consumation, a parse error will be
            thrown.
            
            @return the token consumed
            
            @throws ParseException if the input stream couldn't be read or
                        parsed correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.NextToken(System.Int32)">
             Reads and consumes the next token in the queue. If no token was
             available for consumation, a parse error will be thrown. A 
             parse error will also be thrown if the token id didn't match 
             the specified one. 
            
             @param id             the expected token id
              
             @return the token consumed
             
             @throws ParseException if the input stream couldn't be parsed
                         correctly, or if the token wasn't expected
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.PeekToken(System.Int32)">
            Returns a token from the queue. This method is used to check 
            coming tokens before they have been consumed. Any number of 
            tokens forward can be checked. 
            
            @param steps          the token queue number, zero (0) for first
            
            @return the token in the queue, or
                    null if no more tokens in the queue
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.ToString">
            Returns a string representation of this parser. The string will
            contain all the production definitions and various additional 
            information.
            
            @return a detailed string representation of this parser
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.ToString(PerCederberg.Grammatica.Parser.ProductionPattern)">
            Returns a string representation of a production pattern.
            
            @param prod           the production pattern
            
            @return a detailed string representation of the pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.ToString(PerCederberg.Grammatica.Parser.ProductionPatternAlternative)">
            Returns a string representation of a production pattern 
            alternative.
            
            @param alt            the production pattern alternative
            
            @return a detailed string representation of the alternative
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.ToString(PerCederberg.Grammatica.Parser.ProductionPatternElement)">
            Returns a string representation of a production pattern 
            element.
            
            @param elem           the production pattern element
            
            @return a detailed string representation of the element
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Parser.GetTokenDescription(System.Int32)">
            Returns a token description for a specified token.
            
            @param token          the token to describe
            
            @return the token description
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.ParserCreationException" -->
        <member name="F:PerCederberg.Grammatica.Parser.ParserCreationException.type">
            The error type.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ParserCreationException.name">
            The token or production pattern name. This variable is only
            set for some error types.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ParserCreationException.info">
            The additional error information string. This variable is only
            set for some error types.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ParserCreationException.details">
            The error details list. This variable is only set for some
            error types.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParserCreationException.#ctor(PerCederberg.Grammatica.Parser.ParserCreationException.ErrorType,System.String)">
             Creates a new parser creation exception.
            
             @param type           the parse error type
             @param info           the additional error information
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParserCreationException.#ctor(PerCederberg.Grammatica.Parser.ParserCreationException.ErrorType,System.String,System.String)">
             Creates a new parser creation exception.
            
             @param type           the parse error type
             @param name           the token or production pattern name
             @param info           the additional error information
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParserCreationException.#ctor(PerCederberg.Grammatica.Parser.ParserCreationException.ErrorType,System.String,System.String,System.Collections.ArrayList)">
             Creates a new parser creation exception.
            
             @param type           the parse error type
             @param name           the token or production pattern name
             @param info           the additional error information
             @param details        the error details list
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParserCreationException.GetErrorType">
             Returns the error type.
            
             @return the error type
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParserCreationException.GetName">
             Returns the token or production name.
            
             @return the token or production name
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParserCreationException.GetInfo">
             Returns the additional error information.
            
             @return the additional error information
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParserCreationException.GetDetails">
             Returns the detailed error information as a string
            
             @return the detailed error information
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParserCreationException.GetMessage">
             Returns the error message. This message will contain all the
             information available.
            
             @return the error message
        </member>
        <member name="P:PerCederberg.Grammatica.Parser.ParserCreationException.Message">
            The message property. This property contains the detailed
            exception error message.
        </member>
        <member name="T:PerCederberg.Grammatica.Parser.ParserCreationException.ErrorType">
            The error type enumeration.
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.ParserLogException" -->
        <member name="F:PerCederberg.Grammatica.Parser.ParserLogException.errors">
            The list of errors found.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParserLogException.#ctor">
            Creates a new empty parser log exception.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParserLogException.GetErrorCount">
            Returns the number of errors in this log.
            
            @return the number of errors in this log
        </member>
        <!-- Badly formed XML comment ignored for member "M:PerCederberg.Grammatica.Parser.ParserLogException.GetError(System.Int32)" -->
        <member name="M:PerCederberg.Grammatica.Parser.ParserLogException.AddError(PerCederberg.Grammatica.Parser.ParseException)">
            Adds a parse error to the log.
            
            @param e              the parse error to add
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ParserLogException.GetMessage">
            Returns the detailed error message. This message will contain
            the error messages from all errors in this log, separated by
            a newline.
            
            @return the detailed error message
        </member>
        <member name="P:PerCederberg.Grammatica.Parser.ParserLogException.Message">
            The message property. This property contains the detailed
            exception error message.
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.Production" -->
        <member name="F:PerCederberg.Grammatica.Parser.Production.pattern">
            The production pattern used for this production.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Production.children">
            The child nodes.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Production.#ctor(PerCederberg.Grammatica.Parser.ProductionPattern)">
            Creates a new production node.
            
            @param pattern        the production pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Production.IsHidden">
            Checks if this node is hidden, i.e. if it should not be visible
            outside the parser.
            
            @return true if the node should be hidden, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Production.GetPattern">
            Returns the production pattern for this production.
            
            @return the production pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Production.GetId">
            Returns the production (pattern) id. This value is set as a 
            unique identifier when creating the production pattern to 
            simplify later identification.
            
            @return the production id
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Production.GetName">
            Returns the production node name.
            
            @return the production node name
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Production.GetChildCount">
            Returns the number of child nodes.
            
            @return the number of child nodes
        </member>
        <!-- Badly formed XML comment ignored for member "M:PerCederberg.Grammatica.Parser.Production.GetChildAt(System.Int32)" -->
        <member name="M:PerCederberg.Grammatica.Parser.Production.AddChild(PerCederberg.Grammatica.Parser.Node)">
            Adds a child node. The node will be added last in the list of
            children.
            
            @param child          the child node to add
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Production.ToString">
            Returns a string representation of this production.
            
            @return a string representation of this production
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.ProductionPattern" -->
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPattern.id">
            The production pattern identity.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPattern.name">
            The production pattern name.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPattern.syntetic">
            The syntectic production flag. If this flag is set, the 
            production identified by this pattern has been artificially 
            inserted into the grammar.  
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPattern.alternatives">
            The list of production pattern alternatives.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPattern.defaultAlt">
            The default production pattern alternative. This alternative
            is used when no other alternatives match. It may be set to 
            -1, meaning that there is no default (or fallback) alternative.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPattern.lookAhead">
            The look-ahead set associated with this pattern.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.#ctor(System.Int32,System.String)">
            Creates a new production pattern.
            
            @param id             the production pattern id
            @param name           the production pattern name
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.IsSyntetic">
            Checks if the syntetic production flag is set. If this flag
            is set, the production identified by this pattern has been
            artificially inserted into the grammar. No parse tree nodes
            will be created for such nodes, instead the child nodes
            will be added directly to the parent node.
              
            @return true if this production pattern is syntetic, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.IsLeftRecursive">
            Checks if this pattern is recursive on the left-hand side.
            This method checks if any of the production pattern
            alternatives is left-recursive.
             
            @return true if at least one alternative is left recursive, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.IsRightRecursive">
            Checks if this pattern is recursive on the right-hand side.
            This method checks if any of the production pattern
            alternatives is right-recursive.
             
            @return true if at least one alternative is right recursive, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.IsMatchingEmpty">
            Checks if this pattern would match an empty stream of
            tokens. This method checks if any one of the production
            pattern alternatives would match the empty token stream.
             
            @return true if at least one alternative match no tokens, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.GetId">
            Returns the unique production pattern identity value.
            
            @return the production pattern id
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.GetName">
            Returns the production pattern name.
            
            @return the production pattern name
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.SetSyntetic(System.Boolean)">
            Sets the syntetic production pattern flag. If this flag is set, 
            the production identified by this pattern has been artificially 
            inserted into the grammar. By default this flag is set to 
            false.
            
            @param syntetic       the new value of the syntetic flag
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.GetAlternativeCount">
            Returns the number of alternatives in this pattern.
             
            @return the number of alternatives in this pattern
        </member>
        <!-- Badly formed XML comment ignored for member "M:PerCederberg.Grammatica.Parser.ProductionPattern.GetAlternative(System.Int32)" -->
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.AddAlternative(PerCederberg.Grammatica.Parser.ProductionPatternAlternative)">
            Adds a production pattern alternative.
            
            @param alt            the production pattern alternative to add
            
            @throws ParserCreationException if an identical alternative has
                        already been added
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.ToString">
             Returns a string representation of this object.
            
             @return a token string representation
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.GetLookAhead">
            Returns the look-ahead set associated with this alternative.
            
            @return the look-ahead set associated with this alternative
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.SetLookAhead(PerCederberg.Grammatica.Parser.LookAheadSet)">
            Sets the look-ahead set for this alternative.
            
            @param lookAhead      the new look-ahead set
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.GetDefaultAlternative">
            Returns the default pattern alternative. The default 
            alternative is used when no other alternative matches.  
            
            @return the default pattern alternative, or 
                    null if none has been set
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPattern.SetDefaultAlternative(System.Int32)">
            Sets the default pattern alternative. The default alternative
            is used when no other alternative matches.
              
            @param pos            the position of the default alternative
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.ProductionPatternAlternative" -->
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.pattern">
            The production pattern.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.elements">
            The element list.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.lookAhead">
            The look-ahead set associated with this alternative.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.#ctor">
            Creates a new production pattern alternative.  
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.IsLeftRecursive">
            Checks if this alternative is recursive on the left-hand
            side. This method checks all the possible left side
            elements and returns true if the pattern itself is among
            them.
             
            @return true if the alternative is left side recursive, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.IsRightRecursive">
            Checks if this alternative is recursive on the right-hand side. 
            This method checks all the possible right side elements and 
            returns true if the pattern itself is among them.
             
            @return true if the alternative is right side recursive, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.IsMatchingEmpty">
            Checks if this alternative would match an empty stream of 
            tokens. This check is equivalent of getMinElementCount() 
            returning zero (0).
             
            @return true if the rule can match an empty token stream, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.GetPattern">
            Returns the production pattern containing this alternative.
            
            @return the production pattern for this alternative
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.SetPattern(PerCederberg.Grammatica.Parser.ProductionPattern)">
            Changes the production pattern containing this alternative.
            This method should only be called by the production pattern
            class.
            
            @param pattern        the new production pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.GetElementCount">
            Returns the number of elements in this alternative.
             
            @return the number of elements in this alternative
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.GetMinElementCount">
            Returns the minimum number of elements needed to satisfy
            this alternative. The value returned is the sum of all the
            elements minimum count.
            
            @return the minimum number of elements
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.GetMaxElementCount">
            Returns the maximum number of elements needed to satisfy
            this alternative. The value returned is the sum of all the
            elements maximum count.
            
            @return the maximum number of elements
        </member>
        <!-- Badly formed XML comment ignored for member "M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.GetElement(System.Int32)" -->
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.AddToken(System.Int32,System.Int32,System.Int32)">
            Adds a token to this alternative. The token is appended to
            the end of the element list. The multiplicity values
            specified define if the token is optional or required, and
            if it can be repeated.
            
            @param id             the token (pattern) id
            @param min            the minimum number of occurancies
            @param max            the maximum number of occurancies, or
                                  -1 for infinite 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.AddProduction(System.Int32,System.Int32,System.Int32)">
            Adds a production to this alternative. The production is
            appended to the end of the element list. The multiplicity
            values specified define if the production is optional or
            required, and if it can be repeated.
            
            @param id             the production (pattern) id
            @param min            the minimum number of occurancies
            @param max            the maximum number of occurancies, or
                                  -1 for infinite 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.AddElement(PerCederberg.Grammatica.Parser.ProductionPatternElement)">
            Adds a production pattern element to this alternative. The
            element is appended to the end of the element list.
            
            @param elem           the production pattern element
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.AddElement(PerCederberg.Grammatica.Parser.ProductionPatternElement,System.Int32,System.Int32)">
            Adds a production pattern element to this alternative. The
            multiplicity values in the element will be overridden with
            the specified values. The element is appended to the end of
            the element list.
            
            @param elem           the production pattern element
            @param min            the minimum number of occurancies
            @param max            the maximum number of occurancies, or
                                  -1 for infinite 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.Equals(System.Object)">
            Checks if this object is equal to another. This method only
            returns true for another production pattern alternative
            with identical elements in the same order.
            
            @param obj            the object to compare with
            
            @return true if the object is identical to this one, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.Equals(PerCederberg.Grammatica.Parser.ProductionPatternAlternative)">
            Checks if this alternative is equal to another. This method 
            returns true if the other production pattern alternative 
            has identical elements in the same order.
            
            @param alt            the alternative to compare with
            
            @return true if the object is identical to this one, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.ToString">
             Returns a string representation of this object.
            
             @return a token string representation
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.GetLookAhead">
            Returns the look-ahead set associated with this alternative.
            
            @return the look-ahead set associated with this alternative
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternAlternative.SetLookAhead(PerCederberg.Grammatica.Parser.LookAheadSet)">
            Sets the look-ahead set for this alternative.
            
            @param lookAhead      the new look-ahead set
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.ProductionPatternElement" -->
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPatternElement.token">
            The token flag. This flag is true for token elements, and 
            false for production elements.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPatternElement.id">
            The node identity.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPatternElement.min">
            The minimum occurance count.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPatternElement.max">
            The maximum occurance count.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.ProductionPatternElement.lookAhead">
            The look-ahead set associated with this element.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternElement.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32)">
            Creates a new element. If the maximum value if zero (0) or
            negative, it will be set to Int32.MaxValue.
            
            @param isToken        the token flag
            @param id             the node identity
            @param min            the minimum number of occurancies
            @param max            the maximum number of occurancies, or
                                  negative for infinite 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternElement.IsToken">
            Returns true if this element represents a token.
            
            @return true if the element is a token, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternElement.IsProduction">
            Returns true if this element represents a production.
            
            @return true if the element is a production, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternElement.IsMatch(PerCederberg.Grammatica.Parser.Token)">
            Checks if a specific token matches this element. This
            method will only return true if this element is a token
            element, and the token has the same id and this element.
            
            @param token          the token to check
            
            @return true if the token matches this element, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternElement.GetId">
            Returns the node identity.
            
            @return the node identity
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternElement.GetMinCount">
            Returns the minimum occurence count. 
            
            @return the minimum occurence count
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternElement.GetMaxCount">
            Returns the maximum occurence count.
            
            @return the maximum occurence count
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternElement.Equals(System.Object)">
            Checks if this object is equal to another. This method only
            returns true for another identical production pattern
            element.
            
            @param obj            the object to compare with
            
            @return true if the object is identical to this one, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternElement.ToString">
            Returns a string representation of this object.
            
            @return a string representation of this object
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternElement.GetLookAhead">
            Returns the look-ahead set associated with this alternative.
            
            @return the look-ahead set associated with this alternative
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.ProductionPatternElement.SetLookAhead(PerCederberg.Grammatica.Parser.LookAheadSet)">
            Sets the look-ahead set for this alternative.
            
            @param lookAhead      the new look-ahead set
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.RecursiveDescentParser" -->
        <member name="F:PerCederberg.Grammatica.Parser.RecursiveDescentParser.lookAheads">
            The map of pattern look-ahead sets. The map is indexed by
            the production pattern object.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.#ctor(PerCederberg.Grammatica.Parser.Tokenizer)">
            Creates a new parser.
            
            @param tokenizer      the tokenizer to use
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.#ctor(PerCederberg.Grammatica.Parser.Tokenizer,PerCederberg.Grammatica.Parser.Analyzer)">
            Creates a new parser.
            
            @param tokenizer      the tokenizer to use
            @param analyzer       the analyzer callback to use
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.AddPattern(PerCederberg.Grammatica.Parser.ProductionPattern)">
            Adds a new production pattern to the parser. The pattern
            will be added last in the list. The first pattern added is
            assumed to be the starting point in the grammar. The
            pattern will be validated against the grammar type to some
            extent.
            
            @param pattern        the pattern to add
            
            @throws ParserCreationException if the pattern couldn't be 
                        added correctly to the parser
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.Prepare">
            Initializes the parser. All the added production patterns
            will be analyzed for ambiguities and errors. This method
            also initializes the internal data structures used during
            the parsing.
            
            @throws ParserCreationException if the parser couldn't be 
                        initialized correctly 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.ParseStart">
            Parses the input stream and creates a parse tree.
            
            @return the parse tree
            
            @throws ParseException if the input couldn't be parsed 
                        correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.ParsePattern(PerCederberg.Grammatica.Parser.ProductionPattern)">
            Parses a production pattern. A parse tree node may or may
            not be created depending on the analyzer callbacks.
            
            @param pattern        the production pattern to parse
            
            @return the parse tree node created, or null
            
            @throws ParseException if the input couldn't be parsed 
                        correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.ParseAlternative(PerCederberg.Grammatica.Parser.ProductionPatternAlternative)">
            Parses a production pattern alternative. A parse tree node
            may or may not be created depending on the analyzer
            callbacks.
            
            @param alt            the production pattern alternative
            
            @return the parse tree node created, or null
            
            @throws ParseException if the input couldn't be parsed 
                        correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.ParseElement(PerCederberg.Grammatica.Parser.Production,PerCederberg.Grammatica.Parser.ProductionPatternElement)">
             Parses a production pattern element. All nodes parsed may
             or may not be added to the parse tree node specified,
             depending on the analyzer callbacks.
            
             @param node           the production parse tree node  
             @param elem           the production pattern element to parse
             
             @throws ParseException if the input couldn't be parsed 
                         correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.IsNext(PerCederberg.Grammatica.Parser.ProductionPattern)">
            Checks if the next tokens match a production pattern. The
            pattern look-ahead set will be used if existing, otherwise
            this method returns false.
            
            @param pattern        the pattern to check
            
            @return true if the next tokens match, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.IsNext(PerCederberg.Grammatica.Parser.ProductionPatternAlternative)">
             Checks if the next tokens match a production pattern
             alternative. The pattern alternative look-ahead set will be
             used if existing, otherwise this method returns false.
            
             @param alt            the pattern alternative to check
              
             @return true if the next tokens match, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.IsNext(PerCederberg.Grammatica.Parser.ProductionPatternElement)">
             Checks if the next tokens match a production pattern
             element. If the element has a look-ahead set it will be
             used, otherwise the look-ahead set of the referenced
             production or token will be used.
            
             @param elem           the pattern element to check
              
             @return true if the next tokens match, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.CalculateLookAhead(PerCederberg.Grammatica.Parser.ProductionPattern)">
            Calculates the look-ahead needed for the specified production 
            pattern. This method attempts to resolve any conflicts and 
            stores the results in the pattern look-ahead object. 
            
            @param pattern        the production pattern
            
            @throws ParserCreationException if the look-ahead set couldn't
                        be determined due to inherent ambiguities
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.CalculateLookAhead(PerCederberg.Grammatica.Parser.ProductionPatternAlternative,System.Int32)">
            Calculates the look-aheads needed for the specified pattern 
            alternative. This method attempts to resolve any conflicts in 
            optional elements by recalculating look-aheads for referenced 
            productions. 
            
            @param alt            the production pattern alternative
            @param pos            the pattern element position
            
            @throws ParserCreationException if the look-ahead set couldn't
                        be determined due to inherent ambiguities
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.FindLookAhead(PerCederberg.Grammatica.Parser.ProductionPattern,System.Int32,PerCederberg.Grammatica.Parser.RecursiveDescentParser.CallStack,PerCederberg.Grammatica.Parser.LookAheadSet)">
            Finds the look-ahead set for a production pattern. The maximum 
            look-ahead length must be specified. It is also possible to 
            specify a look-ahead set filter, which will make sure that 
            unnecessary token sequences will be avoided.
            
            @param pattern        the production pattern
            @param length         the maximum look-ahead length
            @param stack          the call stack used for loop detection
            @param filter         the look-ahead set filter
            
            @return the look-ahead set for the production pattern
            
            @throws ParserCreationException if an infinite loop was found
                        in the grammar
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.FindLookAhead(PerCederberg.Grammatica.Parser.ProductionPatternAlternative,System.Int32,System.Int32,PerCederberg.Grammatica.Parser.RecursiveDescentParser.CallStack,PerCederberg.Grammatica.Parser.LookAheadSet)">
            Finds the look-ahead set for a production pattern alternative. 
            The pattern position and maximum look-ahead length must be 
            specified. It is also possible to specify a look-ahead set 
            filter, which will make sure that unnecessary token sequences 
            will be avoided.
            
            @param alt            the production pattern alternative
            @param length         the maximum look-ahead length
            @param pos            the pattern element position
            @param stack          the call stack used for loop detection
            @param filter         the look-ahead set filter
            
            @return the look-ahead set for the pattern alternative
            
            @throws ParserCreationException if an infinite loop was found
                        in the grammar
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.FindLookAhead(PerCederberg.Grammatica.Parser.ProductionPatternElement,System.Int32,PerCederberg.Grammatica.Parser.RecursiveDescentParser.CallStack,PerCederberg.Grammatica.Parser.LookAheadSet)">
            Finds the look-ahead set for a production pattern element. The
            maximum look-ahead length must be specified. This method takes
            the element repeats into consideration when creating the 
            look-ahead set, but does NOT include an empty sequence even if
            the minimum count is zero (0). It is also possible to specify a
            look-ahead set filter, which will make sure that unnecessary 
            token sequences will be avoided.
            
            @param elem           the production pattern element
            @param length         the maximum look-ahead length
            @param stack          the call stack used for loop detection
            @param filter         the look-ahead set filter
            
            @return the look-ahead set for the pattern element
            
            @throws ParserCreationException if an infinite loop was found
                        in the grammar
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.FindLookAhead(PerCederberg.Grammatica.Parser.ProductionPatternElement,System.Int32,System.Int32,PerCederberg.Grammatica.Parser.RecursiveDescentParser.CallStack,PerCederberg.Grammatica.Parser.LookAheadSet)">
            Finds the look-ahead set for a production pattern element. The
            maximum look-ahead length must be specified. This method does
            NOT take the element repeat into consideration when creating 
            the look-ahead set. It is also possible to specify a look-ahead
            set filter, which will make sure that unnecessary token 
            sequences will be avoided.
            
            @param elem           the production pattern element
            @param length         the maximum look-ahead length
            @param dummy          a parameter to distinguish the method
            @param stack          the call stack used for loop detection
            @param filter         the look-ahead set filter
            
            @return the look-ahead set for the pattern element
            
            @throws ParserCreationException if an infinite loop was found
                        in the grammar
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.FindConflicts(PerCederberg.Grammatica.Parser.ProductionPattern,System.Int32)">
            Returns a look-ahead set with all conflics between
            alternatives in a production pattern.
            
            @param pattern        the production pattern
            @param maxLength      the maximum token sequence length
            
            @return a look-ahead set with the conflicts found
            
            @throws ParserCreationException if an inherent ambiguity was
                        found among the look-ahead sets
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.FindConflicts(System.String,System.String,PerCederberg.Grammatica.Parser.LookAheadSet,PerCederberg.Grammatica.Parser.LookAheadSet)">
            Returns a look-ahead set with all conflicts between two
            look-ahead sets.
            
            @param pattern        the pattern name being analyzed
            @param location       the pattern location
            @param set1           the first look-ahead set
            @param set2           the second look-ahead set
            
            @return a look-ahead set with the conflicts found
            
            @throws ParserCreationException if an inherent ambiguity was
                        found among the look-ahead sets
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.FindUnion(PerCederberg.Grammatica.Parser.ProductionPattern)">
            Returns the union of all alternative look-ahead sets in a
            production pattern.
            
            @param pattern        the production pattern
            
            @return a unified look-ahead set
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.ThrowParseException(PerCederberg.Grammatica.Parser.LookAheadSet)">
            Throws a parse exception that matches the specified look-ahead
            set. This method will take into account any initial matching 
            tokens in the look-ahead set.
            
            @param set            the look-ahead set to match
            
            @throws ParseException always thrown by this method
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.ThrowAmbiguityException(System.String,System.String,PerCederberg.Grammatica.Parser.LookAheadSet)">
             Throws a parser creation exception for an ambiguity. The 
             specified look-ahead set contains the token conflicts to be 
             reported.
            
             @param pattern        the production pattern name
             @param location       the production pattern location, or null  
             @param set            the look-ahead set with conflicts
             
             @throws ParserCreationException always thrown by this method
        </member>
        <member name="T:PerCederberg.Grammatica.Parser.RecursiveDescentParser.CallStack">
            A name value stack. This stack is used to detect loops and 
            repetitions of the same production during look-ahead analysis.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RecursiveDescentParser.CallStack.nameStack">
            A stack with names.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RecursiveDescentParser.CallStack.valueStack">
            A stack with values.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.CallStack.Contains(System.String)">
            Checks if the specified name is on the stack. 
            
            @param name           the name to search for
            
            @return true if the name is on the stack, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.CallStack.Contains(System.String,System.Int32)">
            Checks if the specified name and value combination is on
            the stack.
            
            @param name           the name to search for
            @param value          the value to search for
            
            @return true if the combination is on the stack, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.CallStack.Clear">
            Clears the stack. This method removes all elements on
            the stack.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.CallStack.Push(System.String,System.Int32)">
            Adds a new element to the top of the stack.
            
            @param name           the stack name 
            @param value          the stack value
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RecursiveDescentParser.CallStack.Pop">
            Removes the top element of the stack.
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.Token" -->
        <member name="F:PerCederberg.Grammatica.Parser.Token.pattern">
            The token pattern used for this token.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Token.image">
            The characters that constitute this token. This is normally 
            referred to as the token image.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Token.startLine">
            The line number of the first character in the token image.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Token.startColumn">
            The column number of the first character in the token image.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Token.endLine">
            The line number of the last character in the token image.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Token.endColumn">
            The column number of the last character in the token image.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Token.previous">
            The previous token in the list of tokens.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Token.next">
            The next token in the list of tokens. 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.#ctor(PerCederberg.Grammatica.Parser.TokenPattern,System.String,System.Int32,System.Int32)">
            Creates a new token.
            
            @param pattern        the token pattern
            @param image          the token image (i.e. characters)
            @param line           the line number of the first character
            @param col            the column number of the first character
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.GetId">
            Returns the token (pattern) id. This value is set as a unique
            identifier when creating the token pattern to simplify later
            identification.
            
            @return the token id
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.GetName">
            Returns the token node name.
            
            @return the token node name
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.GetImage">
            Returns the token image (i.e. the characters).
            
            @return the token characters
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.GetStartLine">
            The line number of the first character in the token image. 
            
            @return the line number of the first token character
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.GetStartColumn">
            The column number of the first character in the token image. 
            
            @return the column number of the first token character
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.GetEndLine">
            The line number of the last character in the token image. 
            
            @return the line number of the last token character
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.GetEndColumn">
            The column number of the last character in the token image. 
            
            @return the column number of the last token character
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.GetPattern">
            Returns the token pattern.
            
            @return the token pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.GetPreviousToken">
            Returns the previuos token. The previous token may be a token
            that has been ignored in the parsing. Note that if the token
            list feature hasn't been used in the tokenizer, this method 
            will always return null. By default the token list feature is
            not used.
             
            @return the previous token, or
                    null if no such token is available
            
            @see #getNextToken
            @see Tokenizer#getUseTokenList
            @see Tokenizer#setUseTokenList
            
            @since 1.4
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.SetPreviousToken(PerCederberg.Grammatica.Parser.Token)">
            Sets the previous token in the token list. This method will 
            also modify the token specified to have this token as it's 
            next token. 
            
            @param previous       the previous token, or null for none 
            
            @since 1.4
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.GetNextToken">
            Returns the next token. The next token may be a token that has 
            been ignored in the parsing. Note that if the token list 
            feature hasn't been used in the tokenizer, this method will 
            always return null. By default the token list feature is not 
            used.
             
            @return the next token, or
                    null if no such token is available
            
            @see #getPreviousToken
            @see Tokenizer#getUseTokenList
            @see Tokenizer#setUseTokenList
            
            @since 1.4
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.SetNextToken(PerCederberg.Grammatica.Parser.Token)">
            Sets the next token in the token list. This method will also 
            modify the token specified to have this token as it's 
            previous token. 
            
            @param next           the next token, or null for none 
            
            @since 1.4
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.ToString">
            Returns a string representation of this token.
            
            @return a string representation of this token
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Token.ToShortString">
            Returns a short string representation of this token. The
            string will only contain the token image and possibly the
            token pattern name.
            
            @return a short string representation of this token
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.Tokenizer" -->
        <member name="F:PerCederberg.Grammatica.Parser.Tokenizer.useTokenList">
            The token list feature flag.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Tokenizer.stringMatcher">
            The string token matcher. This token matcher is used for all
            string token patterns. This matcher implements a DFA to 
            provide maximum performance.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Tokenizer.regexpMatchers">
            The list of all regular expression token matchers. These 
            matchers each test matches for a single regular expression.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Tokenizer.input">
            The input stream to read from. When this is set to null, no
            further input is available.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Tokenizer.buffer">
            The buffer with previously read characters. Normally characters
            are appended in blocks to this buffer, and for every token that
            is found, its characters are removed from the buffer.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Tokenizer.position">
            The current position in the string buffer.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Tokenizer.line">
            The line number of the first character in the buffer. This 
            value will be incremented when reading past line breaks. 
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Tokenizer.column">
            The column number of the first character in the buffer. This 
            value will be updated for every character read. 
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Tokenizer.endOfBuffer">
            The end of buffer read flag. This flag is set if the end of
            the buffer was encountered while matching token patterns.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Tokenizer.previousToken">
            The previous token in the token list.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Tokenizer.#ctor(System.IO.TextReader)">
            Creates a new tokenizer for the specified input stream.
            
            @param input          the input stream to read
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Tokenizer.GetUseTokenList">
             Checks if the token list feature is used. The token list 
             feature makes all tokens (including ignored tokens) link to 
             each other in a linked list. By default the token list feature 
             is not used.
            
             @return true if the token list feature is used, or 
                     false otherwise
            
             @see #setUseTokenList
             @see Token#getPreviousToken
             @see Token#getNextToken
            
             @since 1.4
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Tokenizer.SetUseTokenList(System.Boolean)">
             Sets the token list feature flag. The token list feature makes
             all tokens (including ignored tokens) link to each other in a 
             linked list when active. By default the token list feature is
             not used.
            
             @param useTokenList   the token list feature flag
            
             @see #getUseTokenList
             @see Token#getPreviousToken
             @see Token#getNextToken
            
             @since 1.4
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Tokenizer.GetPatternDescription(System.Int32)">
            Returns a description of the token pattern with the
            specified id.
            
            @param id             the token pattern id
            
            @return the token pattern description, or
                    null if not present
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Tokenizer.GetCurrentLine">
            Returns the current line number. This number will be the line
            number of the next token returned.
            
            @return the current line number
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Tokenizer.GetCurrentColumn">
            Returns the current column number. This number will be the 
            column number of the next token returned.
            
            @return the current column number
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Tokenizer.AddPattern(PerCederberg.Grammatica.Parser.TokenPattern)">
            Adds a new token pattern to the tokenizer. The pattern will be
            added last in the list, choosing a previous token pattern in 
            case two matches the same string.
            
            @param pattern        the pattern to add
            
            @throws ParserCreationException if the pattern couldn't be 
                        added to the tokenizer
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Tokenizer.Next">
             Finds the next token on the stream. This method will return
             null when end of file has been reached. It will return a
             parse exception if no token matched the input stream, or if
             a token pattern with the error flag set matched. Any tokens
             matching a token pattern with the ignore flag set will be
             silently ignored and the next token will be returned.
             
             @return the next token found, or 
                     null if end of file was encountered
            
             @throws ParseException if the input stream couldn't be read or
                         parsed correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Tokenizer.NextToken">
             Finds the next token on the stream. This method will return
             null when end of file has been reached. It will return a
             parse exception if no token matched the input stream.
             
             @return the next token found, or 
                     null if end of file was encountered
            
             @throws ParseException if the input stream couldn't be read or
                         parsed correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Tokenizer.ReadInput">
            Reads characters from the input stream and appends them to
            the input buffer. This method is safe to call even though
            the end of file has been reached. As a side effect, this
            method may also remove
            
            @throws ParseException if an error was encountered while 
                        reading the input stream
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Tokenizer.FindMatch">
            Finds the longest token match from the current buffer
            position. This method will return the token matcher for the
            best match, or null if no match was found. As a side
            effect, this method will also set the end of buffer flag.
             
            @return the token mathcher with the longest match, or
                    null if no match was found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Tokenizer.ToString">
            Returns a string representation of this object. The returned
            string will contain the details of all the token patterns 
            contained in this tokenizer.
            
            @return a detailed string representation 
        </member>
        <member name="T:PerCederberg.Grammatica.Parser.TokenMatcher">
            A token pattern matcher. This class is the base class for the
            two types of token matchers that exist. The token matcher
            checks for matches with the tokenizer buffer, and maintains the
            state of the last match.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenMatcher.GetMatchedPattern">
            Returns the latest matched token pattern.
            
            @return the latest matched token pattern, or
                    null if no match found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenMatcher.GetMatchedLength">
            Returns the length of the latest match.
            
            @return the length of the latest match, or 
                    zero (0) if no match found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenMatcher.HasReadEndOfString">
            Checks if the end of string was encountered during the last
            match. 
            
            @return true if the end of string was reached, or
                    false otherwise
        </member>
        <member name="T:PerCederberg.Grammatica.Parser.RegExpTokenMatcher">
            A regular expression token pattern matcher. This class is used
            to match a single regular expression with the tokenizer 
            buffer. This class also maintains the state of the last match. 
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RegExpTokenMatcher.pattern">
            The token pattern to match with.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RegExpTokenMatcher.regExp">
            The regular expression to use.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.RegExpTokenMatcher.matcher">
            The regular expression matcher to use.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RegExpTokenMatcher.#ctor(PerCederberg.Grammatica.Parser.TokenPattern)">
            Creates a new regular expression token matcher.
            
            @param pattern        the pattern to match
            
            @throws RegExpException if the regular expression couldn't
                        be created properly
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RegExpTokenMatcher.GetPattern">
            Returns the token pattern.
            
            @return the token pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RegExpTokenMatcher.Start">
            Returns the start position of the latest match.
            
            @return the start position of the last match, or
                    zero (0) if none found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RegExpTokenMatcher.GetMatchedPattern">
            Returns the latest matched token pattern.
            
            @return the latest matched token pattern, or
                    null if no match found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RegExpTokenMatcher.GetMatchedLength">
            Returns the length of the latest match.
            
            @return the length of the latest match, or 
                    zero (0) if no match found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RegExpTokenMatcher.HasReadEndOfString">
            Checks if the end of string was encountered during the last
            match. 
            
            @return true if the end of string was reached, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RegExpTokenMatcher.MatchFrom(System.String,System.Int32)">
            Checks if the token pattern matches the tokenizer buffer  
            from the specified position. This method will also reset 
            all flags in this matcher.
            
            @param str            the string to match
            @param pos            the starting position
            
            @return true if a match was found, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.RegExpTokenMatcher.ToString">
            Returns a string representation of this token matcher.
            
            @return a detailed string representation of this matcher
        </member>
        <member name="T:PerCederberg.Grammatica.Parser.StringTokenMatcher">
            A string token pattern matcher. This class is used to match a 
            set of strings with the tokenizer buffer. This class 
            internally uses a DFA for maximum performance. It also 
            maintains the state of the last match. 
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.StringTokenMatcher.patterns">
            The list of string token patterns. 
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.StringTokenMatcher.start">
            The finite automaton to use for matching.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.StringTokenMatcher.match">
            The last token pattern match found.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.StringTokenMatcher.endOfString">
            The end of string read flag.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.StringTokenMatcher.#ctor">
            Creates a new string token matcher.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.StringTokenMatcher.Reset">
            Resets the matcher state. This will clear the results of 
            the last match. 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.StringTokenMatcher.GetMatchedPattern">
            Returns the latest matched token pattern.
            
            @return the latest matched token pattern, or
                    null if no match found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.StringTokenMatcher.GetMatchedLength">
            Returns the length of the latest match.
            
            @return the length of the latest match, or 
                    zero (0) if no match found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.StringTokenMatcher.HasReadEndOfString">
            Checks if the end of string was encountered during the last
            match. 
            
            @return true if the end of string was reached, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.StringTokenMatcher.SetReadEndOfString">
            Sets the end of string encountered flag.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.StringTokenMatcher.GetPattern(System.Int32)">
            Returns the token pattern with the specified id. Only 
            token patterns handled by this matcher can be returned. 
            
            @param id         the token pattern id
            
            @return the token pattern found, or
                    null if not found
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.StringTokenMatcher.AddPattern(PerCederberg.Grammatica.Parser.TokenPattern)">
            Adds a string token pattern to this matcher. 
            
            @param pattern        the pattern to add
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.StringTokenMatcher.MatchFrom(System.String,System.Int32)">
            Checks if the token pattern matches the tokenizer buffer  
            from the specified position. This method will also reset 
            all flags in this matcher.
            
            @param str            the string to match
            @param pos            the starting position
            
            @return true if a match was found, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.StringTokenMatcher.ToString">
            Returns a string representation of this matcher. This will
            contain all the token patterns.
            
            @return a detailed string representation of this matcher 
        </member>
        <member name="T:PerCederberg.Grammatica.Parser.Automaton">
            A deterministic finite automaton. This is a simple automaton
            for character sequences. It cannot handle character set state
            transitions, but only supports single character transitions.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Automaton.value">
            The state value.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.Automaton.tree">
            The automaton state transition tree. Each transition from
            this state to another state is added to this tree with the
            corresponding character. 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Automaton.#ctor">
            Creates a new empty automaton. 
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Automaton.AddMatch(System.String,System.Object)">
            Adds a string match to this automaton. New states and 
            transitions will be added to extend this automaton to 
            support the specified string.
            
            @param str            the string to match
            @param value          the match value
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.Automaton.MatchFrom(PerCederberg.Grammatica.Parser.StringTokenMatcher,System.String,System.Int32)">
             Checks if the automaton matches the tokenizer buffer from 
             the specified position. This method will set the end of
             buffer flag in the specified token matcher if the end of
             buffer is reached.
            
             @param m              the string token matcher 
             @param str            the string to match
             @param pos            the starting position
             
             @return the match value, or
                     null if no match is found
        </member>
        <member name="T:PerCederberg.Grammatica.Parser.AutomatonTree">
            An automaton state transition tree. This class contains a 
            binary search tree for the automaton transitions from one 
            state to another. All transitions are linked to a single 
            character.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.AutomatonTree.value">
            The transition character. If this value is set to the zero 
            ('\0') character, this tree is empty.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.AutomatonTree.state">
            The transition state.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.AutomatonTree.left">
            The left subtree.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.AutomatonTree.right">
            The right subtree.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.AutomatonTree.#ctor">
            Creates a new empty automaton transition tree.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.AutomatonTree.Find(System.Char)">
            Finds an automaton state from the specified transition 
            character. This method searches this transition tree for
            a matching transition.
            
            @param c              the character to search for
            
            @return the automaton state found, or
                    null if no transition exists
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.AutomatonTree.Add(System.Char,PerCederberg.Grammatica.Parser.Automaton)">
            Adds a transition to this tree. 
            
            @param c              the character to transition for
            @param state          the state to transition to
        </member>
        <!-- Badly formed XML comment ignored for member "T:PerCederberg.Grammatica.Parser.TokenPattern" -->
        <member name="F:PerCederberg.Grammatica.Parser.TokenPattern.id">
            The token pattern identity.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.TokenPattern.name">
            The token pattern name.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.TokenPattern.type">
            The token pattern type.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.TokenPattern.pattern">
            The token pattern.
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.TokenPattern.error">
             The token error flag. If this flag is set, it means that an
             error should be reported if the token is found. The error
             message is present in the errorMessage variable.
            
             @see #errorMessage
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.TokenPattern.errorMessage">
             The token error message. This message will only be set if the
             token error flag is set.
            
             @see #error
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.TokenPattern.ignore">
             The token ignore flag. If this flag is set, it means that the
             token should be ignored if found. If an ignore message is
             present in the ignoreMessage variable, it will also be reported
             as a warning.
            
             @see #ignoreMessage
        </member>
        <member name="F:PerCederberg.Grammatica.Parser.TokenPattern.ignoreMessage">
             The token ignore message. If this message is set when the token
             ignore flag is also set, a warning message will be printed if
             the token is found.
            
             @see #ignore
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.#ctor(System.Int32,System.String,PerCederberg.Grammatica.Parser.TokenPattern.PatternType,System.String)">
             Creates a new token pattern.
            
             @param id             the token pattern id
             @param name           the token pattern name
             @param type           the token pattern type
             @param pattern        the token pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.IsError">
            Checks if the pattern corresponds to an error token. If this 
            is true, it means that an error should be reported if a 
            matching token is found.
            
            @return true if the pattern maps to an error token, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.IsIgnore">
            Checks if the pattern corresponds to an ignored token. If this 
            is true, it means that the token should be ignored if found.
            
            @return true if the pattern maps to an ignored token, or
                    false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.GetId">
            Returns the unique token pattern identity value.
            
            @return the token pattern id
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.GetName">
            Returns the token pattern name.
            
            @return the token pattern name
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.GetPatternType">
            Returns the token pattern type.
            
            @return the token pattern type
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.GetPattern">
            Returns te token pattern.
            
            @return the token pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.GetErrorMessage">
            Returns the token error message if the pattern corresponds to
            an error token.
             
            @return the token error message
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.GetIgnoreMessage">
            Returns the token ignore message if the pattern corresponds to
            an ignored token.
             
            @return the token ignore message
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.SetError">
            Sets the token error flag and assigns a default error message.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.SetError(System.String)">
             Sets the token error flag and assigns the specified error
             message.
            
             @param message        the error message to display
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.SetIgnore">
            Sets the token ignore flag and clears the ignore message.
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.SetIgnore(System.String)">
             Sets the token ignore flag and assigns the specified ignore
             message.
            
             @param message        the ignore message to display
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.ToString">
             Returns a string representation of this object.
            
             @return a token pattern string representation
        </member>
        <member name="M:PerCederberg.Grammatica.Parser.TokenPattern.ToShortString">
             Returns a short string representation of this object.
            
             @return a short string representation of this object
        </member>
        <member name="T:PerCederberg.Grammatica.Parser.TokenPattern.PatternType">
            The pattern type enumeration.
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UCCompilation">
            <summary>
            UCCompliation represents a compiled formula.  It encapsulates the formula parser and is responsible
            for formula parsing.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UCCompilation.baseRef">
            <summary>
            Storage for the context reference where the formula is stored.  Used to create references found in the
            formula.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UCCompilation.formula">
            <summary>
            Storage for the string representation of the formula.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UCCompilation.error">
            <summary>
            Storage for the last compilation error message.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UCCompilation.parsedNode">
            <summary>
            Storage for the root of the parse tree.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UCCompilation.tokens">
            <summary>
            Storage for the formula tokens.
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UCCompilation.functionFactory">
            <summary>
            Storage for the UltraCalcFunctionFactory instance used to create function calls.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCCompilation.#ctor">
            <summary>
            Constructor with default function factory.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCCompilation.#ctor(Infragistics.Win.CalcEngine.UltraCalcFunctionFactory)">
            <summary>
            Constructor with a specified function factory.
            </summary>
            <param name="functionFactory">The function factory used to construct function calls.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCCompilation.Parse(Infragistics.Win.CalcEngine.IUltraCalcReference,System.String)">
            <summary>
            Parse the formula into a parse tree.  Initializes the FormulaString and RootNode properties.
            </summary>
            <param name="baseReference">The context reference where the formula is stored.</param>
            <param name="formula">The formula to parse.</param>
            <returns>true if successful, otherwise Error contains compilation error message</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCCompilation.Tokenize">
            <summary>
            Converts the parsed formula into tokenized form.  Parse must be called first.
            <see cref="M:Infragistics.Win.CalcEngine.UCCompilation.Parse(Infragistics.Win.CalcEngine.IUltraCalcReference,System.String)"/>
            </summary>
            <returns>true if successful, otherwise Error contains compilation error message</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCCompilation.DoPostfixNode(PerCederberg.Grammatica.Parser.Node,Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection)">
            <summary>
            Recursive function used by Tokenize to walk the parse tree and generate the formula tokens.
            </summary>
            <param name="n">The current node being evaluated.</param>
            <param name="tokens">The formula token collection to append to.</param>
            <returns>true if successful, otherwise Error contains compilation error message</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCCompilation.DoTermLoop(Infragistics.Win.CalcEngine.UCparserConstants,PerCederberg.Grammatica.Parser.Node,Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection)">
            <summary>
            Function used by DoPostfixNode to extract a collection of terms from the parse tree.
            </summary>
            <param name="termID">The term identifier.</param>
            <param name="n">The root node of the term collection.</param>
            <param name="tokens">The formula token collection to append to.</param>
            <returns>true if successful, otherwise Error contains compilation error message</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCCompilation.DoOpNode(PerCederberg.Grammatica.Parser.Node,Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection)">
            <summary>
            Function used by DoPostfixNode to extract an Operator from the parse tree.
            </summary>
            <param name="n">The operator node.</param>
            <param name="tokens">The formula token collection to append to.</param>
            <returns>true if successful, otherwise Error contains compilation error message</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCCompilation.ConcatChildren(PerCederberg.Grammatica.Parser.Node)">
            <summary>
            Function used by DoPostfixNode to concatenate a collection of nodes.
            <param name="n">The root node to concatenate.</param>
            <returns>true if successful, otherwise Error contains compilation error message</returns>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCCompilation.CountFuncArgs(PerCederberg.Grammatica.Parser.Node)">
            <summary>
            Function used by DoPostfixNode to determine the number of function arguments for a function.
            <param name="n">The function node.</param>
            <returns>the argument count.</returns>
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCCompilation.FormulaString">
            <summary>
            Return the string representation of the formula.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCCompilation.HasAlwaysDirty">
            <summary>
            Denotes whether the formula contains an always dirty function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCCompilation.Tokens">
            <summary>
            Return the collection of tokens for the parsed formula. Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCCompilation.Error">
            <summary>
            Return the last compilation error message.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCCompilation.RootNode">
            <summary>
            Return the root of the parse tree.  Read Only.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.ReferenceActionCode">
            <summary>
            Identifies formula token types in the <b>UltraCalcFormulaToken</b> class
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCRecalcChain.CopyTo(System.Array,System.Int32)">
            <summary>
            Copys the collection to an array.
            </summary>
            <param name="array">Array used for the desitnation of the copy.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UCRecalcChain.GetEnumerator">
            <summary>
            Returns the collection enumerator.
            </summary>
            <returns>Collection enumerator.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCRecalcChain.IsSynchronized">
            <summary>
            Denotes whether the collection is thread-safe.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCRecalcChain.Count">
            <summary>
            Returns a number of elements in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UCRecalcChain.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.AddAncestor(Infragistics.Win.CalcEngine.UCReference,Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Add a formula refernce the given predecessor reference
            </summary>
            <param name="predecessor"><b>UCReference</b> predecessor reference</param>
            <param name="ancestor"><b>IUltraCalcReference</b> of formula that contains the given predecessor</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.Find(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Return the position of the given predecessor in the collection
            </summary>
            <param name="predecessor"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.DeleteAncestor(Infragistics.Win.CalcEngine.IUltraCalcReference,Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Remove the given formula ancestor from the given  predecessor's list of formulas.
            </summary>
            <param name="formulaPredecessor"><b>IUltraCalcReference</b> that's referenced by given ancestor's formula</param>
            <param name="ancestor">Formula refernce to remove for given predecessor's list of formulas</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.DeleteAncestorAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Remove the given formula ancestor from the given  predecessor's list of formulas.
            </summary>
            <param name="posPredecessor">Position of the predecessor in the ancestor list</param>
            <param name="posAncestor">Position of the ancestor in the predecessor's Ancestors list</param>
            <param name="replacePredecessorInMapEntry">Indicates whether to update the predecessor reference in the ancestor map</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.Ancestors(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Return the collection of ancestors of the given predecessor
            </summary>
            <param name="predecessor">Reference whose collection of formulas to return</param>
            <returns>Collection of references whose formulas reference the given predecessor</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.IndexOf(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Return the index of the given predecessor
            </summary>
            <param name="predecessor">Reference whose index is to be returned</param>
            <returns>Index of given predecessor, or -1 if its not found</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.CopyTo(System.Array,System.Int32)">
            <summary>
            Copys the collection to an array.
            </summary>
            <param name="array">Array used for the desitnation of the copy.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.GetEnumerator">
            <summary>
            Returns the collection enumerator.
            </summary>
            <returns>Collection enumerator.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.IsSynchronized">
            <summary>
            Denotes whether the collection is thread-safe.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.Count">
            <summary>
            Returns a number of elements in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry">
            <summary>
            Provides methods and properties to manage a list of formulas that reference a given reference
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.#ctor(Infragistics.Win.CalcEngine.UCReference)">
            <summary>
            Predecessor constructor
            </summary>
            <param name="predecessor">predecessor for this instance</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.Equals(System.Object)">
            <summary>
            Equality method that returns whether an object is equal to this one
            </summary>
            <param name="obj">Object to compare to this entry</param>
            <returns>True if object is equal to this instance, else false</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.GetHashCode">
            <summary>
            Return hashcode for this object
            </summary>
            <returns>Integer hash code for this object</returns>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.formulaPredecessor">
            <summary>
            Storage for predecessor
            </summary>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.formulaAncestors">
            <summary>
            Storage for ancestor collection
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.Predecessor">
            <summary>
            Get/Set the predecessor for this entry
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.Ancestors">
            <summary>
            Get/Set the ancestor collection for this entry
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.FormulaReference">
            <summary>
            IUltraCalcReference implementation for caching the Formula of the underlying reference.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcEngine"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.OnRecalcValue(Infragistics.Win.CalcEngine.UltraCalcReferenceEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.CalcEngine.UltraCalcEngine.RecalcValue"/> event
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.OnCircularity(Infragistics.Win.CalcEngine.UltraCalcReferenceEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.CalcEngine.UltraCalcEngine.Circularity"/> event
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.OnDirtyValue(Infragistics.Win.CalcEngine.UltraCalcReferenceEventArgs)">
            <summary>
            Used to invoke the <see cref="E:Infragistics.Win.CalcEngine.UltraCalcEngine.DirtyValue"/> event
            </summary>
            <param name="e">Event args</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.AddFunctionLibrary(System.String)">
            <summary>
            Registers an assembly containing <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> derived types.
            </summary>
            <param name="assemblyPath">File path to the assembly</param>
            <returns>Returns true if the assembly was registered successfully, else false if the registration failed</returns>
            <remarks>
            <p class="body">
            All types within the registered assembly are enumerated and any that derive from <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> class are added to the list of available formula functions
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcEngine.AddFunction(Infragistics.Win.CalcEngine.UltraCalcFunction)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.AddFunctionLibrary(System.Reflection.Assembly)">
            <summary>
            Registers an assembly containing <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> derived types.
            </summary>
            <param name="assembly">Loaded assembly to register</param>
            <returns>Returns true if the assembly was registered successfully, else false if the registration failed</returns>
            <remarks>
            <p class="body">
            All types within the registered assembly are enumerated and any that derive from <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> class are added to the list of available formula functions
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcEngine.AddFunction(Infragistics.Win.CalcEngine.UltraCalcFunction)"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.AddFunction(Infragistics.Win.CalcEngine.UltraCalcFunction)">
            <summary>
            Registers a single <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/>
            </summary>
            <param name="function">User defined function instance to register</param>
            <returns>Returns true if the type was registered successfully, else false if the registration failed</returns>
            <remarks>
            <p class="body">
            Users can build custom functions used in formulas by sub-classing the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> class.  
            Once the derived class is instaniated it must be registered by using the <b>AddFunction</b> method before being avilable and referenced by a formulas.
            Users can build a library of functions packaged in an assembly and register all the functions within the assembly by using the <b>AddFunctionLibrary</b> method.
            </p>
            </remarks>        
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.AddFormula(Infragistics.Win.CalcEngine.IUltraCalcFormula)">
            <summary>
            Adds a formula into the calculation network.
            </summary>
            <param name="formula">Formula instance containing compiled formula string to add into the calculation network</param>
            <remarks>
            <p class="body">
            Formulas are entered into the calculation network by first compiling the formula string using the <b>Compile</b> method on the <b>UltraCalcFormula</b> class, then passing the <b>UltraCalcFormula</b> instance to the <b>AddFormula</b> method.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.DeleteFormula(Infragistics.Win.CalcEngine.IUltraCalcFormula)">
            <summary>
            Deletes a formula from the calculation network
            </summary>
            <param name="formula">Formula instance to be removed</param>
            <remarks>
            <p class="body">
            References to formulas that are deleted are recalculated.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcEngine.ProcessAddFormula(Infragistics.Win.CalcEngine.IUltraCalcFormula,Infragistics.Win.CalcEngine.IUltraCalcReference)"/>
            <seealso cref="T:Infragistics.Win.CalcEngine.UltraCalcFormulaBase"/>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.Recalc(System.Int64)">
            <summary>
            Performs a time-based recalculation
            </summary>
            <param name="ticks">Denotes the number of 100-nanosecond intervals used to perform time-based partial recalculation cycles</param>
            <returns>Returns true if there are still formulas to recalculate or false if recalculation process is complete</returns>
            <remarks>
            <p class="body">
            This method performs a partial recalculation cycle, yielding after the given number of ticks has expired.  This method should be repeately
            called until it returns false denoting all dirty formulas have been recalculated.
            <p></p>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcEngine.Recalc(System.Int64)"/> 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.Recalc">
            <summary>
            Performs a synchronous recalculation
            </summary>
            <returns>Returns true if the reference is dirty, else false</returns>
            <p></p>
            <seealso cref="M:Infragistics.Win.CalcEngine.UltraCalcEngine.Recalc(System.Int64)"/> 
            <remarks>
            <p class="body">
            This method recalculates all dirty formulas before returning.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.IsDirty(Infragistics.Win.CalcEngine.IUltraCalcReference,System.Boolean)">
            <summary>
            Checks to see if a reference is dirty, and optionally waits for it to be recalculated
            </summary>
            <param name="reference">Reference whose dirty state is requested</param>
            <param name="wait">Denotes whether caller wants to wait until the reference is recalculated</param>
            <returns>True if the reference is dirty</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.Dump">
            <summary>
            Outputs information about the current state of the calculation engine.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcEngine.AfterFormulaEvaluationCompleted(Infragistics.Win.CalcEngine.IUltraCalcReference,Infragistics.Win.CalcEngine.UltraCalcFormulaBase,Infragistics.Win.CalcEngine.UltraCalcValue)">
            <summary>
            Occurs after a single evaluation of a formula has completed.
            </summary>
        </member>
        <member name="E:Infragistics.Win.CalcEngine.UltraCalcEngine.RecalcValue">
            <summary>
            Recalced value event 
            </summary>
        </member>
        <member name="E:Infragistics.Win.CalcEngine.UltraCalcEngine.Circularity">
            <summary>
            Circularity
            </summary>
        </member>
        <member name="E:Infragistics.Win.CalcEngine.UltraCalcEngine.DirtyValue">
            <summary>
            Dirty value event
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcEngine.EnableMarkedColumns">
            <summary>
            Returns or sets whether deferred calculations are enabled.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcEngine.FunctionFactory">
            <summary>
            Returns the formula function factory for this instance of the calc engine
            </summary>
            <remarks>
            <p class="body">
            Use the function factory to access detailed information about each function available to formulas compiled against this instance of the calc engine.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcEngine.CircularReference">
            <summary>
            Gets or sets a reference within a circular reference cycle.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFormulaBase">
            <summary>
            Provides methods to compile and evaluate formulas.
            </summary>
            <remarks>
            <p class="body">
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaBase.Evaluate(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Evaluate the compiled expression against the given base reference
            </summary>
            <param name="reference">Base reference used to resolve relative references into absolute references</param>
            <returns>Retuns an UltraCalcValue containing result of formula evaluation</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaBase.HasSyntaxError">
            <summary>
            Returns true if the formula has a syntax error. Formulas with syntax errors can not be added to the calc-network.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaBase.SyntaxError">
            <summary>
            Syntax error message. Returns null if the formula has no syntax errors, as would be indicated by <see cref="P:Infragistics.Win.CalcEngine.UltraCalcFormulaBase.HasSyntaxError"/> method.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaBase.HasAlwaysDirty">
            <summary>
            Denotes whether the formula contains an always dirty function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaBase.FormulaString">
            <summary>
            Returns the formula string
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaBase.BaseReference">
            <summary>
            Gets or sets the formula base reference
            </summary>
            <remarks>
            <p class="body">
            The base reference of a formula is sometimes referred to as the Left-Hand-Side (LHS)of an expression.  
            It represents the location within the grid, or other object, whose value is being computed by the given formula.  
            References within the formula expression my be fully qualified or relative to the formula's base reference.  
            For example, if we want to calculate a "[Total]" column in a grid we might have a formula such as "[Units] * [Price]".  Each cells within the
            "Total" column would be computed multiplying the "Units" cell and "Price" cell for row in the band.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaBase.Tokens">
            <summary>
            Returns a collection of formula tokens in pre-fix form, called Reverse Polish Notation.
            </summary>
            <returns>Formula token collection</returns>
            <remarks>
            <p class="body">
            Compiling a formula converts the in-fix expression string into an intemediate post-fix form optimized for evaluation.  
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaBase.References">
            <summary>
            Retuns a collection of references contained in the formula token string
            </summary>
            <returns>Collection of IUltraCalcReferences</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormula.#ctor(Infragistics.Win.CalcEngine.IUltraCalcReference,System.String)">
            <summary>
            Initializes and compiles a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFormula"/>
            </summary>
            <param name="formulaReference">Formula base reference</param>
            <param name="formula">Formula string to be compiled</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormula.#ctor(Infragistics.Win.CalcEngine.IUltraCalcReference,System.String,Infragistics.Win.CalcEngine.UltraCalcFunctionFactory)">
            <summary>
            Initializes and compiles a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFormula"/>
            </summary>
            <param name="formulaReference">Formula base reference</param>
            <param name="formula">Formula string to be compiled</param>
            <param name="functionFactory">Class providing the functions</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormula.Compile(Infragistics.Win.CalcEngine.IUltraCalcReference,System.String)">
            <summary>
            Compile a formula string for the given base reference.
            </summary>
            <param name="formulaReference">Formula base reference</param>
            <param name="formula">Expression string</param>
            <returns>True if the formula is successfully compiled, else false</returns>
            <remarks>
            <p class="body">
            Compiling a formula converts the in-fix expression string into an intemediate post-fix form optimized for evaluation.  
            If the formula compliation fails, the Error property contains the reason and location of the error. 
            Once formulas are compiled, they may be entered into the calculation network for a given UltraCalcManager instance by calling the <b>UlraCalcEngine.AddFormula</b> method.  
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormula.BaseReference">
            <summary>
            Gets or sets the formula base reference
            </summary>
            <remarks>
            <p class="body">
            The base reference of a formula is sometimes referred to as the Left-Hand-Side (LHS)of an expression.  
            It represents the location within the grid, or other object, whose value is being computed by the given formula.  
            References within the formula expression my be fully qualified or relative to the formula's base reference.  
            For example, if we want to calculate a "[Total]" column in a grid we might have a formula such as "[Units] * [Price]".  Each cells within the
            "Total" column would be computed multiplying the "Units" cell and "Price" cell for row in the band.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormula.FormulaString">
            <summary>
            Returns the formula string
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormula.HasSyntaxError">
            <summary>
            Returns true if the formula has a syntax error. Formulas with syntax errors can not be added to the calc-network.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormula.SyntaxError">
            <summary>
            Syntax error message. Returns null if the formula has no syntax errors, as would be indicated by <see cref="P:Infragistics.Win.CalcEngine.UltraCalcFormula.HasSyntaxError"/> method.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormula.Tokens">
            <summary>
            Returns a collection of formula tokens in pre-fix form, called Reverse Polish Notation.
            </summary>
            <returns>Formula token collection</returns>
            <remarks>
            <p class="body">
            Compiling a formula converts the in-fix expression string into an intemediate post-fix form optimized for evaluation.  
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFormulaReferenceCollection">
            <summary>
            Provides methods and properties that manage a collection of <b>IUltraCalcFormulaReference</b> objects.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaReferenceCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaReferenceCollection.#ctor(Infragistics.Win.CalcEngine.UltraCalcFormulaBase)">
            <summary>
            Constructor that accepts a collection of formula tokens used to access the references in a formula.
            </summary>
            <param name="formula">The formula which owns the collection.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaReferenceCollection.Add(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Adds a reference to the collection.
            </summary>
            <param name="reference"><b>IUltraCalcReference</b> instance to add to collection.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaReferenceCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copys the collection to an array.
            </summary>
            <param name="array">Array used for the desitnation of the copy.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaReferenceCollection.GetEnumerator">
            <summary>
            Returns the collection enumerator.
            </summary>
            <returns>Collection enumerator.</returns>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcFormulaReferenceCollection.tokenArray">
            <summary>
            Underlying collection object managing the token collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaReferenceCollection.IsSynchronized">
            <summary>
            Denotes whether the collection is thread-safe.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaReferenceCollection.Count">
            <summary>
            Returns a number of elements in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaReferenceCollection.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFormulaToken">
            <summary>
            Abstract base class from which all formula tokens must derive.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaToken.#ctor(Infragistics.Win.CalcEngine.UltraCalcFormulaTokenType)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaToken.Type">
            <summary>
            Return the token's type code
            </summary>
            <returns>The <b>UltraClacFormulaTokenType</b> for the this token</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionToken.ArgumentCount">
            <summary>
            Returns the number of arguments to the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionToken.Infragistics#Win#CalcEngine#IUltraCalcFunctionToken#FunctionName">
            <summary>
            The name of the UltraCalcFunction represented by the token. 
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionToken.Infragistics#Win#CalcEngine#IUltraCalcFunctionToken#FunctionOperator">
            <summary>
            Returns an UltraCalcOperatorFunction indicating the operator that the function reprsents or null of the function does not represent an operator.   
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection">
            <summary>
            Provides method and properties to manage a collection of <b>UltraCalcFormulaTokens.</b>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection.Add(Infragistics.Win.CalcEngine.UltraCalcFormulaToken)">
            <summary>
            Add a token to the collection.
            </summary>
            <param name="token">Token to add to collection.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements in the underlying ArrayList.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection.ToArray">
            <summary>
            Copies the elements of the underlying ArrayList to a new array.
            </summary>
            <returns>Copy of collection.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">Array that is the destination of the copy.</param>
            <param name="index">Index into array to begin copying collection elements.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection.GetEnumerator">
            <summary>
            Returns the collection enumerator
            </summary>
            <returns>Collection enumerator</returns>
        </member>
        <member name="F:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection.TokenArray">
            <summary>
            Underlying ArrayList used to manage token collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection.IsSynchronized">
            <summary>
            Denotes whether the collection is thread-safe.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection.Count">
            <summary>
            Returns the number of collection elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFormulaTokenCollection.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.OneBasedArgumentNumberingAttribute">
            <summary>
            For Infragistics Internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.OneBasedArgumentNumberingAttribute.#ctor(System.Int32)">
            <summary>
            For Infragistics Internal use only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.OneBasedArgumentNumberingAttribute.ArgumentIndex">
            <summary>
            For Infragistics Internal use only.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunction">
            <summary>
            Base class for formula functions.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunction.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunction.PerformEvaluation(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>        
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunction.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunction.GetArguments(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32,System.Boolean)">
            <summary>
            A helper method for extracting the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/> instances from the stack.
            </summary>
            <param name="numberStack">Number stack whose values should be popped.</param>
            <param name="argumentCount">Number of items to pop/evaluate from the number stack</param>
            <param name="skipEmptyValues">True to ignore values whose IsNull returns true; otherwise false to include empty items in the list.</param>
            <returns>An array of UltraCalcValue instances removed from the number stack.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunction.IsAlwaysDirty">
            <summary>
            Indicates whether the results of the function is always dirty.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunction.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunction.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunction.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunction.Description">
            <summary>
            Summary description for the function displayed by the formula builder tool
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunction.Category">
            <summary>
            Category description for the function displayed by the formula builder tool
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunction.ArgList">
            <summary>
            Array list of argument names
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunction.ArgDescriptors">
            <summary>
            Array list of argument descriptors
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunction.HelpURL">
            <summary>
            A URL to a help topic. 
            </summary>
            <remarks> 
            <p class="body">This property is used by the FunctionBuilder at design-time to provide a link to a help topic describing the function.</p>
            <p class="body">The default implementation returns an empty string. In this case, the Designer will not show the Help link."</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.BuiltInFunctionBase">
            <summary>
            Base class for the built in functions.
            </summary>	
        </member>
        <member name="P:Infragistics.Win.CalcEngine.BuiltInFunctionBase.Description">
            <summary>
            Summary description for the function displayed by the formula builder tool
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.BuiltInFunctionBase.Category">
            <summary>
            Category description for the function displayed by the formula builder tool
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.BuiltInFunctionBase.ArgList">
            <summary>
            Array list of argument names
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.BuiltInFunctionBase.ArgDescriptors">
            <summary>
            Array list of argument descriptors
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.BuiltInFunctionBase.HelpURL">
            <summary>
            A URL to a help topic. 
            </summary>
            <remarks> 
            <p class="body">This property is used by the FunctionBuilder at design-time to provide a link to a help topic describing the function.</p>
            <p class="body">The default implementation returns the Func_CategoryURL_Template resource string. The first substitution string argument '{0}' will be replaced by the Func_FUNCTIONNAME_CategoryURL resource. The second substitution string is the Function Name."</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionAverage">
            <summary>
            Calculates an average (arithmetic mean) for a series of numbers.
            </summary>
            <remarks>
            <p class="body">AVERAGE(value1, value2, ...)</p>
            <p class="body">Value1, value2, ... are one or more numeric values or
            references to numeric values. An average (arithmetic mean) is calculated
            by taking the sum of all values, and dividing by the number of values.</p>
            <p class="body">Each value is equally weighted. To obtain a weighted average,
            you can multiply each value by a weight in the expression.</p>
            <code>
            AVERAGE( [Value1]*[Weight1], [Value2]*[Weight2], [Value3]*[Weight3])
            </code>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionAverage.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionAverage.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionAverage.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionAverage.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionSum">
            <summary>
            Adds a series of numbers to obtain a total amount.
            </summary>
            <remarks>
            <p class="body">SUM(value1,value2,...)</p>
            <p class="body">Value1, value2, ... are references for which you want to find the total value.
            Text representations of numbers and literal numeric constants that you specify in the list of
            arguments will be included in the sum. If <em>value</em> is a column or vector reference then
            the sum will be taken of all cells or values contained by the reference. Any error values in
            the argument list, or text that is not convertible to a numeric value, will produce an error.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionSum.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSum.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSum.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSum.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionUnaryPlus">
            <summary>
            '+' Unary plus formula operator (+20)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionUnaryPlus.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionUnaryPlus.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionUnaryPlus.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionUnaryPlus.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionUnaryMinus">
            <summary>
            '-' Negation formula operator (-20)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionUnaryMinus.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionUnaryMinus.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionUnaryMinus.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionUnaryMinus.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionPlus">
            <summary>
            '+' Addition formula operator (1+2)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionPlus.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPlus.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPlus.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPlus.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMinus">
            <summary>
            '-' Subtraction formula operator (3-2)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionMinus.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMinus.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMinus.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMinus.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionPercent">
            <summary>
             '%' Percent formula operator (20%)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionPercent.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPercent.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPercent.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPercent.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMultiply">
            <summary>
            '*' Multiplication formula operator (2*3)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionMultiply.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMultiply.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMultiply.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMultiply.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDivide">
            <summary>
            '/' Division formula operator (3/2)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDivide.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDivide.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDivide.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDivide.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionConcat">
            <summary>
            '&amp;' formula operator used to concatenate two strings. ("First" &amp; "Second")
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionConcat.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionConcat.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionConcat.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionConcat.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionConcatenate">
            <summary>
            Combines two or more text values into a single text string.
            </summary>
            <remarks>
            <p class="body">CONCATENATE(text1, text2, ..., textN)</p>
            <p class="body">Text1, text2, ..., textN are multiple text values that
            you want to concatenate into one text string. These text values may be
            text strings, numbers (which will be converted into text), or a single
            value reference (such as a cell reference) containing such a value.</p>
            <p class="body">This function provides for elementary text processing
            in UltraCalc, such as when building message text or appending some
            connective text or punctuation to the results of evaluating other
            text-bearing expressions.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionConcatenate.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionConcatenate.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionConcatenate.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionConcatenate.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionEqual">
            <summary>
            '=' Equality formula operator (Price = 200)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionEqual.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionEqual.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionEqual.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionEqual.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionNE">
            <summary>
            "&lt;&gt;" Inequality formula operator (Price &lt;&gt; 200)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionNE.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNE.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNE.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNE.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionLT">
            <summary>
            '&lt;' Less than formula operator (Price &lt; 200)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionLT.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLT.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLT.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLT.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionLE">
            <summary>
            "&lt;=" Less than or equal formula operator (Price &lt;= 200)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionLE.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLE.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLE.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLE.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionGT">
            <summary>
            "&gt;" Greater than formula operator (Price > 200)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionGT.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionGT.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionGT.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionGT.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionGE">
            <summary>
            "&gt;=" Greater than or equal formula operator (Price >= 200)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionGE.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionGE.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionGE.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionGE.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionExpon">
            <summary>
            "^" Exponentiation formula operator (3^2)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionExpon.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionExpon.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionExpon.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionExpon.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIf">
            <summary>
            Chooses between two outcomes (or UltraCalc expressions to evaluate) based on
            the result of a logical test on a value or UltraCalc expression you specify.
            </summary>
            <remarks>
            <p class="body">IF( boolean_test, result_if_true, [result_if_false])</p>
            <p class="body">Boolean_test is a value (or an UltraCalc expression) which the IF function
            evaluates to produce a boolean value of either TRUE or FALSE. The outcome of
            this test determines which result will be returned by the function.
            </p>
            <p class="body">Result_if_true is a value (or the outcome of another
            UltraCalc expression) that will be returned only when boolean_test has
            evaluated to the boolean value, TRUE.</p>
            <p class="body">Result_if_false is a value (or the outcome of another
            UltraCalc expression) that will be returned only when boolean_test has
            evaluated to the boolean value, FALSE.</p>
            <p class="body">The IF function allows you to write an UltraCalc expression
            that branches to one expression (when the boolean_test is TRUE) or another
            (when the boolean_test is FALSE) based on an arbitrary condition you have
            specified.</p>
            <p class="body">The result_if_false is not specified and boolean_test is FALSE, the 
            IF function will return FALSE.</p>
            <p class="note">If boolean_test's evaluation produces an error value then
            neither Result_if_true nor Result_if_false will be evaluated. Instead, the
            IF function returns the error value from its evaluation of boolean_test.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIf.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIf.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIf.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIf.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionAbs">
            <summary>
            Calculates a number's absolute value.
            </summary>
            <remarks>
            <p class="body">ABS( value)</p>
            <p class="body">A number's absolute value is it's value without any
            sign. It represents the magnitude of a value while ignoring it's
            direction (positive or negative) on a number line or vector.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionAbs.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionAbs.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionAbs.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionAbs.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMod">
            <summary>
            Gets the remainder following integer division of two numbers.
            </summary>
            <remarks>
            <p class="body">MOD(numerator, denominator)</p>
            <p class="body">Numerator is the number being divided by <em>denominator</em>.
            When <em>denominator</em> can only be taken from <em>numerator</em>
            a certain whole number of types (the quotient), any leftover is the
            remainder.</p>
            <p class="body">Denominator is the number dividing the <em>numerator</em>.
            Any remainder will have the sign of the <em>denominator</em>. This number
            cannot be zero, otherwise the MOD() function returns a #DIV/0 error.</p>
            <p class="body">If you want to perform integer division on these two numbers
            then use the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionQuotient">QUOTIENT()</see> function.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionMod.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMod.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMod.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMod.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionQuotient">
            <summary>
            Performs integer division on two numbers disregarding any remainder.
            </summary>
            <remarks>
            <p class="body">QUOTIENT(numerator, denominator)</p>
            <p class="body">Numerator is a numeric value that will be divided
            by the <em>denominator</em>. It is sometimes called the dividend.
            </p>
            <p class="body">Denominator is the numeric value that divides the
            <em>numerator</em>. It is sometimes called the divisor.  It cannot
            be zero or a #DIV/0 error value will be returned.
            </p>
            <p class="body">When either the <em>numerator</em> or the 
            <em>denominator</em> is not a number, the QUOTIENT() function
            returns an error value (#VALUE!).</p>
            <p class="body">If you need the remainder from an integer division,
            use the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMod">MOD()</see> function.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionQuotient.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionQuotient.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionQuotient.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionQuotient.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionProduct">
            <summary>
            Multiplies a series of numbers to return their total product.
            </summary>
            <remarks>
            <p class="body">PRODUCT( value1, value2, ..., valueN)</p>
            <p class="body">Value1 is the first number (the multiplicand) in a
            series of numbers that you want to multiply.</p>
            <p class="body">Value2 is the second number (the first multiplier)
            in a series of numbers that you want to multiply.</p>
            <p class="body">Value<em>N</em> is the last number (the last multiplier)
            in a series of numbers that you want to multiply.</p>
            <p class="body">This function offers a convenience when you need to
            multiply many numbers or expressions at one time.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionProduct.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionProduct.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionProduct.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionProduct.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionPower">
            <summary>
            Raises the specific number to a power.
            </summary>
            <remarks>
            <p class="body">POWER(value, exponent)</p>
            <p class="body">Value is a numeric value or reference to a numeric value
            which you want to raise to a power.</p>
            <p class="body">Exponent is a real number power to which <em>value</em>
            is to be raised. Imaginary exponents are not supported.</p>
            <p class="body">Common applications of the POWER() function occur when
            you need to multiply a number against itself multiple times. For example,
            it is common in many computer applications to create bit mask values by
            raising the value 2 to integer exponents, which produce a sequence such
            as (1, 2, 4, 8, 16, 32, 64, 128, ...)</p>
            <p class="body">The POWER() function additionally supports fractional
            exponents, and can be used to emulate other functions such as the quad
            root (raising to an exponent of 0.25, which is 1/4) or the inverse
            square (raising to an exponent of -2.0).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionPower.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPower.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPower.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPower.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionInt">
            <summary>
            Converts a real numeric value (which may have a fractional part)
            into a whole number.
            </summary>
            <remarks>
            <p class="body">INT(value)</p>
            <p class="body">Value is a real numeric value that you want to
            convert into a whole number. INT() is a more specialized version
            of the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionTrunc">TRUNC()</see> function
            because it always produces integer values (whereas the TRUNC()
            function allows you to specify a precision at which to truncate
            the numeric value.)</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionInt.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionInt.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionInt.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionInt.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionTrunc">
            <summary>
            Truncates the fractional portion of a numeric value to produce an integer.
            </summary>
            <remarks>
            <p class="body">TRUNC(value, number_of_digits)</p>
            <p class="body">Value is a numeric value or reference to a numeric value
            that you want to truncate.</p>
            <p class="body">Number_of_digits specifies the precision at which truncation
            should occur. By default, truncation occurs zero places right of the decimal
            point which will produce an integer.</p>
            <p class="body">Truncation always discards the fractional value, causing the
            <em>Value</em> to move closer to zero (whether it was positive or negative
            before the truncation). It differs from the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionRound">ROUND()</see>
            function in that the value always changes to a lesser value.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionTrunc.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTrunc.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTrunc.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTrunc.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionCount">
            <summary>
            Counts how many cells have numeric or date/time values. 
            </summary>
            <remarks>
            <p class="body">COUNT(Value1, Value2, ..., ValueN)</p>
            <p class="body">Value1, value2, ... valueN can be references to different data structures,
            such as columns. Each numeric or date/time value is counted. Empty, error, boolean or text
            values that are not convertible into numeric values are not counted.</p>
            <p class="body">When a reference is a range reference, only those numeric and date/time
            values within the range will be counted.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionCount.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCount.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCount.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCount.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionTrue">
            <summary>
            A constant function always returning the TRUE value of Boolean
            logic.
            </summary>
            <remarks>
            <p class="body">TRUE() will always evaluate to the boolean value
            of TRUE. It takes no arguments.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionTrue.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTrue.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTrue.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTrue.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionFalse">
            <summary>
            A constant function always returning the FALSE value of Boolean
            logic.
            </summary>
            <remarks>
            <p class="body">FALSE() will always evaluate to the boolean value
            of FALSE. It takes no arguments.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionFalse.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFalse.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFalse.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFalse.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionNot">
            <summary>
            Logical-NOT returns the inverse boolean value of it's argument.
            </summary>
            <remarks>
            <p class="body">NOT(boolean1)</p>
            <p class="body">Boolean1 is any boolean (TRUE or FALSE) value, or
            conditional statement (made up of any UltraCalc expression which
            itself evaluates to a boolean TRUE or FALSE value) to be inverted.</p>
            <p class="body">If boolean1 was TRUE, then the Logical-NOT would
            return FALSE. If boolean1 was FALSE, then the Logical-NOT would
            return TRUE.</p>
            <p class="note">If Boolean1 is an UltraCalc expression that evaluates
            to an error value, then the result of a Logical-NOT operation is
            undefined because an error value is neither TRUE nor FALSE.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionNot.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNot.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNot.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNot.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionAnd">
            <summary>
            Logical-AND returns the boolean value, FALSE, if at least one argument has a value of FALSE.
            When <em>all</em> arguments are TRUE, then this function returns TRUE.
            </summary>
            <remarks>
            <p class="body">AND(boolean1, boolean2, ...)</p>
            <p class="body">Boolean1, boolean2, ... are a list of boolean (TRUE or FALSE) values or
            conditional statements (any UltraCalc expression which itself evaluates to a boolean
            TRUE or FALSE value) to be evaluated for the constraint that all arguments should be
            TRUE (or conversely, that at least one argument should be FALSE.)</p>
            <p class="body">All arguments are tested (<em>i.e.</em>, the logical-AND function
            does not use "short-circuit" evaluation, in which the function can stop executing
            as soon as the first argument having the boolean value, FALSE, has been processed.)</p>
            <p class="note">This function stops evaluating immediately when any argument results in
            an error value. An error value is neither TRUE nor FALSE, therefore the return value of
            the logical-AND function is undefined.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionAnd.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionAnd.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionAnd.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionAnd.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionOr">
            <summary>
            Logical-OR returns the boolean value, TRUE, if at least one argument has a value of TRUE.
            When <em>all</em> arguments are FALSE, then this function returns FALSE.
            </summary>
            <remarks>
            <p class="body">OR(boolean1, boolean2, ...)</p>
            <p class="body">Boolean1, boolean2, ... are a list of boolean (TRUE or FALSE) values or
            conditional statements (any UltraCalc expression which itself evaluates to a boolean
            TRUE or FALSE value) to be evaluated for the constraint that at least one argument
            should be TRUE (or conversely, that all arguments should be FALSE.)</p>
            <p class="body">All arguments are tested (<em>i.e.</em>, the logical-OR function
            does not use "short-circuit" evaluation, in which the function can stop executing
            as soon as the first argument having the boolean value, TRUE, has been processed.)</p>
            <p class="note">This function stops evaluating immediately when any argument results in
            an error value. An error value is neither TRUE nor FALSE, therefore the return value of
            the logical-OR function is undefined.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionOr.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOr.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOr.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOr.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMin">
            <summary>
            Gives you the smallest numeric value out of a series. 
            </summary>
            <remarks>
            <p class="body">MIN(Value1, value2, ..., valueN)</p>
            <p class="body">Value1, value2, ... valueN are any number of numeric values or references to
            numeric values from which you want the minimum value found. Arguments may be numbers, boolean
            values, text values convertible into numbers, or empty. Error values and text values that are
            not convertible into numbers will produce an error.</p>
            <p class="body">The minimum value for a series of numbers can be it's largest magnitude
            negative number because larger magnitude negative numbers are less than smaller magnitude
            negative numbers. For example, given the expression MIN( -1500, -50, 5, 150), the return value
            is -1500 and not 5. To determine the numeric value with the smallest magnitude you would
            use the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionAbs">ABS()</see> function on each argument. The
            following example would produce a minimum value of 5.</p>
            <code>MIN( ABS(-1500), ABS(-50), ABS(5), ABS(150))</code>
            <p class="body">When the argument list is empty, MIN() returns zero.</p>
            <seealso cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMax">MAX()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionMin.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMin.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMin.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMin.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMax">
            <summary>
            Gives you the largest numeric value out of a series. 
            </summary>
            <remarks>
            <p class="body">MAX(Value1, value2, ..., valueN)</p>
            <p class="body">Value1, value2, ... valueN are any number of numeric values or references to numeric
            values from which you want the maximum value found. Arguments may be numbers, boolean
            values, text values convertible into numbers, or empty. Error values and text values
            that are not convertible into numbers will produce an error.</p>
            <p class="body">When the argument list is empty, MAX() returns zero.</p>
            <seealso cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMin">MIN()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionMax.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMax.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMax.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMax.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionExp">
            <summary>
            Calculates the mathematical constant, e, raised to the specified power.
            </summary>
            <remarks>
            <p class="body">EXP(exponent)</p>
            <p class="body">Exponent is the power to which the base, e, is raised.
            This gives the function it's characteristic "exponential" growth.</p>
            <p class="body">Euler's Number, e, is the value 2.718281828459..., and
            is also the base of the natural logarithm. You can represent the constant
            e within your UltraCalc formula by specifying EXP(1). The exponential
            function (and natural logarithm) have many applications in mathematics,
            engineering, and for modeling behavioral and statistical distributions 
            commonly observed in nature and the social sciences.</p>
            <seealso cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionLn">LN()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionExp.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionExp.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionExp.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionExp.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionRound">
            <summary>
            Rounds the fractional portion of a numeric value up or down to produce an
            integer.
            </summary>
            <remarks>
            <p class="body">ROUND(value, number_of_digits)</p>
            <p class="body">Value is a numeric value or reference to a numeric value
            that you want to round up or down.</p>
            <p class="body">Number_of_digits specifies the precision at which rounding
            should occur. This will be the place value which UltraCalc examines to round
            up or down. By default, rounding occurs zero places right of the decimal point
            produces an integer.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionRound.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRound.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRound.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRound.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionPi">
            <summary>
            Returns the mathematical constant for the Greek letter, pi.
            </summary>
            <remarks>
            <p class="body">PI()</p>
            <p class="body">The mathematical constant pi represents the relationship
            between a circle's diameter and it's circumference. It is also the constant
            relating the square of a circle's radius with the surface area of the circle.
            It has a great many applications in mathematics, geometry, the sciences, and
            engineering.</p>
            <p class="body">The constant pi is a non-terminating decimal number, although
            UltraCalc approximates it to 15 significant digits of precision (3.14159265358979).</p>
            <p class="body">A common use of the PI function in UltraCalc is to convert
            a measurement in radians which is the form in which trigonometric functions
            take their arguments, and the more conventional degrees of arc. This conversion
            can be accomplished by multiplying the radian measurement by PI()/180. The
            following table describes some benchmarks for comparison between radians and
            degrees.</p>
            <table border="0">
            <thead>
            <th>Radians</th><th>Degrees</th><th>Turns of a wheel (common example)</th>
            </thead>
            <tbody>
            <tr><td>0</td><td>0</td><td>no turns</td></tr>
            <tr><td>PI/4</td><td>45</td><td>one-eighth turn</td></tr>
            <tr><td>PI/2</td><td>90</td><td>one-quarter turn</td></tr>
            <tr><td>PI</td><td>180</td><td>one-half turn</td></tr>
            <tr><td>2x PI</td><td>360</td><td>one complete turn</td></tr>
            <tr><td>3x PI</td><td>540</td><td>one and one-half turn</td></tr>
            </tbody>
            </table>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionPi.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPi.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPi.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPi.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionSqrt">
            <summary>
            Calculates the square root of a number.
            </summary>
            <remarks>
            <p class="body">SQRT(value)</p>
            <p class="body">Value is the numeric value or reference to a numeric
            value which you are calculating the square root of. Only real roots
            are supported, therefore if <em>value</em> is negative (which would
            produce an imaginary root) the SQRT() function will return an error
            value (#NUM!).</p>
            <p class="body">The square root is the number whose product, when
            the number is multiplied against itself (squared), is <em>value</em>.
            Note that it is possible to multiply two negative square roots to
            produce the same positive <em>value</em>. By convention, the SQRT()
            function only returns the positive root.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionSqrt.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSqrt.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSqrt.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSqrt.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionCos">
            <summary>
            Calculates the trigonometric cosine of a specified angle (measured in
            radians).
            </summary>
            <remarks>
            <p class="body">COS(value)</p>
            <p class="body">Value is the angle measured in radians for which you want
            to take the cosine. If your argument must be in degrees, multiply it by
            PI()/180 to convert it into radians.</p>
            <p class="body">The cosine is an sinusoidal function with a period of 2*PI()
            radians. It's value is always between 1 and -1. It behaves like the sine function,
            <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionSin">SIN()</see>, with a phase shift (phi) of -PI()/4
            radians.</p>
            <p class="body">The cosine function value derives from the geometric ratio
            between the length of the adjacent (non-hypotenuse) leg to the hypotenuse of
            a right triangle, when the hypotenuse has a length of one. It is continuous
            because at intervals of PI() radians the length of the adjacent leg and the
            hypotenuse are equal.</p>
            <p class="body">Another way of looking at this function is to imagine the
            hypotenuse is the radius, r, of a unit circle centered on a Cartesian plane
            with x- and y- axes.  At any point on the edge of the unit circle, the
            hypotenuse makes an angle, theta, with the x-axis.  The cosine function
            value of the angle theta is the distance from the center of the circle
            to the point in the direction of the x-axis.  Applied in this fashion,
            the COS() function can be used to convert between Cartesian and Polar
            coordinate systems.</p>
            <p class="body">Both interpretations are equivalent because if you drop
            a line from a point on the unit circle that intersects the x-axis at a
            right angle you form a right triangle.</p>
            <p class="body">These trigonometric concepts appear frequently in many
            engineering, architectural and scientific applications.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionCos.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCos.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCos.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCos.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionACos">
            <summary>
            Returns the angle (measured in radians) having the specified value of the trigonometric cosine function.
            </summary>
            <remarks>
            <p class="body">ACOS(value)</p>
            <p class="body">Value is the real number result of the cosine function taken of an angle you want
            to find. The legal values of the cosine function are from -1 to 1. An inverse cosine
            by default will return the normal angle from 0 up to PI. This is because there are
            several angles which may have an identical value of their cosine. For example, the
            angles -PI/2, PI/2, 3PI/2, etc., all have a cosine of zero. You can find alternate
            angles by adding (or subtracting) any multiple of PI radians to the normal angle
            returned by the inverse cosine function.</p>
            <p class="body">You can convert the result of the inverse cosine function from
            radians into degrees by multiplying it by 180/PI().</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionACos.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionACos.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionACos.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionACos.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionCosh">
            <summary>
            Returns the angle (measured in radians) having the specified value of it's hyperbolic cosine function.
            </summary>
            <remarks>
            <p class="body">ACOSH(value)</p>
            <p class="body">Value is the hyperbolic cosine of some angle (measured in radians) that you want
            to find. As you might expect, the values of the hyperbolic cosine function (see the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionCosh">COSH</see> function)
            increase at a hyperbolic rate, but one consequence is that these ever larger changes in the hyperbolic
            cosine will correspond to ever smaller changes in the angle. This relationship is intrinsic to many of
            the mathematical and engineering applications of the inverse hyperbolic cosine function, such as when
            resistance or strain builds up on a body increasingly as it is rotated (hysteresis).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionCosh.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCosh.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCosh.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCosh.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionSin">
            <summary>
            Calculates the trigonometric sine of a specified angle (measured in
            radians).
            </summary>
            <remarks>
            <p class="body">SIN(value)</p>
            <p class="body">Value is the angle measured in radians for which you want
            to take the cosine. If your argument must be in degrees, multiply it by
            PI()/180 to convert it into radians.</p>
            <p class="body">The sine is an sinusoidal function with a period of 2*PI()
            radians. It's value is always between 1 and -1.</p>
            <p class="body">The sine function value derives from the geometric ratio
            between the length of a right triangle's hypotenuse and the length of the
            opposite leg, when the hypotenuse has a length of one.  It is a continuous
            function because at intervals of PI() radians the length of the opposite
            leg and the hypotenuse are equal.</p>
            <p class="body">Another way of looking at this function is to imagine the
            hypotenuse is the radius, r, of a unit circle centered on a Cartesian plane
            with x- and y- axes.  At any point on the edge of the unit circle, the
            hypotenuse makes an angle, theta, with the x-axis.  The sine function
            value of the angle theta is the distance from the center of the circle
            to the point in the direction of the y-axis.  Applied in this fashion,
            the SIN() function can be used to convert between Cartesian and Polar
            coordinate systems.</p>
            <p class="body">Both interpretations are equivalent because if you drop a
            line from a point on the unit circle that intersects the y-axis at a right
            angle you form a right triangle.</p>
            <p class="body">These trigonometric concepts appear frequently in many
            engineering, architectural and scientific applications.</p>
            <seealso cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionCos">COS()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionSin.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSin.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSin.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSin.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionSinh">
            <summary>
            Calculates the hyperbolic sine of a specified angle measured in radians.
            </summary>
            <remarks>
            <p class="body">SINH(value)</p>
            <p class="body">Value is an angle measured in radians for which you want to
            calculate the hyperbolic sine. If your angle is measured in degrees, 
            multiply it by PI()/180 to convert into radians. </p>
            <p class="body">Many applications in mathematics and physics, for example
            determining the gravitational potential of a cylinder, make use of the
            hyperbolic sine function's characteristics.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionSinh.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSinh.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSinh.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSinh.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionASin">
            <summary>
            Returns the angle (measured in radians) having the specified value of the trigonometric sine function.
            </summary>
            <remarks>
            <p class="body">ASIN(value)</p>
            <p class="body">Value is the sine value of the angle you want. Legal sine values are
            confined to real numbers from -1 to 1, inclusive.</p>
            <p class="body">The angle returned will be between -PI()/2 and PI()/2 radians. To convert
            this angle into degrees, multiply by PI()/180.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionASin.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionASin.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionASin.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionASin.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionTan">
            <summary>
            Calculates the trigonometric tangent of a specified angle (measured in
            radians).
            </summary>
            <remarks>
            <p class="body">TAN(value)</p>
            <p class="body">Value is the angle measured in radians for which you want
            to take the tangent. If your argument must be in degrees, multiply it by
            PI()/180 to convert it into radians.</p>
            <p class="body">The tangent can have a value from -INF to +INF, however it
            is undefined at intervals of every PI()/2 radians +/- PI() radians.</p>
            <p class="body">The tangent function value derives from a well-known geometric
            ratio between the length of the opposite and the adjacent (non-hypotenuse) leg
            of a right triangle. All 3 angles inside of any triangle must add up to exactly
            PI() radians, and in a right triangle the angle opposite the hypotenuse must be
            PI()/2 radians. Given these facts, it is not possible for either of the other
            two angles within the triangle to reach PI()/2 radians themselves. If you choose
            an angle (other than the triangle's right angle) which approaches PI()/2 radians
            then the remaining angle must approach 0 radians. The tangent function value tells
            you in these circumstances how the leg of the right triangle opposite your angle
            approaches infinite length. These calculations have important applications in
            architecture and engineering.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionTan.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTan.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTan.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTan.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionTanh">
            <summary>
            Calculates the hyperbolic tangent of a specified angle measured in radians.
            </summary>
            <remarks>
            <p class="body">TANH(value)</p>
            <p class="body">Value is an angle measured in radians for which you want to
            calculate the hyperbolic tangent. If your angle is measured in degrees, 
            multiply it by PI()/180 to convert into radians. The hyperbolic tangent 
            has a range from -1 to 1.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionTanh.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTanh.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTanh.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTanh.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionATan">
            <summary>
            Calculates the normalized angle (measured in radians) which has the
            specified tangent function value.
            </summary>
            <remarks>
            <p class="body">ATAN(value)</p>
            <p class="body">Value is a number containing a tangent function value
            that you want to retrieve the angle of. This function returns an angle
            of between PI()/2 and -PI()/2. Although the tangent function is undefined
            for values of PI()/2 and -PI()/2, the return value of this function is
            rounded to these values if <em>Value</em> is +INF or -INF, respectively.</p>
            <p class="body">This function is sometimes referred to as the inverse
            tangent function or the arctangent.</p>
            <p class="body">The angle returned is the principal value, as
            there exist an uncountable number of alternative angles satisfying
            the requirement of having <em>Value</em> as their tangent function
            value, at regular intervals of +/- PI() to either side of this
            principal value.</p>
            <p class="body">If you require a result in degrees, multiply the
            arctangent by 180/PI().</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionATan.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionATan.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionATan.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionATan.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionATan2">
            <summary>
            Calculates the angle made with the x-axis on a Cartesian coordinate
            plane by the specified (x, y) coordinates.
            </summary>
            <remarks>
            <p class="body">ATAN2(x_ordinate, y_abscissa)</p>
            <p class="body">X_ordinate is a number representing the distance along
            the x-axis of a Cartesian point. It may also be thought of as the
            adjacent leg of a right triangle, where the right angle is made by
            dropping a perpendicular line from (<em>x_ordinate</em>, <em>y_abscissa</em>)
            to the point (<em>x_ordinate</em>, 0) on the x-axis.</p>
            <p class="body">Y_abscissa is a number representing the distance along
            the y-axis of a Cartesian point. It may also be thought of as the
            opposite leg of the right triangle constructed above.</p>
            <p class="body">This variation on the arctangent (or inverse tangent function)
            calculates for you the angle, theta, made with the x-axis when you extend a
            line segment from the origin at (0, 0) to your specified coordinates at
            (<em>x_ordinate</em>, <em>y_abscissa</em>). This line segment can also be
            seen to be the hypotenuse of a right triangle, or the radius of the circle
            on which the point, (<em>x_ordinate</em>, <em>y_abscissa</em>), sits on
            the edge.  This function is another way of looking at the trigonometric
            tangent function value that is useful in many UltraCalc applications
            because it affords you a more convenient parameterization for some tasks,
            such as converting from Cartesian to Polar coordinate systems.</p>
            <p class="body">The return value of this function is within the range of
            PI()/2 and -PI()/2 measured in radians. If you need to convert this value
            into degrees then multiply the result by 180/PI().</p>
            <seealso cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionATan">ATAN()</seealso>
            <seealso cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionTan">TAN()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionATan2.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionATan2.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionATan2.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionATan2.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionFloor">
            <summary>
            Calculates the next lesser whole number for a specified numeric
            value.
            </summary>
            <remarks>
            <p class="body">FLOOR(value)</p>
            <p class="body">Value is a real numeric value to be rounded down
            to the next lesser whole number (also called an integer). FLOOR()
            behaves differently from the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionInt">INT()</see>
            function because when <em>value</em> is negative, the "next lesser
            whole number" will be a number having greater magnitude (i.e., it
            becomes more negative.)</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionFloor.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFloor.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFloor.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFloor.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionCeiling">
            <summary>
            Returns the smallest whole number greater than or equal to the given number
            </summary>
            <remarks>
            <p class="body">
            CEILING(number)
            <p></p>
            Number   is the numeric value you want to round.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionCeiling.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCeiling.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCeiling.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCeiling.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionRand">
            <summary>
            Generates a pseudorandom number from zero up to (but not including) one.
            </summary>
            <remarks>
            <p class="body">RAND()</p>
            <p>The RAND() function will generate another pseudorandom number each time it
            is evaluated. It returns a fractional number on a unit basis, therefore
            you can use RAND() to produce numbers between 0 and <em>C</em> by multiplying
            the RAND() result by <em>C</em>. It follows that to produce a pseudorandom
            number between <em>A</em> and <em>B</em> you could translate the result by
            <em>A</em> like this:</p>
            <code>RAND() * ( [B] - [A] ) + [A]</code>
            <p class="body">The number generation of the RAND() function derives from the
            system clock, and therefore may not be entirely random. It should not be used
            for applications requiring cryptographically-strong randomness or uniform
            probability distributions.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionRand.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRand.IsAlwaysDirty">
            <summary>
            Indicates whether the results of the function is always dirty.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRand.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRand.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRand.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionLn">
            <summary>
            Calculates the natural logarithm of a specified numeric value.
            </summary>
            <remarks>
            <p class="body">LN(value)</p>
            <p class="body">Value is a real number to calculate the natural
            logarithm of. <em>Value</em> must be positive as the logarithm
            is undefined for negative values.</p>
            <p class="body">A natural logarithm is a special case of a logarithm
            having the base of Euler's Number, e (2.71828...). It is the inverse
            of the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionExp">EXP()</see> function.</p>
            <p class="body">Logarithms have many applications in mathematics,
            life and social sciences.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionLn.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLn.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLn.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLn.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionLog10">
            <summary>
            Calculates the logarithm (base 10) of a specified numeric value.
            </summary>
            <remarks>
            <p class="body">LOG10(value)</p>
            <p class="body">Value is a real number to calculate the decimal
            logarithm of. <em>Value</em> must be positive as the logarithm
            is undefined for negative values.</p>
            <p class="body">To specify your own base for a logarithm use the
            <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionLog">LOG()</see> function. To calculate
            the natural logarithm use the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionLn">LN()</see>
            function.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionLog10.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLog10.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLog10.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLog10.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionLog">
            <summary>
            Calculates a logarithm for a specified numeric value to the
            specified base.
            </summary>
            <remarks>
            <p class="body">LOG(value, base)</p>
            <p class="body">Value is a real number that you want to calculate the logarithm
            to <em>base</em> for. This number must be positive, as the logarithm
            is undefined for negative numbers.</p>
            <p class="body">Base is the base of the logarithm, which defaults to 10.</p>
            <p class="body">To calculate the natural logarithm (a logarithm to the base
            of Euler's Number, e) it is usually more convenient to call the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionLn">LN()</see>
            function.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionLog.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLog.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLog.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLog.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionNPV">
            <summary>
            Calculates an investment's Net Present Value given it's expected rate or return and the cash flow
            represented as positive numeric values (income) and negative numeric values (payments).
            </summary>
            <remarks>
            <p class="body">NPV(discountRate, value1, value2, ..., valueN)</p>
            <p class="body">DiscountRate is the investment's expected rate of return over the life of the
            investment, expressed as a percentage growth (or decline) per payment period. In some applications
            this may be the fixed interest rate. This numeric value is used to discount cash flows paid into or
            received from the investment.</p>
            <p class="body">Value1, value2, ... valueN are any number of numeric values representing cash inflows
            (as positive numbers) or cash outflows (as negative numbers). These cash flows must occur at a fixed
            period (the same period at which the <em>discountRate</em> is expressed), although some cash flows
            may be zero. The order of the sequence is important, as <em>value1</em> is assumed to occur (<em>N</em>-1)
            periods before <em>valueN</em> and will have been able to accrue that much more interest at the assumed
            <em>discountRate</em>.</p>
            <p class="body">By convention, the NPV() assumes cash flows occur at the end of each period. Consequently,
            the NPV() represents the present value as of the date one period's length before the first cash flow, 
            <em>value1</em>, has been made. If you require flexibility in when cash flows occur (the beginning or
            end of each period), consider using the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionPV">PV()</see> function. However,
            it differs from NPV() in that NPV() allows cash flows of different amounts.</p>
            <p class="body">Only numeric values or text values convertible to numeric values may be passed to this
            function. If a column or range reference is passed as a <em>value</em> argument, only numeric values or
            text values convertible to numeric values are used.</p>
            <seealso cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIRR">IRR()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionNPV.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNPV.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNPV.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNPV.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionFV">
            <summary>
            Calculates the future value of an annuity having fixed payments and assuming
            a fixed interest rate or rate of return.
            </summary>
            <remarks>
            <p class="body">FV(interestRate, nPeriod, payment, presentValue, paymentDue)</p>
            <p class="body">InterestRate is the assumed interest rate per period. The future
            value calculation assumes no change in the interest rate over the course of the
            investment. If you anticipate interest rate fluctuations, you should calculate
            the future value incrementally over shorter periods in which the interest rate
            is held constant. In some calculations, the <em>interestRate</em> may be
            synonymous with an investments' expected growth or rate of return per period.</p>
            <p class="body">NPeriod is the total number of payment periods in an annuity.
            Each payment is assumed to be of the same amount, and occur at regular fixed
            time intervals. A payment earlier in the annuity will be invested for a longer
            period of time and therefore would accrue more interest than a payment made
            later in the annuity.</p>
            <p class="body">Payment is a fixed amount invested in the annuity at each
            period. Use a negative number to represent an outflow of cash paid out, and a
            positive number to represent an inflow of cash received. Calculating a future
            value requires either a non-zero series of payments or a <em>presentValue</em>.</p>
            <p class="body">PresentValue is the value of the investment at the beginning of
            the annuity. It represents the discounted value of a series of future payments,
            which over time could be worth a greater amount because they have accrued interest.
            If the annuity has no present value, then you must specify a non-zero <em>payment</em>
            amount.</p>
            <p class="body">PaymentDue is a numeric value of either 1 or 0, and indicates whether
            payments are invested in the annuity at the beginning of each period (1) or at the end
            of each period (0).</p>
            <p class="body">The <em>interestRate</em> and <em>nPeriod</em> arguments determine the
            frequency of payments. If <em>interestRate</em> is given as an annual rate, and <em>nPeriod</em>
            is 1 then payments are once per year.  On the other hand, if <em>nPeriod</em> had been 4 then
            payments would occur quarterly. Please ensure you use consistent time values when specifying
            these arguments.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionFV.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFV.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFV.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFV.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionPV">
            <summary>
            Calculates an investment's present value by discounting what a series of fixed future payments is worth
            at a specified interest rate.
            </summary>
            <remarks>
            <p class="body">PV(interestRate, nPeriods, amount, futureValue, paymentDue)</p>
            <p class="body">InterestRate is the per-period rate of interest used to discount the future payments. For
            positive interest rates, the value of future payments diminishes (discounts) to what they are worth now.
            It is assumed you can reinvest the present value at <em>interestRate</em> to receive <em>futureValue</em>
            after <em>nPeriods</em>.</p>
            <p class="body">NPeriods are the total number of payment periods over the course of the annuity. If your
            retirement plan annuitizes in 35-years, and you make a fixed quarterly contribution into it, then you
            would use 35x4 or 140 as your total number of payment periods.</p>
            <p class="body">Amount is how much is paid (or received) each period. This <em>amount</em> must be constant
            over the course of the investment. If you need to calculate the Net Present Value of a series of variable
            payment amounts, then you should consider using the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionNPV">NPV()</see> function.</p>
            <p class="body">FutureValue is the expected cash balance of the investment at culmination. If this argument
            is omitted, it will be assumed to be zero. In the common usage scenario of calculating loan repayments, a
            future value of zero represents having a zero liability when the loan is fully repaid. When specifying a
            zero future value, ensure that <em>amount</em> is non-zero (otherwise the loan could never be repaid). In
            retirement planning, you would normally estimate the future value you would like to have when you retire.
            </p>
            <p class="body">PaymentDue is a numeric value of either 1 or 0, and indicates whether
            payments are invested in the annuity at the beginning of each period (1) or at the end
            of each period (0).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionPV.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPV.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPV.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPV.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionPmt">
            <summary>
            Calculates what the payment amount should be on a loan at a fixed interest rate requiring
            a fixed number of payments.
            </summary>
            <remarks>
            <p class="body">PMT(interestRate, nPeriods, presentValue, futureValue, paymentDue)</p>
            <p class="body">InterestRate is the interest rate for the loan.</p>
            <p class="body">NPeriods is the number of payments required to pay back the loan.</p>
            <p class="body">PresentValue is the current value of the loan (also called the principal),
            which is a lump sum that the future series of <em>nPeriods</em> payments (which accumulate
            interest at <em>interestRate</em>) is worth today.</p>
            <p class="body">FutureValue is the cash balance in the future (for a loan, this will typically
            be a loan liability balance of zero) following this series of fixed payments, accruing a fixed
            <em>interestRate</em>. If omitted, a default future value of 0 is used.</p>
            <p class="body">PaymentDue is a numeric value of either 1 or 0, and indicates whether
            payments are invested in the annuity at the beginning of each period (1) or at the end
            of each period (0).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionPmt.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPmt.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPmt.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPmt.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionNPer">
            <summary>
            Calculates an investment's number of payment periods when the payment frequency, amount,
            and interest rate are held steady.
            </summary>
            <remarks>
            <p class="body">NPER(interestRate, amount, presentValue, futureValue, paymentDue)</p>
            <p class="body">InterestRate is the rate of interest per payment period. This numeric
            value must be held fixed for the duration of the investment. If you must calculate
            financing based on changes in interest rate then you will need to break up the
            calculation into several stages over which the interest rate is held constant.</p>
            <p class="body">Amount is the payment amount due each period. This numeric value must
            be constant over the duration of the investment.</p>
            <p class="body">PresentValue is a discounted value or lump sum payment that if taken today
            and invested at the <em>interestRate</em> would be worth the same as this series of fixed
            payments in the future.</p>
            <p class="body">FutureValue is the value after the last payment has been made. If this
            numeric value is omitted it is assumed to be zero (since this function is normally used
            in calculating loan repayment you will reach zero liability when the loan is finally
            paid off.)</p>
            <p class="body">PaymentDue indicates whether payments come due at the beginning of each
            payment period (1) or at the end of each payment period (0). If left unspecified, the
            default is to assume <em>paymentDue</em> occurs at the end of each payment period.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionNPer.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNPer.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNPer.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNPer.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionEven">
            <summary>
            Rounds a positive number up and a negative number down to the nearest even integer.
            </summary>
            <remarks>
            <p class="body">
            EVEN(Number)
            <p></p>
            Number	is the value to round.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionEven.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionEven.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionEven.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionEven.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionOdd">
            <summary>
            Rounds a positive number up and a negative number down to the nearest odd integer.
            </summary>
            <remarks>
            <p class="body">
            ODD(Number)
            <p></p>
            Number is the value to round.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionOdd.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOdd.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOdd.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOdd.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionPPmt">
            <summary>
            Calculates the principal portion of a payment due on an investment or loan with periodic, fixed payments
            and having a fixed rate of interest.
            </summary>
            <remarks>
            <p class="body">PPMT(interestRate, periodNumber, nPeriods, presentValue, futureValue, paymentDue)</p>
            <p class="body">InterestRate is a fixed rate of interest per period. This function assumes there
            is one payment made on each period, therefore in cases where you want to calculate quarterly or
            monthly payments you should adjust an annual <em>interestRate</em> accordingly by dividing it 
            by the number of payments per year.</p>
            <p class="body">PeriodNumber identifies the period of the current payment, where the first payment
            has the number 1. The <em>periodNumber</em> must not exceed the total number of periods (<em>nPeriods</em>).</p>
            <p class="body">NPeriods is the total number of payments over the course of this investment or loan.</p>
            <p class="body">PresentValue is the discounted value of this series of future payments, if you could take
            a lump sum payment today and invest it at the fixed <em>interestRate</em> until the future date when this
            investment or loan had been repaid.</p>
            <p class="body">FutureValue is the expected value of this series of payments after the last payment has
            been made, where all previous payments have been accumulating interest at the fixed <em>interestRate</em>.
            When omitted, such as when this function is used for calculating loan payments that reduce an outstanding
            liability, the future value is assumed to be zero.</p>
            <p class="body">PaymentDue is a numeric value indicating that payments are due at the beginning of each period (1)
            or at the end of each period (0).</p>
            <p class="body">The PPMT() function calculates the portion of a fixed payment attributed to principal. If you
            need to calculate the portion of a fixed payment repaying interest then use the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIPmt">IPMT()</see>
            function. To calculate fixed payment amounts, use the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionPmt">PMT()</see> function.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionPPmt.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPPmt.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPPmt.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionPPmt.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIPmt">
            <summary>
            Calculates the interest portion of a payment due on an investment or loan with periodic, fixed payments
            and having a fixed rate of interest.
            </summary>
            <remarks>
            <p class="body">IPMT(interestRate, periodNumber, nPeriods, presentValue, futureValue, paymentDue)</p>
            <p class="body">InterestRate is a fixed rate of interest per period. This function assumes there
            is one payment made on each period, therefore in cases where you want to calculate quarterly or
            monthly payments you should adjust an annual <em>interestRate</em> accordingly by dividing it 
            by the number of payments per year.</p>
            <p class="body">PeriodNumber identifies the period of the current payment, where the first payment
            has the number 1. The <em>periodNumber</em> must not exceed the total number of periods (<em>nPeriods</em>).</p>
            <p class="body">NPeriods is the total number of payments over the course of this investment or loan.</p>
            <p class="body">PresentValue is the discounted value of this series of future payments, if you could take
            a lump sum payment today and invest it at the fixed <em>interestRate</em> until the future date when this
            investment or loan had been repaid.</p>
            <p class="body">FutureValue is the expected value of this series of payments after the last payment has
            been made, where all previous payments have been accumulating interest at the fixed <em>interestRate</em>.
            When omitted, such as when this function is used for calculating loan payments that reduce an outstanding
            liability, the future value is assumed to be zero.</p>
            <p class="body">PaymentDue is a numeric value indicating that payments are due at the beginning of each period (1)
            or at the end of each period (0).</p>
            <p class="body">The IPMT() function calculates the portion of a fixed payment attributed to interest. If you
            need to calculate the portion of a fixed payment repaying loan principal then use the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionPPmt">PPMT()</see>
            function. To calculate fixed payment amounts, use the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionPmt">PMT()</see> function.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIPmt.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIPmt.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIPmt.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIPmt.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionLower">
            <summary>
            Converts a text value to all lowercase letters.
            </summary>
            <remarks>
            <p class="body">LOWER(text_value)</p>
            <p class="body">Text_value is a piece of text you want converted into lowercase. The invariant
            culture is used to translate characters, therefore this function may not be suitable for use
            with localizable text values.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionLower.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLower.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLower.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLower.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionUpper">
            <summary>
            Converts all lowercase letters in a text string to uppercase.
            </summary>
            <remarks>
            <p class="body">UPPER(text_value)</p>
            <p class="body">Text_value is the text you want to convert to uppercase. UPPER does not change characters in text that are not letters.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionUpper.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionUpper.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionUpper.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionUpper.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionLeft">
            <summary>
            Gets the leftmost characters from a text value, up to the specified number of characters.
            </summary>
            <remarks>
            <p class="body">LEFT(text_value, num_chars)</p>
            <p class="body">Text_value is a piece of text or reference to some text starting with
            a substring you want to retrieve.</p>
            <p class="body">Num_chars indicate the number of characters retrieved from the beginning
            of <em>text_value</em>. An error value is returned if this argument is less than zero.
            If this argument exceeds the length of <em>text_value</em>, then all of <em>text_value</em>
            is retrieved. If omitted, the first character of <em>text_value</em> is retrieved.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionLeft.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLeft.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLeft.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLeft.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionRight">
            <summary>
            Gets the rightmost characters from a text value, up to the specified number of characters.
            </summary>
            <remarks>
            <p class="body">RIGHT(text_value, num_chars)</p>
            <p class="body">Text_value is a piece of text or reference to some text ending with
            a substring you want to retrieve.</p>
            <p class="body">Num_chars indicate the number of characters retrieved from the end
            of <em>text_value</em>. An error value is returned if this argument is less than zero.
            If this argument exceeds the length of <em>text_value</em>, then all of <em>text_value</em>
            is retrieved. If omitted, the last character of <em>text_value</em> is retrieved.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionRight.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRight.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRight.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRight.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMid">
            <summary>
            Gets a specified number of characters from the middle of a text string, starting from a specified position in that string.
            </summary>
            <remarks>
            <p class="body">MID(text_value, starting_point, character_count)</p>
            <p class="body">Text_value is a piece of text containing the substring you want to retrieve, when you know
            the position and length of your desired substring.</p>
            <p class="body">Character_count specifies how long of a substring to retrieve from <em>text_value</em>
            measured as a number of characters. If the requested length, when added to the specified <em>starting_point</em>,
            exceeds the length of <em>text_value</em> then the remainder of the string starting at <em>starting_point</em>
            is returned.</p>
            <p class="body">Starting_point is the one-based position within <em>text_value</em> of the first character
            in the substring you want to retrieve. If this argument exceeds the length of <em>text_value</em> then the
            function will return an empty string.</p>
            <p class="body">If either <em>character_count</em> or <em>starting_point</em> has a negative value, or
            evaluate to an error value, then the function returns an error value.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionMid.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMid.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMid.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMid.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionTrim">
            <summary>
            Removes any leading or trailing spaces from a text value, and normalizes runs of
            whitespace within a text value. 
            </summary>
            <remarks>
            <p class="body">TRIM(text_value)</p>
            <p class="body">Text_value is a piece of text to trim and normalize the white
            space of. Trimming removes all leading and trailing white space. Normalization
            reduces runs of consecutive whitespace appearing within the <em>text_value</em>
            to single blank spaces.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionTrim.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTrim.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTrim.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTrim.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionLen">
            <summary>
            Counts the number of characters in a text value.
            </summary>
            <remarks>
            <p class="body">LEN(text_value)</p>
            <p class="body">Text_value is any text string or reference to a text value
            for which you want a character count. The number of characters, including
            all whitespace, determines the length of the text string.</p>
            <p class="body">Depending on the character encoding used, some whitespace
            characters such as line-breaks may count as two characters (one character
            is a carriage return, the other character is a line feed).</p>
            <p class="body">An empty text string contains no characters.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionLen.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLen.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLen.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLen.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionValue">
            <summary>
            Retrieves the numeric value of a piece of text that is supposed to
            represent either a number or a currency.
            </summary>
            <remarks>
            <p class="body">VALUE(text_value)</p>
            <p class="body">Text_value is any text value or single-value reference to
            a text string that you want to convert into a number. It may have been
            formatted with a sign, currency symbol, or thousands separator. These
            characters will be stripped to yield the numeric value of the text.</p>
            <p class="body">If the <em>text_value</em> is an error value or could not
            be converted into a numeric value then the function returns an error value.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionValue.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the argument on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <remarks>
            <p class="body">Returns an error if the <b>UltraCalcValue</b> argument at the top of the number stack was an error.</p>
            <p class="body">Returns a value conversion into a double-precision numeric type if the incoming text can be interpreted as a numeric value (possibly after filtering off thousands separators, decimal separators, currency symbols, exponents and signs.)</p>
            <p class="body">Returns a numeric conversion from another numeric type if the incoming argument was not text (sometimes when the result of such a conversion is poorly defined this may defy an application's expectations, for example, a <b>DATEVALUE</b> may convert into a numeric value of ticks.)</p>
            </remarks>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionValue.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionValue.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionValue.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionFind">
            <summary>
            Finds one piece of text within another piece of text.
            </summary>
            <remarks>
            <p class="body">FIND(text_to_find, text_to_search, starting_point)</p>
            <p class="body">Text_to_find is the piece of text you want to find. It can
            be a reference (for example, a NamedReference to a constant text string or
            a CalcSettings reference to a TextBox on the form). It should be shorter in
            length than the <em>text_to_search</em>.</p>
            <p class="body">Text_to_search is the piece of text you want to search for
            <em>text_to_find</em> within. It's commonly a reference to a text string
            that you want to search.</p>
            <p class="body">Starting_point is the one-based character position inside of 
            <em>text_to_search</em> at which UltraCalc will begin searching. This argument
            is optional and if omitted, the search will begin at the first character.</p>
            <p class="body">If <em>text_to_find</em> is not found this function returns
            a Value error, otherwise it returns the starting position of <em>text_to_find</em>
            within <em>text_to_search</em>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionFind.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFind.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFind.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFind.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionReplace">
            <summary>
            Replaces a substring of a text value with some new text. This substring is specified by giving
            it's starting point and it's length in characters, within the original text value.
            </summary>
            <remarks>
            <p class="body">REPLACE(text_value, starting_point, character_count, new_text_value)</p>
            <p class="body">Text_value is the original text within which you want to replace some substring of text,
            and you already know the <em>starting_point</em> and <em>character_count</em> of that substring.</p>
            <p class="body">Starting_point is the one-based position within <em>text_value</em> where the replaced
            substring begins.</p>
            <p class="body">Character_count is the length of the substring being replaced as a count of the characters
            it contains. If this value when added to <em>starting_point</em> would exceed the length remaining in
            <em>text_value</em> then the entire remainder of <em>text_value</em> is replaced.</p>
            <p class="body">New_text_value is some new text that replaces the text of the specified substring. It is
            not required to be the same length as the replaced substring.</p>
            <p class="body">When <em>starting_point</em> or <em>character_count</em> are error values, or less than zero,
            an error value is returned. If <em>starting_point</em> exceeds the length of <em>text_value</em> then an error
            value is returned.</p>
            <p class="body">It is possible to use the REPLACE() function with other UltraCalc functions to express the
            replacement of one substring with another. The following UltraCalc expression replaces the word "Old" with
            the word "New" in the original text value.</p>
            <code>REPLACE("Hello Old World", FIND("Old"), LEN("Old"), "New")</code>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionReplace.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionReplace.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionReplace.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionReplace.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionSYD">
            <summary>
            Calculates depreciation of an asset using the sum of years' digits (SYD)
            calculation method.
            </summary>
            <remarks>
            <p class="body">SYD(assetCost, salvageValue, lifespan, periodNumber)</p>
            <p class="body">AssetCost is the initial value of the asset
            when it was purchased new. This numeric value needs to be
            greater than the <em>salvageValue</em> (otherwise the asset
            would be appreciating in value).</p>
            <p class="body">SalvageValue is the market price you can get
            for an asset at the end of it's useful life (<em>lifespan</em>
            periods). In some situations, this may represent the value of
            the asset's spare parts.</p>
            <p class="body">Lifespan is the useful life of the asset being
            depreciated measured in fixed-length time periods (usually years).
            The appropriate <em>lifespan</em> to use may vary with the kind
            of asset being depreciated. As the name of this function suggests,
            the <em>lifespan</em> when using this depreciation method is normally
            measured in years (although this does not necessarily have to be the
            case).</p>
            <p class="body">PeriodNumber is the one-based number of the period
            to calculate the depreciation of the asset for, having a value of
            between 1 and <em>lifespan</em>. It must be measured in the same
            units of time as the <em>lifespan</em>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionSYD.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSYD.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSYD.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSYD.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionSLN">
            <summary>
            Calculates what the straight-line depreciation
            of an asset should be per period.
            </summary>
            <remarks>
            <p class="body">SLN(assetCost, salvageValue, lifespan)</p>
            <p class="body">AssetCost is the initial value of the asset
            when it was purchased new. This numeric value needs to be
            greater than the <em>salvageValue</em> (otherwise the asset
            would be appreciating in value).</p>
            <p class="body">SalvageValue is the market price you can get
            for an asset at the end of it's useful life (<em>lifespan</em>
            periods). In some situations, this may represent the value of
            the asset's spare parts.</p>
            <p class="body">Lifespan is the useful life of the asset being
            depreciated measured in fixed-length time periods (usually years).
            The appropriate <em>lifespan</em> to use may vary with the kind
            of asset being depreciated.</p>
            <p class="body">Straight-line depreciation expresses an asset's
            depreciation at a constant rate per period. The asset is assumed
            to lose useful value no faster in the first period depreciation
            is calculated than in the last period. An accountant can advise
            you as to which assets the straight-line depreciation calculation
            method is suitable.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionSLN.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSLN.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSLN.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSLN.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDB">
            <summary>
            Calculates an asset's depreciation using the fixed declining balance (DB) method over a specified term.
            </summary>
            <remarks>
            <p class="body">DB(assetCost, salvageValue, lifespan, period, months)</p>
            <p class="body">AssetCost is the original cost or purchase price of the asset at the start of the
            calculation.</p>
            <p class="body">SalvageValue is the market value of the asset after it's expected useful life ends,
            sometimes this will be the value of the asset as spare parts.</p>
            <p class="body">Lifespan indicates for how many periods the asset is useful (it's useful life), and
            must be depreciated. Accounting standards vary on what <em>lifespan</em> is appropriate for different
            classes of assets, such as durable and non-durable goods.</p>
            <p class="body">Period indicates the number of units of time between decremental calculations of the
            depreciation. If <em>lifespan</em> is measured in years, then the value specified for the <em>period</em>
            must also be in years.</p>
            <p class="body">Months allows you to specify the number of months in the first year, if the depreciation
            does not begin on the first day of the year. You might specify <em>months</em> based on when the asset
            was purchased new. If omitted, the calculation defaults to 12 which is equivalent to calculating starting
            from the first day of the year.</p>
            <p class="body">For some assets, alternative calculation methods such as the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDDB">DDB()</see>
            function may be more appropriate. Your accountant can tell you for which assets the fixed declining
            balance method is an acceptable means of calculating depreciation.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDB.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDB.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDB.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDB.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDDB">
            <summary>
            Calculates an asset's depreciation using the double declining balance (DDB) or another weighted
            factor method over a specified term.
            </summary>
            <remarks>
            <p class="body">DDB(assetCost, salvageValue, lifespan, period, weight)</p>
            <p class="body">AssetCost is the original cost or purchase price of the asset at the start of the
            calculation.</p>
            <p class="body">SalvageValue is the market value of the asset after it's expected useful life ends,
            sometimes this will be the value of the asset as spare parts.</p>
            <p class="body">Lifespan indicates for how many periods the asset is useful (it's useful life), and
            must be depreciated. Accounting standards vary on what <em>lifespan</em> is appropriate for different
            classes of assets, such as durable and non-durable goods.</p>
            <p class="body">Period indicates the number of units of time between decremental calculations of the
            depreciation. If <em>lifespan</em> is measured in years, then the value specified for the <em>period</em>
            must also be in years.</p>
            <p class="body">Weight allows you to fine tune the calculation method. By default, the double declining
            balance method uses a factor of 2.</p>
            <p class="body">For some assets, alternative calculation methods such as the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDB">DB()</see>
            function may be more appropriate. Your accountant can advise you for which assets the double declining
            balance method is an acceptable means of calculating depreciation, and what factors can be used when
            depreciating certain assets such as high-tech equipment or motor vehicles which exhibit accelerated
            depreciation in their first years of use.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDDB.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDDB.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDDB.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDDB.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIntRate">
            <summary>
            Calculates the interest rate yielded by a security
            investment redeemable at a future date, such as a
            zero coupon bond.
            </summary>
            <remarks>
            <p class="body">INTRATE(settlementDate, maturityDate,
            amount, redemptionValue, basis)</p>
            <p class="body">SettlementDate is the date on which a
            security purchase is settled with the buyer taking
            possession of the security. Market conventions for
            settlement of trades vary by security and exchange.
            The settlement date may be substantially later than
            a security's issue date when it is traded on the
            secondary market.</p>
            <p class="body">MaturityDate is the date when the
            security can be redeemed. It ceases to accrue any
            further value after this date. The maturity date
            must be later than the <em>settlementDate</em> or
            an error value is returned.</p>
            <p class="body">Amount is the purchase price of the
            security. For positive interest, this amount will be
            smaller than the <em>redemptionValue</em> because it
            discounts interest that will be accrued over the time
            period the security is held.</p>
            <p class="body">RedemptionValue is the price a security
            holder may redeem their security for at the <em>maturityDate</em>.
            In some cases, this may be called the face value of the
            security.</p>
            <p class="body">Basis describes what accounting convention to
            use when counting days per calendar year, and days on which
            interest can accrue. If omitted, a basis consistent with
            United States National Association of Security Dealers (NASD)
            of 30/360 will be employed.</p>
            <table>
            <colgroup><col width="100px"/><col width="240px"/></colgroup>
            <tr><th>Basis</th><th>Day counting method</th></tr>
            <tr><td>0</td><td>30/360 (US NASD)</td></tr>
            <tr><td>1</td><td>Actual/actual</td></tr>
            <tr><td>2</td><td>Actual/360</td></tr>
            <tr><td>3</td><td>Actual/365</td></tr>
            <tr><td>4</td><td>30/360 (European)</td></tr>
            </table>
            <p class="body">Date values should be passed to this function using either the
            <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDate">DATE()</see> function or <strong>UltraCalcValue</strong>
            objects containing .NET <strong>DateTime</strong> values. Date values represented
            as text may not be interpreted as you had intended.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIntRate.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIntRate.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIntRate.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIntRate.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDateValue">
            <summary>
            Returns the .NET DateTime of the time represented by date formated in a string
            </summary>
            <remarks>
            <p class="body">
            DATEVALUE(date_text)
            <p></p>
            Date_text is text that represents a date in a .NET DateTime format
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDateValue.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDateValue.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDateValue.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDateValue.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDate">
            <summary>
            Returns the .NET DateTime ticks number that represents a particular date
            </summary>
            <remarks>
            <p class="body">
            DATE(year,month,day)
            <p></p>
            Year is the number representing the year 
            <p></p>
            Month is a number representing the month of the year
            <p></p>
            Day is a number representing the day of the month
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDate.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDate.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDate.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDate.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDays360">
            <summary>
            Returns the number of days between two dates based on a 360-day year (twelve 30-day months), which is used in some accounting calculations.
            </summary>
            <remarks>
            <p class="body">
            DAYS360(start_date,end_date,method)
            <p></p>
            Start_date and end_date are the two dates between which you want to know the number of days. 
            <p></p>
            If start_date occurs after end_date, DAYS360 returns a negative number. 
            Dates should be entered by using the DATE function, or as results of other formulas or functions. 
            For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.
            <p></p>
            Method is a logical value that specifies whether to use the U.S. or European method in the calculation:
            <p></p><t></t>
            FALSE or omitted U.S. (NASD) method. If the starting date is the 31st of a month, it becomes equal to the 30th of the same month. If the ending date is the 31st of a month and the starting date is earlier than the 30th of a month, the ending date becomes equal to the 1st of the next month; otherwise the ending date becomes equal to the 30th of the same month. 
            <p></p><t></t>
            TRUE European method. Starting dates and ending dates that occur on the 31st of a month become equal to the 30th of the same month. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDays360.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDays360.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDays360.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDays360.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDay">
            <summary>
            Returns the day of a date value
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDay.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDay.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDay.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDay.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMonth">
            <summary>
            Returns the month of a date value
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionMonth.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMonth.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMonth.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMonth.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionYear">
            <summary>
            Returns the year of a date value
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionYear.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionYear.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionYear.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionYear.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionHour">
            <summary>
            Returns the hour of a time value
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionHour.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHour.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHour.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHour.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMinute">
            <summary>
            Returns the minute of a time value
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionMinute.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMinute.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMinute.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMinute.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionSecond">
            <summary>
            Returns the second of a time value
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionSecond.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSecond.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSecond.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSecond.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionNow">
            <summary>
            Returns a .NET DateTime ticks value of the current day and time
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionNow.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNow.IsAlwaysDirty">
            <summary>
            Indicates whether the results of the function is always dirty.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNow.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNow.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNow.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionTimeValue">
            <summary>
            Returns the .Net DateTime of the time represented by time formated in a string
            </summary>
            <remarks>
            <p class="body">
            TIMEVALUE(time_text)
            <p></p>
            Time_text is text that represents a date in the .NET DateTime format
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionTimeValue.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTimeValue.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTimeValue.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTimeValue.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionTime">
            <summary>
            Returns the .NET DateTime ticks value that represents a particular time
            </summary>
            <remarks>
            <p class="body">
            TIME(hour,minute,second)
            <p></p>
            Hour is a number representing the time's hour
            <p></p>
            Minute is a number representing the time's minute
            <p></p>
            Second is a number representing the time's second
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionTime.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTime.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTime.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionTime.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMedian">
            <summary>
            Calculates the median value of a specified list of numeric values.
            </summary>
            <remarks>
            <p class="body">MEDIAN(Value1, value2, ..., valueN)</p>
            <p class="body">Value1, value2, ..., valueN are any number of numeric values or references to
            numeric values for which you want the median value found. If any argument is an error value,
            or there are no numeric values within the series of arguments, then MEDIAN() will return an
            error value.</p>
            <p class="body">The median is the middle value of the sorted list of numeric values (you do
            not need to sort <em>Value1</em>, <em>value2</em>, ..., <em>valueN</em> prior to passing them
            to the MEDIAN() function). When the list contains an odd number of values, the median will be
            the value at position CEIL(<em>N</em>/2). For example, the median of the 5-value list 0, 20,
            30, 50, 80, is the value in the third position: 30. When the list contains an even number of
            values, the median will be the average of the two values in the middle. For example, the
            median of the 4-value list 7, 20, 30, 45, is the average of the two middle elements (20 and
            30): 25. Note that the value of the MEDIAN() varies most from the arithmetic mean of the
            sorted list when the distribution of values tends to favor one side or the other of that
            arithemtic mean. For example, the arithmetic mean of the 5-value list 1, 2, 3, 21, 43 is
            14 but it's median value is 3.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionMedian.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMedian.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMedian.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMedian.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionVar">
            <summary>
            Calculates the estimated variance for a specified sampling of numeric values.
            </summary>
            <remarks>
            <p class="body">VAR(Value1, value2, ..., valueN)</p>
            <p class="body">Value1, value2, ..., valueN are any number of numeric values or
            references to numeric values you provide to specify a sampling of your larger
            data population. If any argument contains an error value or there arte no numeric
            values in the sampling, the VAR() function evaluates to the first error value it
            encounters.</p>
            <p class="body">Variance is a measure of statistical variability, and is used in
            statistical studies based on small samplings from much larger data populations to
            draw inferences about the variability of those data populations.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionVar.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionVar.CalculateVariance(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Estimates the variance based on a sample.
            </summary>
            <param name="numberStack">Number stack to evaluate</param>
            <param name="argumentCount">Number of arguments on the stack to use</param>
            <returns>A boolean indicating if the value was calculated</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionVar.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionVar.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionVar.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionStdev">
            <summary>
            Calculates an approximate standard deviation of a specified sampling of numeric
            values.
            </summary>
            <remarks>
            <p class="body">STDEV(Value1, value2, ..., valueN)</p>
            <p class="body">Value1, value2, ..., valueN are any number of numeric values or references
            to numeric values that you've given to provide a sample space of your data set. If any value
            contains an error, then the function evaluates to the first error encountered. An error value
            is returned if the sample space contains no numeric values.</p>
            <p class="body">The standard deviation is used in statistical studies to make inferences about
            a larger population of data based on sampling only a subset. For well chosen samplings, a small
            standard deviation indicates most data points tend to cluster within a narrow range of values.
            A larger standard deviations indicates greater variability in the data points, and that there
            is a higher likelihood for values to occur farther away and/or more frequently away from the
            expected norm.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionStdev.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionStdev.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionStdev.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionStdev.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionType">
            <summary>
            Returns the underlying UltraCalc data type for the specified value.
            </summary>
            <remarks>
            <p class="body">TYPE( value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> object or
            the result of evaluating an UltraCalc expression.</p>
            <p class="body">
            <table border="0">
            <colgroup><col width="160px"/><col width="160px"/></colgroup>
            <thead><th>UltraCalc data type:</th><th>TYPE function returns:</th></thead>
            <tbody>
            <tr><td>Number</td><td>1</td></tr>
            <tr><td>Text</td><td>2</td></tr>
            <tr><td>Boolean</td><td>4</td></tr>
            <tr><td>Error</td><td>16</td></tr>
            </tbody>
            </table>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionType.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionType.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionType.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionType.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionErrorType">
            <summary>
            When an error value is returned, the ERRORTYPE function returns a
            numeric value corresponding to the UltraCalcErrorCode enumeration.
            </summary>
            <remarks>
            <p class="body">ERRORTYPE(error_value)</p>
            <p class="body">Error_value is an UltraCalc error value resulting
            from the unsuccessful evaluation of an expression.</p>
            <p class="body">The ERRORTYPE function returns an error value of
            #N/A (Not Applicable) if you pass it an UltraCalc value that was
            not an error value.</p>
            <p class="body">
            <table border="0">
            <thead>
            <th>Error_value</th>
            <th>ERRORTYPE returns</th>
            </thead>
            <tbody>
            <tr><td>#NULL!</td><td>1</td></tr>
            <tr><td>#DIV/0!</td><td>2</td></tr>
            <tr><td>#VALUE!</td><td>3</td></tr>
            <tr><td>#REF!</td><td>4</td></tr>
            <tr><td>#NAME?</td><td>5</td></tr>
            <tr><td>#NUM!</td><td>6</td></tr>
            <tr><td>#N/A!</td><td>7</td></tr>
            </tbody>
            </table>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionErrorType.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionErrorType.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionErrorType.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionErrorType.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionNa">
            <summary>
            Returns #N/A!, the error value representing a not applicable result.
            </summary>
            <remarks>
            <p class="body">NA()</p>
            <p class="body">The NA function always returns the same constant
            error value.</p>
            <p class="body">You might use this function when you wanted an IF
            function or other complex UltraCalc expression to return the #N/A!
            error value.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionNa.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNa.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNa.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNa.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsBlank">
            <summary>
            Returns TRUE if the specified value is blank.
            </summary>
            <remarks>
            <p class="body">ISBLANK(value)</p>
            <p class="body">Value can be any constant, reference or the result of
            evaluating an UltraCalc expression.</p>
            <p class="body">The definition of what constitutes "blank" is anything
            that causes the <strong>IsNull</strong> method of the <strong>UltraCalcValue</strong>
            object containing the argument, value, to return TRUE. This may vary
            for different kinds of <strong>UltraCalcValue</strong> object.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIsBlank.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsBlank.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsBlank.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsBlank.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsErr">
            <summary>
            Returns TRUE if the specified value is any error value, except #N/A!
            </summary>
            <remarks>
            <p class="body">ISERR(value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> object (perhaps
            the result of evaluating an UltraCalc expression) thought to be an error
            value. The ISERR function will return FALSE when value is not an error
            value, or it is an error but the error value was not applicable.</p>
            <p class="body">This is a weaker variation of the more stringent
            <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsError">ISERROR</see> function.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIsErr.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsErr.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsErr.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsErr.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsError">
            <summary>
            Returns TRUE if the specified value is any error value without exception.
            </summary>
            <remarks>
            <p class="body">ISERROR(value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> object (perhaps
            the result of evaluating an UltraCalc expression) thought to be an error
            value. The ISERROR function will return FALSE only when value is not an
            error value.</p>
            <p class="body">A more relaxed variation of this function is the
            <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsErr">ISERR</see> function, which
            returns TRUE when an error value is not applicable. The ISERROR
            function treats this case as being an error. If you are using
            certain UltraCalc functions then sometimes error values of #N/A!
            should be treated by your application as non-errors and you
            should choose ISERR instead of ISERROR.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIsError.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsError.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsError.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsError.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsLogical">
            <summary>
            Returns TRUE if the specified value refers to a two-state logic
            or Boolean value.
            </summary>
            <remarks>
            <p class="body">ISLOGICAL(value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> object,
            or the result of evaluating an UltraCalc expression, which is thought
            to be a boolean value (TRUE or FALSE.) Boolean values are named in
            honor of George Boole, whose development of Boolean algebra governs
            the special characteristics of logical functions upon these two
            values.</p>
            <p class="body">Depending on the kind of value, it may not be convertible
            into a boolean value and therefore the ISLOGICAL function returns FALSE.
            The ISLOGICAL function only furnishes information about the compatibility
            of a value with the boolean-typed values evaluated by UltraCalc.</p>
            <p class="note">The ISLOGICAL function does not perform deductive reasoning.
            A return value of TRUE should not be interpreted as proof any value or UltraCalc
            expression passed to the ISLOGICAL function represents a logical outcome.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIsLogical.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsLogical.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsLogical.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsLogical.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNa">
            <summary>
            Returns TRUE if an error value is #N/A (not applicable.)
            </summary>
            <remarks>
            <p class="body">ISNA(value)</p>
            <p class="body">Value is an error value thought to be the error value
            returned when an error has happened, but the error code was not applicable.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNa.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNa.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNa.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNa.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNonText">
            <summary>
            Returns TRUE if the specified value refers to any not-text value.
            </summary>
            <remarks>
            <p class="body">ISNONTEXT( value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> object
            or the result of an UltraCalc expression evaluation that you want
            to test to determine whether it is a text value (such as a .NET
            <strong>String</strong> object) or a non-text value.</p>
            <seealso cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsText">ISTEXT function</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNonText.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNonText.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNonText.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNonText.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNumber">
            <summary>
            Returns TRUE if the specified value refers to a numeric value.
            </summary>
            <remarks>
            <p class="body">ISNUMBER( value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> or the
            result of evaluating an UltraCalc expression that you want to test
            to determine whether it is a number or not. A numeric value can be
            an integer, floating-point or decimal number.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNumber.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNumber.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNumber.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNumber.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsRef">
            <summary>
            Returns TRUE if the specified value is an UltraCalc reference.
            </summary>
            <remarks>
            <p class="body">ISREF( reference)</p>
            <p class="body">Reference is an <strong>UltraCalcValue</strong>
            object that contains a reference to some application-specific
            control, field, or piece of information. You can think of it as
            an address which the UltraCalc engine uses to look-up a value
            in your application when one is needed to evaluate an expression.
            </p>
            <p class="body">The ISREF function returns TRUE when the specified
            <strong>UltraCalcValue</strong> is a reference. Since it's value
            is defined by the contents at another referenced location, it's
            possible for this <strong>UltraCalcValue</strong> object to change
            in value based on changes in your application (outside of the
            UltraCalc engine.) Proper implementation of the <strong>IUltraCalcReference</strong>
            interface and <strong>NotifyValueChange</strong> methods will ensure the
            UltraCalc engine is made aware of any changes in a referenced value,
            and that all references depending on this value are refreshed.</p>
            <p class="body">Conversely, the ISREF function will return FALSE
            should the <strong>UltraCalcValue</strong> you supply represent
            a constant value or the temporary result of evaluating an UltraCalc
            expression (a constant value sitting at the top of the UltraCalc
            engine's number stack.)</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIsRef.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsRef.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsRef.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsRef.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsText">
            <summary>
            Returns TRUE if the specified value refers to a text (or string) value.
            </summary>
            <remarks>
            <p class="body">ISTEXT(value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> object or
            the result of evaluating an UltraCalc expression that you want to test
            to determine whether it is of a text (<em>e.g.</em>, string) value or
            a non-text value (which could be a numeric, boolean, or error value.)
            </p>
            <seealso cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNonText">ISNONTEXT function</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIsText.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsText.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsText.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsText.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsEven">
            <summary>
            Returns TRUE if the specified value is an even number.
            </summary>
            <remarks>
            <p class="body">ISEVEN(value)</p>
            <p class="body">Value is a number thought to be even (divisible by the
            integer 2.) A value that is not an integer will first be converted to
            an integer using the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionFloor">FLOOR</see>
            function before evaluation.</p>
            <seealso cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsOdd">ISODD function</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIsEven.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsEven.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsEven.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsEven.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsOdd">
            <summary>
            Returns TRUE if the specified value is an odd number.
            </summary>
            <remarks>
            <p class="body">ISODD(value)</p>
            <p class="body">Value is a number thought to be odd (not divisible by
            the integer 2.) A value that is not an integer will first be converted
            to an integer using the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionFloor">FLOOR</see>
            function before evaluation.</p>
            <seealso cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsEven">ISEVEN function</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIsOdd.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsOdd.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsOdd.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsOdd.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIRR">
            <summary>
            Calculates an internal rate of return for a given series of cash flows represented by either positive (incoming) or
            negative (outgoing) numeric values.
            </summary>
            <remarks>
            <p class="body">IRR(value_reference, estimate)</p>
            <p class="body">Value_reference must be a column or range reference of numeric values representing cash outflows
            (payments) as negative numeric values, and cash inflows (income) as positive numeric values. Each cash flow must
            occur with a regular period. If payments occur at irregular intervals, then you must represent the cash flow periods
            as taking place on a period common to all cash flows, and at intervals without a cash flow specify a zero value. 
            For example, if you finance the purchase of a television by taking a $300 loan with monthly payments of $110, but
            your payments do not start for three months, your series of cash flows would be monthly but would show three zero
            values for the months without payments (+300, 0, 0, 0, -110, -110, -110).</p>
            <p class="body">Estimate is an approximation close to what you expect the resulting internal rate of return to
            be. This function employs an iterative algorithm starting with this estimate and then repeatedly converging on
            a result that has a diminishing margin of error. If you do not provide an <em>estimate</em> then this function
            uses 10 percent as it's starting point.</p>
            <p class="body">If after twenty iterations the margin of error has not closed to within 1/1000 basis point then
            a #NUM error value will be returned.</p>
            <p class="body">The IRR() function has applications where you may be given a series of cash flows without an
            interest rate, such as in the retail financing example above, and wish to calculate what it's effective rate
            of interest would be. The internal rate is based on the period between cash flows, therefore when calculating
            payments that are not annual, you must annualize the internal rate.</p>
            <seealso cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionNPV">NPV()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIRR.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIRR.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIRR.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIRR.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionRate">
            <summary>
            Calculates the per-period interest rate for a series of cash flows (an annuity).
            </summary>
            <remarks>
            <p class="body">RATE(nPeriods, amount, presentValue, paymentDue, futureValue, estimate)</p>
            <p class="body">NPeriods are the total number of cash flows, whether a payment (negative <em>amount</em>)
            or a receipt (positive <em>amount</em>) occuring periodically with a fixed time period between each cash
            flow.</p>
            <p class="body">Amount is the amount of cash paid (negative) or received (positive). It must be held
            constant over the course of the annuity.</p>
            <p class="body">PresentValue is the value today of the series of future payments. Payments made in the
            future are discounted by the interest rate being calculated, because it is assumed that at that interest
            rate a smaller sum could be invested today and would grow to the <em>amount</em> at a future time when
            that payment became due.</p>
            <p class="body">PaymentDue indicates whether cash flows occur at the beginning of each period (1) or at
            the end of each period (0). If not specified, the payments at the end of each period is assumed.</p>
            <p class="body">FutureValue is the accumulated balance attained after <em>nPeriods</em> payments have
            been made and accrued interest at the calculated rate. If left unspecified, the default future value
            is assumed to be zero (this represents reaching zero loan liability, when a loan has been fully repaid).
            </p>
            <p class="body">Estimate is an approximation of the interest rate used to start the calculation (which
            works by iteratively refining the <em>estimate</em> until it converges on the correct value). When no
            <em>estimate</em> is given a default of 10% is assumed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionRate.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRate.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRate.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRate.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNull">
            <summary>
            Returns a boolean indicating if the value is null (Nothing in VB).
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNull.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNull.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNull.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsNull.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionNull">
            <summary>
            Returns a null value (Nothing in VB)
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionNull.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNull.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNull.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNull.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionIsDBNull">
            <summary>
            Returns a boolean indicating if the value is DBNull.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionIsDBNull.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsDBNull.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsDBNull.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionIsDBNull.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDBNull">
            <summary>
            Returns DBNull
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDBNull.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDBNull.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDBNull.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDBNull.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDateAdd">
            <summary>
            Returns a <see cref="T:System.DateTime"/> value resulting from adding a specified interval to a DateTime.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDateAdd.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDateAdd.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDateAdd.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDateAdd.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDateDiff">
            <summary>
            Returns a value specifying the number of time intervals between two DateTime values.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDateDiff.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDateDiff.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDateDiff.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDateDiff.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionChar">
            <summary>
            Returns the character specified by the code number from the character set for your computer.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionChar.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionChar.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionChar.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionChar.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionCode">
            <summary>
            Gives you the numeric code corresponding the the first character in a
            specific text string.
            </summary>
            <remarks>
            <p class="body">CODE(Text)</p>
            <p class="body">Text is a text string of at least one character in length.
            This function returns the numeric code of the first character in <em>Text</em>.
            These code values correspond to those used by your machine to encode the text
            characters in a string (<em>e.g.</em>, Unicode).</p>
            <p class="body">If <em>Text</em> is an empty string of zero length, then
            this function returns the code zero.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionCode.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCode.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCode.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCode.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionFixed">
            <summary>
            Formats a numeric value rounded to a specified number of decimal places and
            with optional thousands separators.
            </summary>
            <remarks>
            <p class="body">FIXED(value, decimal_places, exclude_thousands_separators)</p>
            <p class="body">Value is the numeric value to be rounded and formatted as text.</p>
            <p class="body">Decimal_places indicate how many places to the right of the decimal point
            the <em>value</em> should be rounded. If omitted, rounding occurs to two decimal places.</p>
            <p class="body">Exclude_thousands_separators is a boolean value (TRUE or FALSE) indicating
            whether commas should appear in the formatted text value. By default the formatted text
            includes commas as thousands separators.</p>
            <p class="body">This function may not return text values consistent with your locale's
            formatting of numbers because it operates using culture invariant settings (these include
            commas as thousands separators and decimal points) to facilitate unambiguously parsing the
            text values it formats into numeric values for subsequent calculations. Applications may
            instead choose to format numeric values after UltraCalc has finished processing them, but
            before presenting them to their end user.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionFixed.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFixed.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFixed.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFixed.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionToday">
            <summary>
            Gets the host's current date.
            </summary>
            <remarks>
            <p class="body">No arguments are passed to this function.</p>
            <p class="body">The date returned for TODAY() is based on the local time of the
            host running UltraCalc. In some distributed applications, such as those built for
            the Web, this may be different from today's date at the client.</p>
            <p class="body">The date/time value returned is always adjusted to Midnight 
            (00:00).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionToday.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionToday.IsAlwaysDirty">
            <summary>
            Indicates whether the results of the function is always dirty.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionToday.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionToday.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionToday.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionASinh">
            <summary>
            Returns the angle (measured in radians) having the specified value of it's hyperbolic sine function.
            </summary>
            <remarks>
            <p class="body">ASINH(value)</p>
            <p class="body">Value is the hyperbolic sine of some angle (measured in radians) that you want
            to find. As you might expect, the values of the hyperbolic sine function (see the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionSinh">SINH</see> function)
            increase at a hyperbolic rate, but one consequence is that these ever larger changes in the hyperbolic
            sine will correspond to ever smaller changes in the angle. This relationship is intrinsic to many of
            the mathematical and engineering applications of the inverse hyperbolic sine function, such as when
            resistance or strain builds up on a body increasingly as it is rotated (hysteresis).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionASinh.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function, Arcsinh, against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionASinh.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionASinh.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionASinh.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionATanh">
            <summary>
            Calculates the hyperbolic tangent of a specified angle measured in radians.
            </summary>
            <remarks>
            <p class="body">TANH(value)</p>
            <p class="body">Value is an angle measured in radians for which you want to
            calculate the hyperbolic tangent. If your angle is measured in degrees, 
            multiply it by PI()/180 to convert into radians. The hyperbolic tangent 
            has a range from -1 to 1.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionATanh.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function, Arctanh, against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionATanh.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionATanh.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionATanh.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionACosh">
            <summary>
            Returns the angle (measured in radians) having the specified value of it's hyperbolic cosine function.
            </summary>
            <remarks>
            <p class="body">ACOSH(value)</p>
            <p class="body">Value is the hyperbolic cosine of some angle (measured in radians) that you want
            to find. As you might expect, the values of the hyperbolic cosine function (see the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionCosh">COSH</see> function)
            increase at a hyperbolic rate, but one consequence is that these ever larger changes in the hyperbolic
            cosine will correspond to ever smaller changes in the angle. This relationship is intrinsic to many of
            the mathematical and engineering applications of the inverse hyperbolic cosine function, such as when
            resistance or strain builds up on a body increasingly as it is rotated (hysteresis).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionACosh.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function, Arccosh, against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionACosh.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionACosh.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionACosh.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionEDate">
            <summary>
            Returns a date that is the specified number of months before or after the start date.
            </summary>
            <remarks>
            <p class="body">
            DATE(date, numberOfMonths)
            <br/>
            Date is the starting date
            <br/>
            NumberOfMonths is a number of months to shift the date. A positive number means a date after the startdate. A negative number indicates a date prior to the start date.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionEDate.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionEDate.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionEDate.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionEDate.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionEOMonth">
            <summary>
            Returns a date that is at the end of the month which is the specified number of months before or after the start date.
            </summary>
            <remarks>
            <p class="body">
            EOMONTH(date, numberOfMonths)
            <br/>
            Date is the starting date
            <br/>
            NumberOfMonths is a number of months to shift the date. A positive number means a date after the startdate. A negative number indicates a date prior to the start date.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionEOMonth.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionEOMonth.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionEOMonth.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionEOMonth.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionWeekDay">
            <summary>
            Returns a number representing the day of the week of the specified date. 
            </summary>
            <remarks>
            <p class="body">
            WEEKDAY(date, returnType)
            <br/>
            Date is a date.
            <br/>
            ReturnType determines which numbering scheme is used for the days of the week.
            1 (default) = Sunday (1) through Saturday (7)
            2 = Monday (1) through Sunday (7)
            3 = Monday (0) through Sunday (6)
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionWeekDay.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionWeekDay.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionWeekDay.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionWeekDay.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionNetWorkDays">
            <summary>
            Returns the total number of whole work days between the specified dates, excluding any specified holidays.
            </summary>
            <remarks>    
            <p class="body">
            NETWORKDAYS(startDate, endDate [, holiday1, holiday2, ..., holidayN])
            <br/>
            StartDate is the date from which to start.
            <br/>
            EndDate is the date at which to end.
            <br/>
            Holiday1, holiday2, ..., holidayN is any number of dates or range references containing dates that are to be considered non-working days.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionNetWorkDays.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNetWorkDays.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNetWorkDays.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionNetWorkDays.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionWeekNum">
            <summary>
            Returns the number of the week into which the specified date falls. 
            </summary>
            <remarks>
            <p class="body">
            WEEKNUM(date, returnType)
            <br/>
            Date is a date.
            <br/>
            ReturnType determines which day begins the week.
            1 (default) = Sunday is the first day of the week.
            2 = Monday is the first day of the week.    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionWeekNum.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionWeekNum.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionWeekNum.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionWeekNum.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionWorkDay">
            <summary>
            Returns a work day the specified number of days from the specified date, excluding any specified holidays.
            </summary>
            <remarks>    
            <p class="body">
            WORKDAY(startDate, days [, holiday1, holiday2, ..., holidayN])
            <br/>
            StartDate is the date from which to start.
            <br/>
            Days is the number of work days to offset from the start date.
            <br/>
            Holiday1, holiday2, ..., holidayN is any number of dates or range references containing dates that are to be considered non-working days.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionWorkDay.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionWorkDay.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionWorkDay.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionWorkDay.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2XBase">
            <summary>
            Returns a string representing the specified decimal value in the specified base number scheme.
            </summary>
            <remarks>
            <p class="body">
            Dec2X(number, places)
            <br/>
            Number is the decimal value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2XBase.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2XBase.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2XBase.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2XBase.NumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2XBase.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2XBase.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Bin">
            <summary>
            Returns a string representing the specified decimal value as a binary number.
            </summary>
            <remarks>
            <p class="body">
            Dec2Bin(number, places)
            <br/>
            Number is the decimal value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Bin.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Bin.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Bin.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Bin.NumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Hex">
            <summary>
            Returns a string representing the specified decimal value as a hexadecimal number.
            </summary>
            <remarks>
            <p class="body">
            Dec2Hex(number, places)
            <br/>
            Number is the decimal value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Hex.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Hex.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Hex.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Hex.NumberSystem">
            <summary>
            The number system to convert to (2 = hexadecimal, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Oct">
            <summary>
            Returns a string representing the specified decimal value as a octal number.
            </summary>
            <remarks>
            <p class="body">
            Dec2Oct(number, places)
            <br/>
            Number is the decimal value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Oct.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Oct.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Oct.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDec2Oct.NumberSystem">
            <summary>
            The number system to convert to (2 = octal, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2Dec">
            <summary>
            Returns the decimal value of a string representation of a number in a non-decimal number system.
            </summary>
            <remarks>
            <p class="body">
            X2Dec(number)
            <br/>
            Number is a string represeting a number in a non-decimal number system.    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2Dec.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2Dec.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2Dec.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2Dec.NumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2Dec.MaxLength">
            <summary>
            The maximum length of the number string.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2Dec.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2Dec.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Dec">
            <summary>
            Returns the decimal value of a string representation of a number in a binary system.
            </summary>
            <remarks>
            <p class="body">
            Bin2Dec(number)
            <br/>
            Number is a string represeting a binary number.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Dec.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Dec.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Dec.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Dec.NumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Dec.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Dec">
            <summary>
            Returns the decimal value of a string representation of a number in a hexadecimal system.
            </summary>
            <remarks>
            <p class="body">
            Hex2Dec(number)
            <br/>
            Number is a string represeting a hexadecimal number.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Dec.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Dec.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Dec.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Dec.NumberSystem">
            <summary>
            The number system to convert to (2 = hexadecimal, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Dec.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Dec">
            <summary>
            Returns the decimal value of a string representation of a number in a octal system.
            </summary>
            <remarks>
            <p class="body">
            Oct2Dec(number)
            <br/>
            Number is a string represeting a octal number.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Dec.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Dec.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Dec.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Dec.NumberSystem">
            <summary>
            The number system to convert to (2 = octal, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Dec.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2XBase">
            <summary>
            Converts a string representing a number in a non-decimal number system to a number in another non-decimal number system.
            </summary>
            <remarks>
            <p class="body">
            XBase2XBase(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2XBase.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2XBase.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the original number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2XBase.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the original number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2XBase.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2XBase.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2XBase.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2XBase.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2XBase.MaxLength">
            <summary>
            The maximum length of the number string.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2XBase.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionXBase2XBase.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Oct">
            <summary>
            Converts a string representing a binary number  to a string representing the same number in the octal number system.
            </summary>
            <remarks>
            <p class="body">
            Bin2Oct(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Oct.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Oct.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Oct.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Oct.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Oct.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Oct.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Oct.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Oct.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Hex">
            <summary>
            Converts a string representing a binary number  to a string representing the same number in the hexadecimal number system.
            </summary>
            <remarks>
            <p class="body">
            Bin2Hex(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Hex.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Hex.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Hex.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Hex.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Hex.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Hex.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Hex.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionBin2Hex.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Bin">
            <summary>
            Converts a string representing an octal number to a string representing the same number in the binary number system.
            </summary>
            <remarks>
            <p class="body">
            Oct2Bin(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Bin.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Bin.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Bin.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Bin.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Bin.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Bin.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Bin.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Bin.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Hex">
            <summary>
            Converts a string representing an octal number to a string representing the same number in the hexadecimal number system.
            </summary>
            <remarks>
            <p class="body">
            Oct2Hex(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Hex.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Hex.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Hex.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Hex.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Hex.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Hex.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Hex.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionOct2Hex.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Bin">
            <summary>
            Converts a string representing an hexadecimal number to a string representing the same number in the binary number system.
            </summary>
            <remarks>
            <p class="body">
            Hex2Bin(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Bin.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Bin.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Bin.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Bin.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Bin.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Bin.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Bin.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Bin.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Oct">
            <summary>
            Converts a string representing an hexadecimal number to a string representing the same number in the octal number system.
            </summary>
            <remarks>
            <p class="body">
            Hex2Oct(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Oct.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Oct.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Oct.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Oct.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Oct.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Oct.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Oct.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionHex2Oct.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionConvert">
            <summary>
            Converts a value from one system of measurement to another. For example, meters to inches or hours to seconds.
            </summary>
            <remarks>
            <p class="body">CONVERT(number, fromUnit, toUnit)
            <br/>
            Number is the value to convert.
            <br/>
            FromUnit is the unit in which the number is given.
            <br/>
            ToUnit is the units to convert to.
            <br/>
            Weight and mass units:
            "g" = gram
            "sg" = slug
            "lbm" = pound mass (avoirdupois)
            "u" = U (atomic mass unit)
            "ozm" = Ounce mass (avoirdupois)
            <br/>
            Distance units:
            "m" = Meter
            "mi" = Statute mile
            "Nmi" = Nautical mile 
            "in" = Inch
            "ft" = Foot 
            "yd" = Yard
            "ang" = Angstrom
            "Pica" = Pica (1/72 in.)    
            <br/>
            Time units:
            "yr" = Year
            "day" = Day
            "hr" = Hour
            "mn" = Minute
            "sec" = Second
            <br/>
            Pressure units
            "Pa" (or "p") = Pascal
            "atm" (or "at") = Atmosphere
            "mmHg" = mm of Mercury
            <br/>
            Force units
            "N" = Newton
            "dyn" (or "dy") = Dyne
            "lbf" = Pound force
            <br/>
            Energy units:
            "J" = Joule
            "e" = Erg
            "c" = Thermodynamic calorie
            "cal" = IT calorie
            "eV" (or "ev") = Electron volt
            "HPh" (or "hh") = Horsepower-hour
            "Wh" (or "wh") = Watt-hour
            "flb" = Foot-pound
            "BTU" (or "btu") = BTU
            <br/>
            Power units:
            "HP" (or "h") = Horsepower
            "W" (or "w") = Watt
            <br/>
            Magentism units:
            "T" = Tesla
            "ga" = Gauss
            <br/>
            Temperature units:
            "C" (or "cel") = Degree Celsius
            "F" (or "fah") = Degree Fahrenheit
            "K" (or "kel") = Kelvin
            <br/>
            Liquid measure units:
            "tsp" = Teaspoon
            "tbs" = Tablespoon
            "oz" = Fluid ounce
            "cup" = Cup
            "pt" (or "us_pt") = U.S. pint
            "uk_pt" = U.K. pint
            "qt" = Quart
            "gal" = Gallon
            "l" (or "lt") = Liter
            <br/>
            Any metric ToUnit or FromUnit may be prefixed with one of the following:
            exa ("E") = 1E+18
            peta ("P") = 1E+15
            tera ("T") = 1E+12
            giga ("G") = 1E+09
            mega ("M") = 1E+06
            kilo ("k") = 1E+03
            hecto ("h") = 1E+02
            dekao ("e") = 1E+01
            deci ("d") = 1E-01
            centi ("c") = 1E-02
            milli ("m") = 1E-03
            micro ("u") = 1E-06
            nano ("n") = 1E-09
            pico ("p") = 1E-12
            femto ("f") = 1E-15
            atto ("a") = 1E-18
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionConvert.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionConvert.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionConvert.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionConvert.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDelta">
            <summary>
            Compares two numbers and returns 1 if they are equal or 0 if they are not. 
            </summary>
            <remarks>
            <p class="body">DELTA(number1, [number2])
            <br/>
            Number1 is a number.
            <br/>
            Number2 is a number. If Number2 is not specified, Number1 will be compared to 0.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDelta.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDelta.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDelta.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDelta.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionGeStep">
            <summary>
            Compares two numbers and returns 1 the first number is greater than or equal to the second or returns 0 if not.
            </summary>
            <remarks>
            <p class="body">GESTEP(number, [step])
            <br/>
            Number is a number.
            <br/>
            Step is a number. If step is not specified, Number will be compared to 0.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionGeStep.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionGeStep.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionGeStep.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionGeStep.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionComplex">
            <summary>
            Returns a complex number represented as a string in the format "x + yi" or "x + yj" by comining a real and imaginary number.
            </summary>
            <remarks>
            <p class="body">COMPLEX(realNumber, imaginaryNumber, [suffix])
            <br/>
            RealNumber is the real coefficient of the complex number.
            <br/>
            ImaginaryNumber is the imaginary coefficient of the number.
            <br/>
            Suffix specifies the suffix to use. The acceptable values are "i" or "j". If omitted, "i" is used. Note that the suffix is case-sensitive; upper case "I" and "J" are not allowed and will result in a #VALUE error.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionComplex.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionComplex.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionComplex.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionComplex.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImAbs">
            <summary>
            Returns the absolute value of a complex number.
            </summary>
            <remarks>
            <p class="body">IMABS(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImAbs.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImAbs.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImAbs.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImAbs.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImaginary">
            <summary>
            Returns the imaginary coefficient of a complex number.
            </summary>
            <remarks>
            <p class="body">IMAGINARY(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImaginary.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImaginary.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImaginary.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImaginary.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImArgument">
            <summary>
            Returns the argument theta, and angle expressed in radians.
            </summary>
            <remarks>
            <p class="body">IMARGUMENT(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImArgument.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImArgument.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImArgument.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImArgument.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImConjugate">
            <summary>
            Returns the conjugate of a complex number.
            </summary>
            <remarks>
            <p class="body">IMCONJUGATE(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImConjugate.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImConjugate.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImConjugate.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImConjugate.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImCos">
            <summary>
            Returns the cosine of a complex number.
            </summary>
            <remarks>
            <p class="body">IMCOS(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImCos.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImCos.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImCos.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImCos.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImDiv">
            <summary>
            Returns the quotient of two complex numbers.
            </summary>
            <remarks>
            <p class="body">IMDIV(dividend, divisor)
            <br/>
            Dividend is a complex number in the format: "x + yi" or "x + yj".
            <br/>
            Divisor is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImDiv.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImDiv.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImDiv.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImDiv.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImExp">
            <summary>
            Returns the exponential of a complex number.
            </summary>
            <remarks>
            <p class="body">IMEXP(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImExp.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImExp.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImExp.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImExp.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImLn">
            <summary>
            Returns the natural logarithm of a complex number.
            </summary>
            <remarks>
            <p class="body">IMLN(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImLn.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImLn.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImLn.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImLn.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImReal">
            <summary>
            Returns the real coefficient of a complex number.
            </summary>
            <remarks>
            <p class="body">IMREAL(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImReal.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImReal.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImReal.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImReal.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImSub">
            <summary>
            Returns the difference between two complex numbers.
            </summary>
            <remarks>
            <p class="body">IMSUB(complexNumber1, complexNumber2)
            <br/>
            ComplexNumber1 is a complex number in the format: "x + yi" or "x + yj" from which ComplexNumber2 will be subtracted.
            <br/>
            ComplexNumber2 is a complex number in the format: "x + yi" or "x + yj" which will be subtracted from ComplexNumber1.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImSub.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImSub.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImSub.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImSub.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImProduct">
            <summary>
            Returns the product of 1 to n complex numbers. 
            </summary>
            <remarks>
            <p class="body">IMPRODUCT(complexNumber1 [, complexNumber2, complexNumber3, ..., complexNumberN])
            <br/>    
            ComplexNumber1, ComplexNumber2, ..., ComplexNumberN is any number of complex numbers in the format: "x + yi" or "x + yj" which will be multiplied together.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImProduct.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImProduct.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImProduct.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImProduct.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImSum">
            <summary>
            Returns the sum of 1 to n complex numbers. 
            </summary>
            <remarks>
            <p class="body">IMSUM(complexNumber1 [, complexNumber2, complexNumber3, ..., complexNumberN])
            <br/>    
            ComplexNumber1, ComplexNumber2, ..., ComplexNumberN is any number of complex numbers in the format: "x + yi" or "x + yj" which will be added together.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImSum.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImSum.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImSum.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImSum.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImLog10">
            <summary>
            Returns the base-10 logarithm of a complex number.
            </summary>
            <remarks>
            <p class="body">IMLOG10(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImLog10.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImLog10.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImLog10.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImLog10.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImLog2">
            <summary>
            Returns the base-2 logarithm of a complex number.
            </summary>
            <remarks>
            <p class="body">IMLOG2(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImLog2.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImLog2.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImLog2.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImLog2.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImSin">
            <summary>
            Returns the sine of a complex number.
            </summary>
            <remarks>
            <p class="body">IMSIN(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImSin.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImSin.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImSin.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImSin.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImSqrt">
            <summary>
            Returns the square root of a complex number.
            </summary>
            <remarks>
            <p class="body">IMSQRT(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImSqrt.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImSqrt.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImSqrt.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImSqrt.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionImPower">
            <summary>
            Returns the complex number raised to the specified power. 
            </summary>
            <remarks>
            <p class="body">IMPOWER(complexNumber, power)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            <br/>
            Power is the power to which ComplexNumber will be raised. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionImPower.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImPower.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImPower.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionImPower.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDollarFr">
            <summary>
            Converts a dollary amount expressed as a decimal into a dollar amount expressed as a fraction. 
            </summary>
            <remarks>
            <p class="body">DollarFr(decimalDollarAmount, Fraction)
            <br/>
            DecimalDollarAmount is the dollar amount expressed as a decimal. 
            <br/>
            Fraction is the value used as the denominator of the fraction. If this value is not an integer, it will be truncated. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDollarFr.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDollarFr.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDollarFr.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDollarFr.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDollarDe">
            <summary>
            Converts a dollary amount expressed as a decimal into a dollar amount expressed as a fraction. 
            </summary>
            <remarks>
            <p class="body">DollarFr(decimalDollarAmount, Fraction)
            <br/>
            DecimalDollarAmount is the dollar amount expressed as a decimal. 
            <br/>
            Fraction is the value used as the denominator of the fraction. If this value is not an integer, it will be truncated. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDollarDe.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDollarDe.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDollarDe.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDollarDe.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionInfo">
            <summary>
            Returns information about the current operating environment. 
            </summary>
            <remarks>
            <p class="body">INFO(type)
            <br/>
            Type is a string indicating the type of information to return.
            <br/>
            "directory" = The full path to the current folder.
            "osversion" = The currently operating system version as a string. 
            "system" = The current operating system. This will always return "pcdos" which indicates Microsoft Windows. The corresponding function in Excel can also return "mac" for Macintosh, but since NetAdvantage is only supported in Windows, this function will always return "pcdos". 
            <br/>
            The following are supported by Microsoft Excel, but have no correlation in UltraCalcManager: "numfile", "origin", "recalc", "release".
            <br/>
            The following are supported in older versions of Excel, but not Office2007, and have no correlation in UltraCalcManager: "memavail", "memused", "totmem".
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionInfo.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionInfo.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionInfo.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionInfo.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionN">
            <summary>
            Converts a value to a number.
            </summary>
            <remarks>
            <p class="body">N(value)
            <br/>
            Value is the value to be converted to a number. The following are acceptable values:
            <br/>
            A number - returns the number.
            A date - returns the date.
            True - returns 1.
            False - returns 0.
            An error value - returns the error value. 
            Any other value - returns 0.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionN.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionN.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionN.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionN.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionFact">
            <summary>
            Returns the factorial of a number.
            </summary>
            <remarks>
            <p class="body">FACT(number)
            <br/>
            Number is a positive number for which the factorial will be calculated. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionFact.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFact.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFact.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFact.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionFactDouble">
            <summary>
            Returns the double factorial of a number.
            </summary>
            <remarks>
            <p class="body">FACTDOUBLE(number)
            <br/>
            Number is a positive number for which the double factorial will be calculated. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionFactDouble.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFactDouble.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFactDouble.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFactDouble.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionCombin">
            <summary>
            Returns the number of possible combinations given a set of items and a number of chosen items from that set.
            </summary>
            <remarks>
            <p class="body">Combin(number, numberChosen)
            <br/>
            Number is the number of items.    
            <br/>
            NumberChosen is the number of items chosen in each combination.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionCombin.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCombin.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCombin.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionCombin.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionDegrees">
            <summary>
            Converts radians to degrees.
            </summary>
            <remarks>
            <p class="body">DEGREES(radians)
            <br/>
            Radians is a value in radians which will be converted to degrees.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionDegrees.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDegrees.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDegrees.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionDegrees.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionRadians">
            <summary>
            Converts degrees to radians.
            </summary>
            <remarks>
            <p class="body">RADIANS(degrees)
            <br/>
            Degrees is a value in degrees which will be converted to radians.     
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionRadians.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRadians.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRadians.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRadians.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionGcd">
            <summary>
            Returns the greatest common divisor of integer values. 
            </summary>
            <remarks>
            <p class="body">GCD(number1, [number2, number3, ..., numberN])
            <br/>
            Number1, Number2, ..., NumberN is any number of integers. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionGcd.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionGcd.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionGcd.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionGcd.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionLcm">
            <summary>
            Returns the least common multiple of integer values.
            </summary>
            <remarks>
            <p class="body">LCM(number1, [number2, number3, ..., numberN])
            <br/>
            Number1, Number2, ..., NumberN is any number of integers. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionLcm.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLcm.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLcm.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionLcm.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMultinomial">
            <summary>
            Returns the multinomial of a set of numbers. 
            </summary>
            <remarks>
            <p class="body">MULTINOMIAL(number1, [number2, number3, ..., numberN])
            <br/>
            Number1, Number2, ..., NumberN is any number of numbers. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionMultinomial.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMultinomial.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMultinomial.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMultinomial.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionMRound">
            <summary>
            Rounds a number to the nearest multiple of another number.
            </summary>
            <remarks>
            <p class="body">MRound(number, multiple)
            <br/>
            Number is a number to be rounded.
            <br/>
            Multiple is a number indicating the multiple to which to round.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionMRound.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMRound.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMRound.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionMRound.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionRandBetween">
            <summary>
            Generates a pseudorandom integer between two specified numbers. 
            </summary>
            <remarks>
            <p class="body">RANDBETWEEN(bottom, top)
            <br/>
            Bottom is the minumum value that will be returned.
            <br/>
            Top is the maximum value that will be returned.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionRandBetween.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRandBetween.IsAlwaysDirty">
            <summary>
            Indicates whether the results of the function is always dirty.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRandBetween.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRandBetween.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRandBetween.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionRoman">
            <summary>
            Converts a number into a roman number as a string.
            </summary>
            <remarks>
            <p class="body">ROMAN(number, form)
            <br/>
            Number is the number to convert to roman numerals.
            <br/>
            Form is a number or boolean value indicating whether to use classic roman numerals or a more concise version. 
            <br/>
            0  = (Default) Classic. (499 = "CDXCIX")
            1  = More concise. (499 = "LDVLIV")
            2  = More concise. (499 = "XDIX")
            3  = More concise. (499 = "VDIV")
            4  = Simplified. (499 = "ID")
            TRUE  = Classic. 
            FALSE = Simplified. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionRoman.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRoman.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRoman.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRoman.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionRoundDown">
            <summary>
            Rounds a number to down to the specified number of digits. 
            </summary>
            <remarks>
            <p class="body">ROUNDDOWN(number, digits)
            <br/>
            Number is a number to be rounded down.
            <br/>
            Digits indicates the number of decimal places to round to. Positive numbers indicates places after the decimal point, negative numbers indicate places before the decimal point.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionRoundDown.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRoundDown.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRoundDown.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRoundDown.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionRoundUp">
            <summary>
            Rounds a number to up to the specified number of digits.
            </summary>
            <remarks>
            <p class="body">ROUNDUP(number, digits)
            <br/>
            Number is a number to be rounded up.
            <br/>
            Digits indicates the number of decimal places to round to. Positive numbers indicates places after the decimal point, negative numbers indicate places before the decimal point.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionRoundUp.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRoundUp.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRoundUp.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionRoundUp.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionSeriesSum">
            <summary>
            Returns the sum of a power series.
            </summary>
            <remarks>
            <p class="body">SERIESSUM(inputValue, initialPower, step, coefficient1 [, coefficient2, coefficient3, ..., coefficientN])
            <br/>
            InputValue is the input value to the power series. 
            <br/>
            InitialPower is the initial power to which X will be raised.
            <br/>
            Step is the step which will be used to increase N for each term in the series. 
            <br/>
            Coefficient1, Coefficient2, ..., CoefficientN is a set of coefficients by which each successive power of X is multiplied.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionSeriesSum.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSeriesSum.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSeriesSum.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSeriesSum.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionSign">
            <summary>
            Returns the sign of a number. (-1, 0, or 1)
            </summary>
            <remarks>
            <p class="body">SIGN(number)
            <br/>
            The number whose sign wil be returned. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionSign.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSign.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSign.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSign.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionSqrtPi">
            <summary>
            Returns the square root of the specified number times Pi.
            </summary>
            <remarks>
            <p class="body">SQRTPI(number)
            <br/>
            The number which will be multiplied by Pi.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionSqrtPi.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSqrtPi.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSqrtPi.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionSqrtPi.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionChoose">
            <summary>
            The CHOOSE function returns one of the values provided in its arguments based on the number in the first argument.
            </summary>
            <remarks>
            <p class="body">CHOOSE(index_num, value1, [value2, ..., valueN])
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionChoose.Evaluate(Infragistics.Win.CalcEngine.UltraCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionChoose.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionChoose.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionChoose.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcFunctionFactory">
            <summary>
            Class used to manage the stock and user defined <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> instances
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionFactory.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunctionFactory"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionFactory.Add(Infragistics.Win.CalcEngine.UltraCalcFunction)">
            <summary>
            Adds the specified function to the function list.
            </summary>
            <param name="function">Function to add</param>
            <returns>A boolean indicating if the function was added.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionFactory.AddLibrary(System.String)">
            <summary>
            Adds a library of user defined functions contained in an assembly specified by the given file path.
            </summary>
            <param name="pathAssembly">Path to assembly containing user defined functions</param>		
            <remarks>
            <p class="body">
            Once the assembly is loaded, any type that derives from <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> will be registered with the function factory
            </p>
            </remarks>        
            <returns>True if the function library was successfully loaded and its functions registered, else false</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionFactory.AddLibrary(System.Reflection.Assembly)">
            <summary>
            Adds a library of user defined functions contained in the given assembly.
            </summary>
            <param name="assembly">Loaded assembly containing a library of user defined functions</param>
            <remarks>
            <p class="body">
            Once the assembly is loaded, any type that derives from <b>UltraCalcFunction</b> will be registered with the function factory
            </p>
            </remarks>
            <returns>True if the function library was successfully loaded and its functions registered, else false</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionFactory.GetOperator(Infragistics.Win.CalcEngine.UltraCalcOperatorFunction)">
            <summary>
            Returns the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> for the specified operator enumeration
            </summary>
            <param name="operatorType">Operator whose function should be returned.</param>
            <returns>The <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> associated with the specified enumeration.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcFunctionFactory.SetOperator(Infragistics.Win.CalcEngine.UltraCalcOperatorFunction,Infragistics.Win.CalcEngine.UltraCalcFunction)">
            <summary>
            Replaces the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> for the specified operator enumeration with the specified function
            </summary>
            <param name="operatorType">Operator whose function should be returned.</param>
            <param name="function">Function used when compiling that operator.</param>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcFunctionFactory.Item(System.String)">
            <summary>
            Returns the function with the specified name
            </summary>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcNumberStack">
            <summary>
            Stack of <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/> instances used to evaluate formulas.  
            </summary>
            <remarks>
            <p class="body">
            The number stack is used by the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFormulaBase"/> class to evaluate formulas.  When formulas are compiled, the formula tokens are 
            placed in a collection in post-fix, or Reverse Polish Notation (RPN) format.  RPN format arranges the formula token list so each 
            sub-expressions's terms are placed before their operator, and sub-expressions are ordered to enforce correct operator precedence.
            This format allows the formula evaluate method to loop through the formula token collection front to back pushing an operator's terms onto 
            the number stack until an operator is reached.  Each time an operator is reached, it's subexpression is computed and resulting value pushed 
            onto the number stack.  Once the end of the end of the formula collection is reached, the formulas calculated value is at the top of the 
            number stack.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcNumberStack.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcNumberStack"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcNumberStack.Push(Infragistics.Win.CalcEngine.UltraCalcValue)">
            <summary>
            Push a value onto number stack.
            </summary>
            <param name="value">Value to push onto the number stack</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcNumberStack.Pop">
            <summary>
            Pop value off top of the number stack.
            </summary>
            <returns>UltraCalcValue that was at the top of the number stack.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcNumberStack.Peek">
            <summary>
            Return value off top of the number stack.
            </summary>
            <returns>UltraCalcValue that is at the top of the number stack.</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcNumberStack.Clear">
            <summary>
            Remove all values from number stack.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcNumberStack.Reset(System.Int32)">
            <summary>
            Clear elements off top of number stack until it contains given number of elements
            </summary>
            <param name="elements">Denotes the desired stack level</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcNumberStack.Count">
            <summary>
            Return the number of values on number stack
            </summary>
            <returns>Number of stack values</returns>
        </member>
        <member name="T:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection">
            <summary>
            Manages a collection of <see cref="T:Infragistics.Win.CalcEngine.IUltraCalcReference"/> objects
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection"/>
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.#ctor(Infragistics.Win.CalcEngine.UltraCalcReferenceCollection)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection"/> from another reference collection		
            </summary>
            <param name="copy">The original collection from which to copy.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.Merge(Infragistics.Win.CalcEngine.UltraCalcReferenceCollection)">
            <summary>
            Adds the contents of the specified <see cref="T:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection"/> into this instances collection.
            </summary>
            <param name="merge">Collection whose contents should be merged with this list.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.Add(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Add an <b>IUltraCalcReference> elements to the collection</b>
            </summary>
            <param name="reference">Element to add to collection</param>
            <returns>Ordinal Position within collection where element was inserted </returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.Insert(System.Int32,Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Insert an <b>IUltraCalcReference> elements to the collection</b>
            </summary>
            <param name="pos">Ordinal postion to insert reference</param>
            <param name="reference">Reference element to be inserted into collecction</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.Remove(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Remove <b>IUltraCalcReference</b> element from collection
            </summary>
            <param name="reference">Element to be removed from collection</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.RemoveAt(System.Int32)">
            <summary>
            Remove element at given postion from collection
            </summary>
            <param name="pos">Ordinal index denoting element to remove</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.IndexOf(Infragistics.Win.CalcEngine.IUltraCalcReference)">
            <summary>
            Return ordinal index of given element
            </summary>
            <param name="reference">Element whose position is desired</param>
            <returns>Ordinal index of reference</returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copys the collection to an array.
            </summary>
            <param name="array">Array used for the desitnation of the copy.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.GetEnumerator">
            <summary>
            Returns the collection enumerator.
            </summary>
            <returns>Collection enumerator.</returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.Item(System.Int32)">
            <summary>
            Indexer method that returns a <b>IUltraCalcReference</b> by position
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.IsSynchronized">
            <summary>
            Denotes whether the collection is thread-safe.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.Count">
            <summary>
            Returns a number of elements in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.UltraCalcReferenceCollection.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.#ctor(System.Int32,System.Single)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.Add(System.Object)">
            <summary>
            Adds the item to the set. If the item already exists in the set, does nothing.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.Remove(System.Object)">
            <summary>
            Removes the specified item from the set. If the item doesn't exist in the set
            does nothing.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.Exists(System.Object)">
            <summary>
            Returns true if the specified item exists in this set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.AddItems(Infragistics.Win.CalcEngine.HashSet)">
            <summary>
            Adds items from the specified set to this set.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.GetUnion(Infragistics.Win.CalcEngine.HashSet,Infragistics.Win.CalcEngine.HashSet)">
            <summary>
            Calculates the union of the specified sets.
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.GetIntersection(Infragistics.Win.CalcEngine.HashSet,Infragistics.Win.CalcEngine.HashSet)">
            <summary>
            Calculates the intersection of the specified sets.
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.DoesIntersect(Infragistics.Win.CalcEngine.HashSet)">
            <summary>
            Returns true of the specified set and this set intersect.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.IsSubsetOf(Infragistics.Win.CalcEngine.HashSet)">
            <summary>
            Returns true if this set is a subset of the specified set.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.Clear">
            <summary>
            Clears the set.
            </summary>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.GetEnumerator">
            <summary>
            Returns a new enumerator that enumerates all the elements of this set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of this set to the spcified array starting at the specified index in the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Infragistics.Win.CalcEngine.HashSet.ToArray(System.Type)">
            <summary>
            Returns an array containing all the elements of this set.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.HashSet.Count">
            <summary>
            Returns the number of items contained in the set.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.HashSet.IsEmpty">
            <summary>
            Returns true if the set is empty, that is it has no elements.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.HashSet.IsSynchronized">
            <summary>
            Indicates whether this data structure is synchronized.
            </summary>
        </member>
        <member name="P:Infragistics.Win.CalcEngine.HashSet.SyncRoot">
            <summary>
            Returns the object that can be used to synchronize the access to this data structure.
            </summary>
        </member>
        <member name="M:Infragistics.Shared.UltraLicenseAttribute.GetLicensedWithProducts">
            <summary>
            Return the list of products that this control can be licensed with
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.CalcSettings">
            <summary>
            Represents a control to the CalcManager component
            </summary>
            <remarks>
            <p class="body">The CalcSettings object defines properties that determine how the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> deal with a particular control.</p>
            <p class="body">In order for any control to be used in the Calculation Network, a CalcSettings must be created for that control. This can be done by creating a new CalcSettings and adding it to the network via the <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SetCalcSettings(System.Windows.Forms.Control,Infragistics.Win.UltraWinCalcManager.CalcSettings)"/> method or by calling <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.GetCalcSettings(System.Windows.Forms.Control)"/>, which will automatically get the existing CalcSetting for a control or create one if none exists.</p>	
            <p class="body">Always be certain to set the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.PropertyName"/> on the CalcSettings, to the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> knows which property of the control to use for calculations.</p>	
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcSettings.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> object with default property values.
            </summary>
            <remarks>
            <p class="body">You can create a new CalcSettings object and add it into the calculation network via the <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SetCalcSettings(System.Windows.Forms.Control,Infragistics.Win.UltraWinCalcManager.CalcSettings)"/> method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcSettings.#ctor(System.String,System.Object,System.String,System.String,Infragistics.Win.UltraWinCalcManager.CalcErrorIconAlignment)">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> object and initializes it with the specified property values.
            </summary>	
            <remarks>
            <p class="body">You can create a new CalcSettings object and add it into the calculation network via the <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SetCalcSettings(System.Windows.Forms.Control,Infragistics.Win.UltraWinCalcManager.CalcSettings)"/> method.</p>
            </remarks>
            <param name="alias">Specifies the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.Alias"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.</param>	
            <param name="errorIconAlignment">Specifies the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.ErrorIconAlignment"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.</param>
            <param name="errorValue">Specifies the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.ErrorValue"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.</param>
            <param name="formula">Specifies the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.Formula"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.</param>
            <param name="propertyName">Specifies the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.PropertyName"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcSettings.#ctor(System.String,System.Object,System.String,System.String,Infragistics.Win.UltraWinCalcManager.CalcErrorIconAlignment,System.Type)">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> object and initializes it with the specified property values.
            </summary>	
            <remarks>
            <p class="body">You can create a new CalcSettings object and add it into the calculation network via the <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SetCalcSettings(System.Windows.Forms.Control,Infragistics.Win.UltraWinCalcManager.CalcSettings)"/> method.</p>
            </remarks>
            <param name="alias">Specifies the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.Alias"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.</param>	
            <param name="errorIconAlignment">Specifies the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.ErrorIconAlignment"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.</param>
            <param name="errorValue">Specifies the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.ErrorValue"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.</param>
            <param name="formula">Specifies the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.Formula"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.</param>
            <param name="propertyName">Specifies the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.PropertyName"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.</param>
            <param name="treatAsType">Specifies the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.TreatAsType"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcSettings.ShouldSerialize">
            <summary>
            Returns whether the CalcSettings object should be serialized
            </summary>
            <returns>Returns true if any property of the CalcSettings differs from the default.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcSettings.Reset">
            <summary>
            Resets all CalcSettings properties to their defaults.
            </summary>
            <remarks>
            <p class="body">This method will reset all properties of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> to their default values.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcSettings.ToString">
            <summary>
            Converts the CalcSettings to a string
            </summary>
            <remarks>
            <p class="body">Returns a string containing the PropertyName and the Formula of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> object.</p>
            </remarks>
            <returns>A string representation of the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> object.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.Formula">
            <summary>
            The Formula which will be used to set the value of this object.
            </summary>
            <remarks>
            <p class="body">The Formula property will be used to calculate a value and that value will be set on a property of the control as indicated by the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.PropertyName"/> property. If <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.PropertyName"/> has not been set or is set to an invalid property, then no calculation will take place.</p>
            <p class="note">It is strongly recommended that any control with a formula be marked ReadOnly. A control that is the target of a formula calculation should not be edited by the user, because any user-edited value will be overwritten by the calculated value. Also, if a control is used as both the target and the source of a formula, then the source value will always use the calculated value and not the value displayed in the control after a user edit.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.PropertyName">
            <summary>
            Gets/sets which property of the control is used as either the source or target of any calculations involving the control.
            </summary>
            <remarks>
            <p class="body">PropertyName gets/sets the name of the property that is used as either the source or target (or both) of any calculations involving the control. If no PropertyName is set, or if the PropertyName is invalid, then the control will not participate in any calculations and a Reference Error may be generated.</p>
            <p class="body">In order for the CalcManager to properly use a control's proeprty as the source value in a calculation the property must follow the same guidelines as a Bindable property. That is, the control must expose the property publicly and also expose a PropertyChanged event. For Example, if The <b>Text</b> property is being used, then the control must also have a <b>TextChanged</b> event. If there is no such event, the calculation will not function correctly. This applies only to source properties. If the control is only being used at the target for the calculated value of a formula, the event is not required.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.Alias">
            <summary>
            Gets/sets the Alias name of the control
            </summary>
            <remarks>
            <p class="body">The Alias is use to identify a control in a formula by something other than it's Name. If no Alias has been set, then the control can be referred to by it's name in any calculation. If an Alias has been set, then the Alias must be used instead.</p>		
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.AliasResolved">
            <summary>
            Resolves the Alias of the control which is used to reference the control in any formulas. 
            </summary>
            <remarks>
            <p class="body">Returns the name of the control if no <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.Alias"/> has been set, or the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.Alias"/> if it has been set.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.ErrorIconAlignment">
            <summary>
            Gets/sets where to place the ErrorProvider icon when a Calculation or Reference error occurs on a formula.
            </summary>
            <remarks>
            <p class="body">When a Calculation or Reference error occurs during the evaluation of a formula, the UltraCalcManager will display an ErrorProvider Icon adjacent to the target control. ErrorIconAlignment determines the location of the icon. When set to <b>Default</b>, the <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ErrorIconAlignment"/> property will be used. To turn off displaying ErrorProvider icons on a cotrol, use the <b>None</b> value</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.ErrorIconAlignmentResolved">
            <summary>
            Gets the resolved ErrorIconAlignment for the control
            </summary>
            <remarks>
            <p class="body">When a Calculation or Reference error occurs during the evaluation of a formula, the UltraCalcManager will display an ErrorProvider Icon adjacent to the target control. ErrorIconAlignment determines the location of the icon. The resolve process will look at the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.ErrorIconAlignment"/> property first. If it is set to <b>Default</b> it will use the <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ErrorIconAlignment"/> setting. If that is also set to <b>Default</b>, <b>MiddleRight</b> will be used.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.ErrorValue">
            <summary>
            Gets/set what value to use when a Calculation or Reference error occurs.
            </summary>
            <remarks>
            <p class="body">If a Calculation or Reference Error occurs during a calculation, ErrorValue can be used to specify a default value to be used for display or saving. When an error occurs in a calculation, this value will be assigned to the appropriate property of the Context object. For example, in the case of a TextBox's Text property, the property itself will be set to the error value so that it both displays in the TextBox and is saved if the Text property is bound. In the case of an UltraGrid cell, this value will not be displayed, but will be saved to the underlying data source. Objects that do not display or bind, such as a NamedReference, will ignore the ErrorValue.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.FormulaResult">
            <summary>
            Gets the value which will be used as the source in any calculations involving the control
            </summary>
            <remarks>
            <p class="body">Value returns the current value that any calculations referencing the control will use. If the control is the target of a formula, then this will be the last calculated value.</p>
            <p class="note">Note that the value may be an UltraCalcValueError.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.TreatAsType">
            <summary>
            Gets or sets a Type to use for conversion purposes when the UltraCalcManager interprets the value from the Control.
            </summary>
            <remarks> 
            <p class="body">TreatAsType is useful if you are using values in a Calculation that are not neccessarily in the native type for the formula. For example, if a TextBox control's Text property is being used to enter a numeric value, the CalcManager will, by default, convert that contents of the TextBox to a Double using the Invariant Culture. This may not always be the desired effect. Setting TreatAsType to double in this example would convert the Text of the TextBox to a Double using the Current (instead of Invariant) Culture before passing the value on to the CalcManager.</p>
            <p class="body">Setting TreatAsType also allows the CalcManager to validate the data and display an error if it cannot be converted to the appropriate type. This means that if TreatAsType has been set and the property value of the control cannot be converted to the proper type, an ErrorIcon will be displayed. Without setting TreatAsType, only controls which are using the control as a source will be able to display an error.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.CalcSettingsConverter">
            <summary>
            Type converter for the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> class.
            </summary>
            <remarks>
            <p class="body">This is used to convert a <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> object to and from an InstanceDescriptor for the purposes of serialization / deserialization.</p>
            <p class="body">It also allows expanding the properties of the object in the PropertyGrid.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcSettingsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object to the given destination type using the context.
            </summary>
            <remarks></remarks>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>		
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>This method returns true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcSettingsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified object to the specified type.
            </summary>
            <param name="context">A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be null, so you should always check. Also, properties on the context object may also return null.</param>
            <param name="culture">An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.</param>
            <param name="destinationType">The type to convert the object to.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.PropertyNameUITypeEditor">
            <summary>
            UITypeEditor for the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.PropertyName"/> property of a <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.
            </summary>
            <remarks>
            <p class="body">This class is a UITypeEditor for the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.PropertyName"/> property of a <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>. The dropdown list of properties includes Bindable properties on the control.</p>
            </remarks>	
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.PropertyNameUITypeEditor.GetListItems(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object,System.Object@)">
            <summary>
            Get the items for the UITypeEditor list
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <param name="currentEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.PropertyNameUITypeEditor.ValidateEditItem(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object,System.Object)">
            <summary>
            Validates the currently selected edit item
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <param name="selectedEntry"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.ConvertibleTypeEditor">
            <summary>
            UITypedEditor used to display a list of types for the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.TreatAsType"/> property of a <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.
            </summary>
            <remarks>
            <p class="body">This class provides a dropdown list of types for the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.TreatAsType"/> property. This is not neccessarily a complete list of all possible types that are valid for the property, but it is a list of the most common types.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.ConvertibleTypeEditor.Types">
            <summary>
            Array of types the ui type editor should display in the drop down.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.DataGridViewColumnCalcSettings">
            <summary>
            Summary description for DataGridViewColumnCalcSettings.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.DataGridViewColumnCalcSettings.#ctor">
            <summary>
            DataGridViewColumnCalcSettings Constructor
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.DataGridViewColumnCalcSettings.#ctor(System.Object,System.String)">
            <summary>
            DataGridViewColumnCalcSettings Contstructor
            </summary>	
            <param name="errorValue">The value to use when a Calculation or Reference error occurs.</param>
            <param name="formula">The Formula which will be used to set the value of this object.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.DataGridViewColumnCalcSettings.ShouldSerialize">
            <summary>
            Returns whether the DataGridViewColumnCalcSettings object should be serialized
            </summary>
            <returns>Returns true if any property of the DataGridViewColumnCalcSettings differs from the default.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.DataGridViewColumnCalcSettings.Reset">
            <summary>
            Resets all DataGridViewColumnCalcSettings properties to their defaults.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.DataGridViewColumnCalcSettings.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current System.Object.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current System.Object.</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.DataGridViewColumnCalcSettings.Formula">
            <summary>
            The Formula which will be used to set the value of this object.
            </summary>
            <remarks>
            <p class="body">The Formula property will be used to calculate a value for the cells in this column.</p>
            <p class="note">It is strongly recommended that any column with a formula be marked ReadOnly. A column that is the target of a formula calculation should not be edited by the user, because any user-edited value will be overwritten by the calculated value. Also, if a column is used as both the target and the source of a formula, then the source value will always use the calculated value and not the value displayed in the column after a user edit.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.DataGridViewColumnCalcSettings.FormulaValueConverter">
            <summary>
            Interface for providing custom logic for converting formula results and the formula source values.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.DataGridViewColumnCalcSettings.ErrorValue">
            <summary>
            Gets/set what value to use when a Calculation or Reference error occurs.
            </summary>
            <remarks>
            <p class="body">If a Calculation or Reference Error occurs during a calculation, ErrorValue can be used to specify a default value to be used for display or saving. When an error occurs in a calculation, this value will be assigned to the appropriate property of the Context object. For example, in the case of a TextBox's Text property, the property itself will be set to the error value so that it both displays in the TextBox and is saved if the Text property is bound. In the case of an UltraGrid cell, this value will not be displayed, but will be saved to the underlying data source. Objects that do not display or bind, such as a NamedReference, will ignore the ErrorValue.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.DataGridViewCalcSettingsConverter">
            <summary>
            DataGridViewCalcSettingsConverter
            </summary>    
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.DataGridViewCalcSettingsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.DataGridViewCalcSettingsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the value parameter to.</param>
            <returns>An <see cref="T:System.Object"/> that represents the converted value.</returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
            <exception cref="T:System.ArgumentNullException">The destinationType parameter is null.</exception>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.ColumnReference.Formula">
            <summary>
            The <b>IUltraCalcFormula</b>, if any, associated with this Reference.  
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.CalcFrequency">
            <summary>
            Determines how frequently the calculations are done by the UltraCalcManager.
            </summary>
            <remarks>
            <p class="body">This enumeration is used by the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> component to determine when calculations are performed.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalcFrequency"/>
            <seealso cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.AsynchronousCalcDuration"/>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcFrequency.Asynchronous">
            <summary>
            Calculations will be performed on a timer. This frees the UI Thread, but means that calcuations may not always be current.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcFrequency.Synchronous">
            <summary>
            Calculations are performed every time a change notifiation is recieved. That is, every time a value involved in a calculation is changed, all dirtied calculations are recalculated and the UI thread is locked until all calculations are complete.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcFrequency.Manual">
            <summary>
            UltraCalcManager never performs any calculations until the <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ReCalc"/> method is explicitly invoked. 
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.CalcErrorIconAlignment">
            <summary>
            Determines if an ErrorIcon will be displayed for a control whose formula results in an error.
            </summary>
            <remarks>
            <p class="body">This enumeration is used by the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> object to determine the placement of the error icon relative to a control when a calculation error occurs.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcErrorIconAlignment.Default">
            <summary>
            Default
            </summary>
            <remarks><p class="body">When set to Default, an individual CalcSettings will walk up to use the setting of the UltraCalcManager. If the UltraCalcManager is also set to Default, then MiddleRight will be used.</p></remarks>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcErrorIconAlignment.None">
            <summary>
            Do not display an error icon. 
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcErrorIconAlignment.BottomLeft">
            <summary>
            Display an error icon at the Bottom Left of the control.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcErrorIconAlignment.BottomRight">
            <summary>
            Display an error icon at the Bottom Right of the control.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcErrorIconAlignment.MiddleLeft">
            <summary>
            Display an error icon at the Middle Left of the control.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcErrorIconAlignment.MiddleRight">
            <summary>
            Display an error icon at the Middle Right of the control.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcErrorIconAlignment.TopLeft">
            <summary>
            Display an error icon at the Top Left of the control.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcErrorIconAlignment.TopRight">
            <summary>
            Display an error icon at the Top Right of the control.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.PropertyIds">
            <summary>
            Unique identifier for each property.
            </summary>
            <remarks>
            <p class="body">This enumeration lists all of the possible properties of the objects in the UltraWinCalcManager namespace. These are used in the <see cref="E:Infragistics.Win.UltraComponentBase.PropertyChanged"/> event.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.Added">
            <summary>
            Item was added to the collection
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.Removed">
            <summary>
            Item was removed to the collection
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.Cleared">
            <summary>
            Collection was cleared
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.Formula">
            <summary>
            Formula Property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.Category">
            <summary>
            Category Property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.NamedReferences">
            <summary>
            NamedReferences Collection Property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.NamedReference">
            <summary>
            NamedReference Property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.PropertyName">
            <summary>
            PropertyName Property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.Alias">
            <summary>
            Alias Property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.ErrorValue">
            <summary>
            ErrorValue Property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.Key">
            <summary>
            Key Property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.ErrorIconAlignment">
            <summary>
            ErrorIconAlignment Property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.ErrorIcon">
            <summary>
            ErrorIcon Property
            </summary>		
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.CalcFrequency">
            <summary>
            CalcFrequency Property
            </summary>		
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.AsynchronousCalcDuration">
            <summary>
            AsynchronousCalcDuration Property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.AsynchronousCalcInterval">
            <summary>
            AsynchronousCalcInterval Property
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.PropertyIds.TreatAsType">
            <summary>
            TreatAsType Property
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds">
            <summary>
            Uniquely identifies each UltraCalcManager event.
            </summary>
            <remarks>
            <p class="body">This enumeration is used to specify an event when calling the <see cref="M:Infragistics.Win.UltraWinCalcManager.CalcManagerEventManager.SetEnabled(Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds,System.Boolean)"/> method.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds.CalculationsCompleted">
            <summary>
            Event id that identifies <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalculationsCompleted"/> event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds.FormulaSyntaxError">
            <summary>
            Event id that identifies <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaSyntaxError"/> event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds.FormulaReferenceError">
            <summary>
            Event id that identifies <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaReferenceError"/> event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds.FormulaCalculationError">
            <summary>
            Event id that identifies <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaCalculationError"/> event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds.FormulaCircularityError">
            <summary>
            Event id that identifies <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaCircularityError"/> event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds.ParseValue">
            <summary>
            Event id that identifies <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ParseValue"/> event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds.FormatValue">
            <summary>
            Event id that identifies <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormatValue"/> event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds.NamedReferenceResultChanged">
            <summary>
            Event id that identifies <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.NamedReferenceResultChanged"/> event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds.ValueDirtied">
            <summary>
            Event id that identifies <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ValueDirtied"/> event.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds.LastEventId">
            <summary>
            Keep the last event id used.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.CalcManagerEventGroups">
            <summary>
            Identifies groups of UltraCalcManager specific events.
            </summary>
            <remarks>
            <p class="body">This enumeration is used to specify a group of events when calling the <see cref="M:Infragistics.Win.UltraWinCalcManager.CalcManagerEventManager.SetEnabled(Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds,System.Boolean)"/> method.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcManagerEventGroups.AllEvents">
            <summary>
            All events 
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.CalcManagerEventGroups.ErrorEvents">
            <summary>
            FormulaSyntaxError, FormulaReferenceError, FormulaCalculationError and FormulaCircularityError events.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.ValueDirtiedAction">
            <summary>
            Indicates which type of action took place to dirty the Calculation Network
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.ValueDirtiedAction.ReferenceAdded">
            <summary>
            A reference was added to the Calc Network
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.ValueDirtiedAction.ReferenceRemoved">
            <summary>
            A reference was removed the Calc Network. Note that in this case the formula associated with the reference is also removed.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.ValueDirtiedAction.RowReferenceAdded">
            <summary>
            A row reference was added to the Calc Network. A row reference is differnet from a regular reference because it refer to an item in a collection such as an UltraGridRow.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.ValueDirtiedAction.RowReferenceRemoved">
            <summary>
            A row reference was removed the Calc Network. Note that in this case the formula associated with the reference is also removed. A row reference is differnet from a regular reference because it refer to an item in a collection such as an UltraGridRow.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.ValueDirtiedAction.RowsCollectionReferenceResynched">
            <summary>
            A rows collection reference was resynched.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.ValueDirtiedAction.RowsCollectionReferenceSorted">
            <summary>
            A rows collection reference was sorted.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.ValueDirtiedAction.RowsCollectionVisibilityChanged">
            <summary>
            The visibility of a row or rows in a rows collection has changed.
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.ValueDirtiedAction.FormulaAdded">
            <summary>
            A Formula was added to the Calc Network
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.ValueDirtiedAction.FormulaRemoved">
            <summary>
            A Formula was removed from the Calc Network
            </summary>
        </member>
        <member name="F:Infragistics.Win.UltraWinCalcManager.ValueDirtiedAction.ValueChanged">
            <summary>
            A Value in the Calc Network has changed
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.CalcManagerEventManager">
            <summary>
            Class for managing an <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>'s events. It maintains an
            enabled flag for each event as well as a nested 'in progress' 
            count and it exposes methods for firing each event.
            </summary>
            <remarks>
            <p class="body">For internal use only.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcManagerEventManager.#ctor(Infragistics.Win.UltraWinCalcManager.UltraCalcManager)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcManagerEventManager"/>.
            </summary>		
            <param name="ultraCalcManager">UltraCalcManager that this event manager will be asociated with.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcManagerEventManager.InProgress(Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds)">
            <summary>
            Returns true if the event is in progress (in progress count > 0).
            </summary>
            <param name="eventid">A CalcManagerEventIds value which indicates which event is being examined.</param>
            <remarks>
            <p class="body">Determines if the specified event is currently in progress.</p>
            </remarks>
            <returns>True if the event is currently in progress. False if it is not.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcManagerEventManager.IsEnabled(Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds)">
            <summary>
            Returns true if the event is enabled.
            </summary>
            <remarks>
            <p class="body">Returns whether a particular event is enabled.</p>
            </remarks>
            <param name="eventid">A <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds"/> value which indicates which event is being examined.</param>
            <returns>True if the event is currently enabled. False if it is not enabled.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcManagerEventManager.SetEnabled(Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds,System.Boolean)">
            <summary>
            Sets a specific event to enabled or disabled.
            </summary>
            <remarks>
            <p class="body">This method can be used to enable or disable the firing of a specific event.</p>
            <p class="body">Note that disabling an event does not prevent any internal processing by the component. It merely prevents the event handler from being called.</p>
            </remarks>
            <param name="enabled">A boolean indicating whether the event is to be enabled (true) or disabled (false).</param>
            <param name="eventid">A <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds"/> value which specifies the event to be enabled or disabled.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcManagerEventManager.IsEnabled(Infragistics.Win.UltraWinCalcManager.CalcManagerEventGroups)">
            <summary>
            Returns true if all events in the group are enabled.
            </summary>
            <remarks>
            <p class="body">Returns whether a group of events is enabled.</p>
            </remarks>
            <param name="group">A <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcManagerEventGroups"/> value which indicates which group of events being examined.</param>
            <returns>True if the event group is currently enabled. False if it is not enabled.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.CalcManagerEventManager.SetEnabled(Infragistics.Win.UltraWinCalcManager.CalcManagerEventGroups,System.Boolean)">
            <summary>
            Sets all events in the group to enabled or disabled.
            </summary>
            <remarks>
            <p class="body">This method can be used to enable or disable the firing of a group of events.</p>
            <p class="body">Note that disabling an event does not prevent any internal processing by the component. It merely prevents the event handler from being called.</p>
            </remarks>
            <param name="enabled">A boolean indicating whether the event group is to be enabled (true) or disabled (false).</param>
            <param name="group">A <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcManagerEventGroups"/> value which specifies the group of events to be enabled or disabled.</param>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.ValueDirtiedEventHandler">
            <summary>
            Delegate for <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ValueDirtied"/> event.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.FormulaCalculationErrorEventHandler">
            <summary>
            Delegate for Formula Error events of an IUltraCalcManager.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.FormulaSyntaxErrorEventHandler">
            <summary>
            Delegate for Formula Syntax Error event of an UltraCalcManager.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.FormulaCircularityErrorEventHandler">
            <summary>
            Delegate for FormulaCircularityError event of an UltraCalcManager.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.ParseValueEventHandler">
            <summary>
            Delegate for ParseValue event of an UltraCalcManager.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.FormatValueEventHandler">
            <summary>
            Delegate for FormatValue event of an UltraCalcManager.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.NamedReferenceResultChangedEventHandler">
            <summary>
            Delegate for NamedReferenceResultChanged event of an UltraCalcManager.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.ValueDirtiedEventArgs">
            <summary>
            Base class for event args that have an associated row.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.ValueDirtiedEventArgs.#ctor(System.Object,Infragistics.Win.UltraWinCalcManager.ValueDirtiedAction)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinCalcManager.ValueDirtiedEventArgs"/> object.
            </summary>
            <param name="context">Sets the <see cref="P:Infragistics.Win.UltraWinCalcManager.ValueDirtiedEventArgs.Context"/> property of the new <see cref="T:Infragistics.Win.UltraWinCalcManager.ValueDirtiedEventArgs"/>.</param>
            <param name="action">Sets the <see cref="P:Infragistics.Win.UltraWinCalcManager.ValueDirtiedEventArgs.Action"/> property of the new <see cref="T:Infragistics.Win.UltraWinCalcManager.ValueDirtiedEventArgs"/>.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.ValueDirtiedEventArgs.Context">
            <summary>
            Gets the Context.
            </summary>
            <remarks><p class="body">The <b>Context</b> indicates the object which was changed. This can be any object that particpates in the calculation network such an UltraGridCell, NamedReference, Control, etc.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.ValueDirtiedEventArgs.Action">
            <summary>
            Gets a the action which occurred.
            </summary>
            <remarks>
            <p class="body">The action indicates what type of change occurred. See the <see cref="T:Infragistics.Win.UltraWinCalcManager.ValueDirtiedAction"/> enumeration for the list of possible actions.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.FormulaSyntaxErrorEventArgs">
            <summary>
            Event args for <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaSyntaxError"/> event of an <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.FormulaSyntaxErrorEventArgs.#ctor(System.Object,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.UltraWinCalcManager.FormulaSyntaxErrorEventArgs"/> and sets properties to the specified values.
            </summary>
            <param name="context">Sets the <see cref="P:Infragistics.Win.CalcEngine.FormulaErrorEventArgsBase.Context"/> property of the new <see cref="T:Infragistics.Win.UltraWinCalcManager.FormulaSyntaxErrorEventArgs"/>.</param>
            <param name="displayErrorMessage">Sets the <see cref="P:Infragistics.Win.UltraWinCalcManager.FormulaSyntaxErrorEventArgs.DisplayErrorMessage"/> property of the new <see cref="T:Infragistics.Win.UltraWinCalcManager.FormulaSyntaxErrorEventArgs"/>.</param>
            <param name="errorDisplayText">Sets the <see cref="P:Infragistics.Win.CalcEngine.FormulaErrorEventArgsBase.ErrorDisplayText"/> property of the new <see cref="T:Infragistics.Win.UltraWinCalcManager.FormulaSyntaxErrorEventArgs"/>.</param>		
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.FormulaSyntaxErrorEventArgs.DisplayErrorMessage">
            <summary>
            Gets / set whether to display an error message to the user
            </summary>
            <remarks><p class="body">Gets / sets whether to display an error message to the user.</p></remarks>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.FormulaCircularityErrorEventArgs">
            <summary>
            Event args for <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaCircularityError"/> event of an <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.FormulaCircularityErrorEventArgs.#ctor(System.Object,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.UltraWinCalcManager.FormulaCircularityErrorEventArgs"/> and sets properties to the specified values.
            </summary>
            <param name="context">Sets the <see cref="P:Infragistics.Win.CalcEngine.FormulaErrorEventArgsBase.Context"/> property of the new <see cref="T:Infragistics.Win.UltraWinCalcManager.FormulaCircularityErrorEventArgs"/>.</param>
            <param name="errorDisplayText">Sets the <see cref="P:Infragistics.Win.CalcEngine.FormulaErrorEventArgsBase.ErrorDisplayText"/> property of the new <see cref="T:Infragistics.Win.UltraWinCalcManager.FormulaCircularityErrorEventArgs"/>.</param>
            <param name="displayErrorMessage">Sets the <see cref="P:Infragistics.Win.UltraWinCalcManager.FormulaCircularityErrorEventArgs.DisplayErrorMessage"/> property of the new <see cref="T:Infragistics.Win.UltraWinCalcManager.FormulaCircularityErrorEventArgs"/>.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.FormulaCircularityErrorEventArgs.DisplayErrorMessage">
            <summary>
            Gets / set whether to display an error message to the user
            </summary>
            <remarks><p class="body">Gets / sets whether to display an error message to the user.</p></remarks>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.ControlValueEventArgsBase">
            <summary>
            Base class for event args used in the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ParseValue"/> and <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormatValue"/> events. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.ControlValueEventArgsBase.#ctor(System.Windows.Forms.Control,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinCalcManager.ControlValueEventArgsBase"/>
            </summary>
            <param name="control">Control whose value is being parsed/formatted</param>
            <param name="originalValue">Original value</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.ControlValueEventArgsBase.Control">
            <summary>
            Gets the Control whose property is being read or written.
            </summary>
            <remarks>
            <p class="body">This property indicates the control whose value is being retrieved or set by the CalcManager.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.ControlValueEventArgsBase.Value">
            <summary>
            Gets/Sets the value which is being sent from the CalcManager to the control or the control to the CalcManager
            </summary>
            <remarks>
            <p class="body">In the case of the ParseValue event, Value will return the value read from the control. Changing the Value in this event will change how the CalcManager interprets the value. For example, in order to use a formatting number like "$5.00", it must be converted into a numeric value like "5.0".</p>
            <p class="body">In the case of the FormatValue event, Value will return the value from the Calcmanager that is about to be assigned to a property on the control. Changing the Value in this case will assign the newly changed value to the control instead. So this can be used to change the value, the datatype, or simply to format the value into a more user-friendly display.</p>
            </remarks>		
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.ParseValueEventArgs">
            <summary>
            Event args for the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ParseValue"/> event of an <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.ParseValueEventArgs.#ctor(System.Windows.Forms.Control,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinCalcManager.ParseValueEventArgs"/>
            </summary>
            <param name="control">Returns the control whose value is being parsed.</param>
            <param name="originalValue">The original value of the control. This value will be the value of whatever property of the control is specified by the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.PropertyName"/> property.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.ParseValueEventArgs.Handled">
            <summary>
            Gets / Sets whether the Parsing was handled.
            </summary>
            <remarks>
            <p class="body">Set Handled to True to indicate that a parsing was handled. This means that the TreatAsType property will be ignored for this conversion.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.FormatValueEventArgs">
            <summary>
            Event args for the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormatValue"/> event of an <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>. 
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.FormatValueEventArgs.#ctor(System.Windows.Forms.Control,System.Object,System.Type,Infragistics.Win.CalcEngine.UltraCalcValue)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinCalcManager.FormatValueEventArgs"/>
            </summary>
            <param name="control">Control whose value is being formatted</param>
            <param name="originalValue">Original value</param>
            <param name="desiredType">Destination type</param>
            <param name="CalcValue">Calculation value</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.FormatValueEventArgs.DesiredType">
            <summary>
            Gets the type expected by property of the control which is being set. 
            </summary>
            <remarks>
            <p class="body">The DesiredType indicates the <see cref="T:System.Type"/> that the control is expecting.</p>
            <p class="body">The <see cref="P:Infragistics.Win.UltraWinCalcManager.ControlValueEventArgsBase.Value"/> property should be assigned a value of this type.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.FormatValueEventArgs.CalcValue">
            <summary>
            Gets the IUltraCalcValue being used by the CalcManager to set the value of the control. 
            </summary>
            <remarks>
            <p class="body">CalcValue returns the UltraCalcValue being used by the CalcManager. This is provided so that the programmer can detect special situations like the occurance of a CalculationError.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.NamedReferenceResultChangedEventArgs">
            <summary>
            Event args for <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.NamedReferenceResultChanged"/> event of an <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReferenceResultChangedEventArgs.#ctor(Infragistics.Win.UltraWinCalcManager.NamedReference)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferenceResultChangedEventArgs"/>.
            </summary>
            <param name="namedReference">Sets the <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReferenceResultChangedEventArgs.NamedReference"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferenceResultChangedEventArgs"/> object.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReferenceResultChangedEventArgs.NamedReference">
            <summary>
            Gets the NamedReference whose Value was changed.
            </summary>	
            <remarks>
            <p class="body">This property returns the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> whose <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.FormulaResult"/>has changed.</p>
            </remarks>	
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.FormulaBuilder.IFormulaBuilderInfo">
            <summary>
            Provides information about the UltraCalcManager to the Designer.
            </summary>
            <remarks>
            <p class="body">This class is for internal infrastructure only and should not be used.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.FormulaBuilder.IFormulaBuilderInfo.GetReferenceTree">
            <summary>
            Returns a tree of ReferenceNodes which can be used for display in the Designer.
            </summary>
            <remarks>This property is for internal infrastrucure only and should not be used.</remarks>
            <returns>Returns an array of ReferenceNode object in a tree structure representing the references as they should appear in the designer.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.FormulaBuilder.IFormulaBuilderInfo.GetUltraCalcReference(Infragistics.Win.UltraWinCalcManager.NamedReference)">
            <summary>
            Returns the IUltraCalcReference associated with a <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> to the Designer.
            </summary>
            <remarks>This method is for internal infrastrucure only and should not be used.</remarks>
            <param name="namedReference">The <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> whose IUltraCalcReference will be returned.</param>
            <returns>An IUltraCalcReference associated with the specified <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.FormulaBuilder.IFormulaBuilderInfo.GetUltraCalcReference(Infragistics.Win.UltraWinCalcManager.CalcSettings)">
            <summary>
            Returns the IUltraCalcReference associated with a <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> to the Designer.
            </summary>
            <param name="calcSettings">The <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> whose IUltraCalcReference will be returned.</param>
            <remarks>This method is for internal infrastrucure only and should not be used.</remarks>
            <returns>An IUltraCalcReference associated with the specified <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/></returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.FormulaBuilder.IFormulaBuilderInfo.GetUniqueFunctionCategories">
            <summary>
            Returns a list of categories based on all known functions both built-in and user-defined.
            </summary>
            <remarks>This method is for internal infrastrucure only and should not be used.</remarks>
            <returns>An array of strings containing the names of the function categories</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.FormulaBuilder.IFormulaBuilderInfo.GetAllFunctions">
            <summary>
            Returns the UltraCalcFunctions for all categories
            </summary>
            <remarks>This method is for internal infrastrucure only and should not be used.</remarks>
            <returns>An array of <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> objects representing all functions in the calculation network."/&gt;</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.FormulaBuilder.IFormulaBuilderInfo.GetUnassignedFunctions">
            <summary>
            Returns the UltraCalcFunctions for unassigned functions (functions which have no category).
            </summary>
            <remarks>This method is for internal infrastrucure only and should not be used.</remarks>
            <returns>Retuns an array of <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> objects that are not assigned to any category.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.FormulaBuilder.IFormulaBuilderInfo.GetFunctions(System.String)">
            <summary>
            Returns the UltraCalcFunctions for the specified category
            </summary>
            <remarks>This method is for internal infrastrucure only and should not be used.</remarks>
            <returns>An array of <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> objects that belong to the specified category.</returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.NamedReference">
            <summary>
            Represents a calculated value with no associated control.
            </summary>
            <remarks>
            <p class="body">A NamedReference is a reference in the calculation network with no associated control.</p>
            <p class="body">By creating a NamedReference with a <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Formula"/>, you can create constants to be used in other calculations, or store the results of a calculation which may not need to be displayed on-screen, but can be used in code or in other calculations.</p>
            <p class="body">To get the calculated value of a NamedReference, use the <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.FormulaResult"/> property.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReference.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> with default property settings.
            </summary>
            <remarks>
            <p class="body">In order for a <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> to be part of the calculation network, it must be added to the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/> of the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReference.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> with the specified property settings.
            </summary>
            <param name="key">Sets the <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Key"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/>.</param>
            <remarks>
            <p class="body">In order for a <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> to be part of the calculation network, it must be added to the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/> of the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReference.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> with the specified property settings.
            </summary>
            <param name="key">Sets the <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Key"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/>.</param>
            <param name="formula">Sets the <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Formula"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/>.</param>
            <remarks>
            <p class="body">In order for a <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> to be part of the calculation network, it must be added to the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/> of the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReference.#ctor(System.String,System.String,System.String,System.Object)">
            <summary>
            Creates a new <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> with the specified property settings.
            </summary>
            <param name="key">Sets the <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Key"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/>.</param>
            <param name="formula">Sets the <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Formula"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/>.</param>
            <param name="category">Sets the <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Category"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/>.</param>
            <param name="tag">Sets the <see cref="P:Infragistics.Shared.SubObjectBase.Tag"/> property of the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/>.</param>
            <remarks>
            <p class="body">In order for a <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> to be part of the calculation network, it must be added to the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/> of the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReference.OnAddedToCollection(Infragistics.Shared.KeyedSubObjectsCollectionBase)">
            <summary>
            Occurs when the NamedReference is added to a NamedReferences collection
            </summary>
            <param name="primaryCollection">The parent collection to which the NamedReference is being added.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReference.OnRemovedFromCollection(Infragistics.Shared.KeyedSubObjectsCollectionBase)">
            <summary>
            Occurs when the NamedReference is removed from a NamedReferences collection
            </summary>
            <param name="primaryCollection">The parent collection from which the NamedReference is being removed.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReference.ToString">
            <summary>
            Converts the NamedReference to a string
            </summary>
            <returns>The Key and Formula of the NamedReference</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReference.Reset">
            <summary>
            Resets all NamedReference properties to their defaults
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReference.AbsoluteName">
            <summary>
            Returns the absolute name of the NamedReference that can be used in a formula. 
            </summary>
            <remarks>
            <para class="body">The absolute name may differ from the Key of the NamedReference in cases where there are special characters in the Key that need escapement.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Formula">
            <summary>
            The Formula which will be used to set the value of this object.
            </summary>
            <remarks>
            <p class="body">The Formula property will be used to calculate a value and that value will be returned by the <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.FormulaResult"/> property of the NamedReference. This calculated Value will be used any time the NamedReference is used in a calculation.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Category">
            <summary>
            Gets/Sets the category of the NamedReference
            </summary>
            <remarks>
            <p class="body">Category is used to organize NamedReferences into groups in the Formula designer.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReference.ParentCollection">
            <summary>
            Returns the NamedReferences collection this NamedReference is associated with. Typically the returned NamedReferences collection would contain this NamedReference.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReference.FormulaResult">
            <summary>
            Gets the value which will be used as the source in any calculations involving the NamedReference
            </summary>
            <remarks>
            <p class="body">Value returns the current value that any calculations referencing the NamedReference will use. If the NamedReference is the target of a formula, then this will be the last calculated value.</p>
            <p class="note">Note that the value may be an UltraCalcValueError.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Key">
            <summary>
            Get/Sets the unique key used to identify the NamedReference.
            </summary>
            <remarks>
            Us the Key to reference this NamedReference in a formula. When referencing a NamedReference from a sub-object of a control, the syntax is "[//key]" where <b>key</b> is the Key of the NamedReference. Note that all NamedReferences and CalcSettings are sibling of each other. So to reference a NamedReference from the formula of another NamedReference, the double slashes are not neccessary. So "[key]" is acceptable.
            </remarks>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.NamedReference.NamedReferenceConverter">
            <summary>
            Type converter or the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> class.
            </summary>
            <remarks>
            <p class="body">This is used to convert a <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> object to and from an InstanceDescriptor for the purposes of serialization / deserialization.</p>
            <p class="body">It also allows expanding the properties of the object in the PropertyGrid.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReference.NamedReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object to the given destination type using the context.
            </summary>
            <remarks></remarks>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>		
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>This method returns true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReference.NamedReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified object to the specified type.
            </summary>
            <param name="context">A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be null, so you should always check. Also, properties on the context object may also return null.</param>
            <param name="culture">An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.</param>
            <param name="destinationType">The type to convert the object to.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> objects in the calculation network.
            </summary>
            <remarks>
            <p class="body">Add <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> objects to the collection for use as constants or calculated values that have no associated control.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            handles certain property change events
            </summary>
            <param name="propChange"><see cref="T:Infragistics.Shared.PropChangeInfo"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.Add(System.String,System.String)">
            <summary>
            Adds a new <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> with the specified <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Key"/> and specified <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Formula"/>.
            </summary>
            <remarks>
            <p class="body">This method creates a new new <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> with the specified <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Key"/> and specified <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Formula"/>. The new <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> is then added to the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/> and returned.</p>
            </remarks>
            <param name="namedReferenceKey"><see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Key"/> of the new <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/>.</param>
            <param name="formula">The <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Formula"/> (or constant) to be referenced by this name.</param>
            <returns>Returns the new <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/>.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.Add(Infragistics.Win.UltraWinCalcManager.NamedReference)">
            <summary>
            Adds a <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> to the collection.
            </summary>
            <remarks>
            <p class="body">This method adds a <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> object into the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/> and return the index of the item in the collection.</p>
            </remarks>
            <param name="namedReference">The <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> to add.</param>
            <returns>Returns the index of the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> into the collection.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.Insert(System.Int32,Infragistics.Win.UltraWinCalcManager.NamedReference)">
            <summary>
            Inserts a new <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> at the specified index.
            </summary>
            <remarks>
            <p class="body">This method will insert a <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> into the collection at a specified index.</p>
            <p class="note">Note that the order of items in the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/> is completely irrelevant to the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>.</p>
            </remarks>
            <param name="namedReference">The <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> to insert.</param>
            <param name="index">The index at which to insert the item.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.Remove(System.String)">
            <summary>
            Removes the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> with the specified <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Key"/> from the collection.
            </summary>
            <remarks>
            <p class="body">This method removes the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> with the specified <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Key"/> from the collection. It is also removed from the calculation network.</p>
            <p class="body">If the specified <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> does not exist in the collection, this method will do nothing.</p>
            </remarks>
            <param name="namedReferenceKey">The <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Key"/> of the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> to be removed.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.Remove(Infragistics.Win.UltraWinCalcManager.NamedReference)">
            <summary>
            Removes the specified <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> from the collection.
            </summary>
            <remarks>
            <p class="body">This method removes the specified <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> from the collection. It is also removed from the calculation network.</p>
            <p class="body">If the specified <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> does not exist in the collection, this method will do nothing.</p>
            </remarks>
            <param name="namedReference">The <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> to be removed.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> at the specified location from the collection.
            </summary>
            <remarks>
            <p class="body">This method removes the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> at the specified index in the collection. The item is removed both from the collection and from the calculation network.</p>
            </remarks>
            <param name="index">The index of the item to be removed.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.Clear">
            <summary>
            Removes all the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> items from the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/>.
            </summary>
            <remarks>
            <p class="body">This method clears the collection, removing all of the items from the collection and from the calculation network.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.AddRange(System.Object[])">
            <summary>
            AddRange method for serialization and deserialization.
            </summary>
            <remarks>
            <p class="body">This method is intended for internal use only. It is used to add an array of <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> objects to the collection in one atomic operation for the purposes of deserialization.</p>
            </remarks>
            <param name="namedReferences">An array of <see cref="T:System.Object"/> objects containing <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> objects.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.InitialCapacity">
            <summary>
            Specifies the initial capacity of the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.IsReadOnly">
            <summary>
            Overridden. Always returns false since the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/> is not read-only.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.AllowDuplicateKeys">
            <summary>
            Overridden. Always returns false since the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/> collection does not allow having two <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> objects with the same <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Key"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.AllowEmptyKeys">
            <summary>
            Overridden. Always returns false since the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/> collection does not allow <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> objects with empty <see cref="P:Infragistics.Win.UltraWinCalcManager.NamedReference.Key"/> properties.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.CacheKeys">
            <summary>
            Determines whether to use a dictionary to store the keys and objects.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> with the specified key.
            </summary>		
            <param name="namedReferenceKey">The key of the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> in the collection.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> at the specified location in the collection.
            </summary>		
            <param name="index">The index into the collection.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.CalcManager">
            <summary>
            The <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> that the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/> collection belongs to.
            </summary>
            <remarks>
            <p class="body">This property returns the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> component that this <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/> belongs to.</p>
            </remarks>		
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.NamedReferencesCollectionEditor">
            <summary>
            Collection Editor for the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/>
            </summary>
            <remarks>
            <p class="body">This class provides a UITypeEditor for the <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection"/> which allows adding, remove, and editing <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> objects in the colletion through the property grid.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.NamedReferencesCollectionEditor.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.NamedReferencesCollectionEditor"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.NamedReferencesCollection.NamedReferencesCollectionEditor.DestroyInstance(System.Object)">
            <summary>
            Remove an item from the collection. 
            </summary>
            <param name="instance"></param>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.Resources">
            <summary>
            Exposes a <see cref="T:Infragistics.Shared.ResourceCustomizer"/> instance for this assembly. 
            </summary>
            <seealso cref="P:Infragistics.Win.UltraWinCalcManager.Resources.Customizer"/> 
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/> 
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.Resources.GetString(System.String,System.Object[])">
            <summary>
            Returns the resource string using the specified name and default culture.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
            <returns>The resource string using the specified resource name and default culture.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.Resources.GetString(System.String)">
            <summary>
            Returns the resource string using the specified resource name and default culture. The string is then formatted using the arguments specified.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <returns>The resource string using the specified resource name and default culture.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.Resources.GetObject(System.String)">
            <summary>
            Returns the resource object using the specified name.
            </summary>
            <param name="name">Name of the resource item</param>
            <returns>An object containing the specified resource</returns>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.Resources.Customizer">
            <summary>
            Returns the <see cref="T:Infragistics.Shared.ResourceCustomizer"/> for this assembly.
            </summary>
            <seealso cref="T:Infragistics.Shared.ResourceCustomizer"/> 
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager">
            <summary>
            A component for providing formula calculation functionality to controls.
            </summary>
            <remarks>
            <p class="body">The UltraCalcManager component creates a calculation network which can include controls (via <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> and <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/>. This allows you to set up formulas that will be calculated based on other values.</p>
            <p class="body">Each item in the network is called a reference. A reference can be a <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> object which represent a control, a <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> which is essentially a constant or calulcated value with no visual representation, or an object that represent part of a control, such as an UltraGridColumn. A reference may be the target of a formula or the source value used in a formula, or both.</p>	
            </remarks>		
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>
            </summary>		
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>
            </summary>
            <param name="container">An <see cref="T:System.ComponentModel.IContainer"/> that represents the container of the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/></param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the component and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ShouldSerializeNamedReferences">
            <summary>
            Indicates if the <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.NamedReferences"/> property needs to be serialized
            </summary>
            <returns>True if the <b>NamedReferences</b> collection contains any items</returns>
            <seealso cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.NamedReferences"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ResetNamedReferences">
            <summary>
            Clears the contents of the <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.NamedReferences"/> collection.
            </summary>
            <remarks>
            <p class="body">This methods clears the <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.NamedReferences"/> collection, removing all references both from the collection and the calculation network.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ShouldSerializeContainingControl">
            <summary>
            Returns true if the ContainingControl property should be serialized
            </summary>
            <returns>Returns true if this property is not set to its default value</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ShouldSerializeErrorIcon">
            <summary>
            Returns whether or not the ErrorIcon is set to the default.
            </summary>
            <returns>Returns false if the ErrorIcon is set to the default</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ResetErrorIcon">
            <summary>
            Resets the ErrorIcon property to the default error icon.
            </summary>
            <remarks>
            Resets the ErrorIcon property to the default error icon.
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SuspendCalc">
            <summary>
            Suspends calculations until <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ResumeCalc"/> is called.
            </summary>
            <remarks>
            <p class="body">Calling SuspendCalc will temporarily suspend any automatic calculations performed by the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> until a subsequent call to <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ResumeCalc"/> is made.</p>
            <p class="note">Note that the suspension refers to automatic calculations only. This means that calculations that would normally be performed on a timer when <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalcFrequency"/> is set to <b>Asynchronous</b> or on a change notification when the value of a control is dirtied when <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalcFrequency"/> is set to <b>Synchronous</b> will not be performed. Explicitly calling the <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ReCalc"/> method or the <see cref="M:Infragistics.Win.CalcEngine.IUltraCalcManager.EnsureCalculated(Infragistics.Win.CalcEngine.IUltraCalcReference,System.Boolean)"/> method will still force a calculation.</p>
            <p class="note">Note also that each time <b>SuspendCalc</b> is called, a counter is incremented. So the same number of <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ResumeCalc"/> calls must be made before calculations will resume.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ResumeCalc">
            <summary>
            Resumes automatic calculations after a preceding call to <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SuspendCalc"/>.
            </summary>
            <remarks>
            <p class="body">The ResumCalc method will resume automatic calculations after a preceding call to the <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SuspendCalc"/> method was made.</p>
            <p class="note">Note also that each time <b>SuspendCalc</b> is called, a counter is incremented. So the same number of <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ResumeCalc"/> calls must be made before calculations will resume. If the call to <b>ResumeCalc</b> results in the counter reaching 0, then calculations will resume immediately - the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> will not wait for a timer tick or change notification.</p>
            </remarks>
            <seealso cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SuspendCalc"/>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SuspendNotificationProcessing">
            <summary>
            Suspends notification processing.
            </summary>
            <remarks>
            <p class="body">This method is typically used when you are about to perform operations in
            UltraWinGrid that will cause a large number of calculation-related notifications to be raised.
            Sometimes processing a large number of notifications can take a very long time. This method
            can be used to suspend such processing of notifications. <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ResumeNotificationProcessing(System.Boolean)"/>
            must be called to resume the processing of notifications. Since not processing notifications
            can cause the calc manager to not enque formulas that need to be recalculated, you should call
            <b>ResumeNotificationProcessing</b> with <b>dirtyAllFormulas</b> parameter set to true to
            recalculate all the formulas.</p>
            <seealso cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ResumeNotificationProcessing(System.Boolean)"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ResumeNotificationProcessing(System.Boolean)">
            <summary>
            Resumes notification processing after a preceding call to <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SuspendNotificationProcessing"/>.
            </summary>
            <param name="dirtyAllFormulas">Specify true to dirty all formulas so they will all be recalculated.</param>
            <remarks>
            <seealso cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SuspendNotificationProcessing"/>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.DirtyAllFormulas">
            <summary>
            Dirties all the formulas so they get recalculated.
            </summary>
            <remarks>
            <p class="body">This method will cause the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> to mark all existing formulas as dirty. This means that the next time a calculation operation is performed, all formula will be recalculated. When the calculation occurs depends on the <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalcFrequency"/> property.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ReCalc">
            <summary>
            Forces recalculation of all dirtied items in the Calcultion Network.
            </summary>
            <remarks>
            <p class="body">The ReCalc method forces the synchronous recalculation of all formulas in the calculation network.</p> 
            <p class="body">When the <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalcFrequency"/> property is set to Manual, no calculations are performed unless this method or the <see cref="M:Infragistics.Win.CalcEngine.IUltraCalcManager.EnsureCalculated(Infragistics.Win.CalcEngine.IUltraCalcReference,System.Boolean)"/> method is called.</p>
            <p class="body">When the <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalcFrequency"/> property is set to Asynchronous, this method can be called to force all calculations to be completed synchronously, so that calculated values can be depended upon to be correct. It is generally more efficient to use the <see cref="M:Infragistics.Win.CalcEngine.IUltraCalcManager.EnsureCalculated(Infragistics.Win.CalcEngine.IUltraCalcReference,System.Boolean)"/> method in this case, since it ensures the calculation of a single reference as opposed to all references in the calculation network.</p>
            <p class="body">When the <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalcFrequency"/> property is set to Synchronous, this method is usually not neccessary, unless a control in the calculation network that is being used as the source of a calcatulion does not have a event for the property being used as its <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.PropertyName"/> In this case, it is generally more efficient to use <see cref="M:Infragistics.Win.CalcEngine.IUltraCalcManager.EnsureCalculated(Infragistics.Win.CalcEngine.IUltraCalcReference,System.Boolean)"/> instead of ReCalc.</p>
            </remarks>
            <returns>Returns a boolean indicating if anything in the Calculation Network is dirty. This should always return false.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ReCalc(System.Int64)">
            <summary>
            Forces recalculation of all dirtied items in the Calculation Network.
            </summary>
            <param name="millis">Number of milliseconds to allow for calculations before control returns to the caller (to wait indefinitely, specify -1.)</param>
            <returns>Returns a boolean indicating if anything in the calculation network remains dirty.</returns>
            <remarks>
            <p class="body">Developers can use this method to limit the amount of time in the time slice _CALCMANAGER_ spends
            performing it's calculations.  If all calculations have been completed before this time interval elapses, control
            returns immediately to the caller.  Setting this interval too small can lead to excessive task-switching that
            would make the calculation complete more slowly than it ordinarily would have completed, therefore developers
            are advised to allot as much time as the user-responsiveness of the application permits.</p>
            <seealso cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ReCalc"/>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the value supplied for <i>millis</i>
            is either less than -1, or too great to convert into a number of clock ticks.  The precise upper bound
            of <i>millis</i> may vary depending upon the granularity of the machine's hardware clock, but it exceeds
            any amount of time which would be a sensible argument (instead, use -1 to indicate an indefinite wait).
            </exception>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.RegisterUserDefinedFunctionLibrary(System.Reflection.Assembly)">
            <summary>
            Registers an assembly containing <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> derived types.
            </summary>
            <param name="assembly">Loaded assembly to register</param>
            <returns>Returns true if the assembly was registered successfully, else false if the registration failed</returns>
            <remarks>
            <p class="body">
            All types within the registered assembly are enumerated and any that derive from <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> class are added to the list of available formula functions
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.RegisterUserDefinedFunction(Infragistics.Win.CalcEngine.UltraCalcFunction)">
            <summary>
            Registers a single <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> instance.
            </summary>
            <param name="userDefinedFunction">User defined function instance to register</param>
            <returns>Returns true if the type was registered successfully, else false if the registration failed</returns>
            <remarks>
            <p class="body">
            Users can build custom functions used in formulas by sub-classing the <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> class.  
            Once the derived class is instaniated it must be registered by using the <b>AddFunction</b> method before being avilable and referenced by a formulas.
            Users can build a library of functions packaged in an assembly and register all the functions within the assembly by using the <b>AddFunctionLibrary</b> method.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.NotifyValueChanged(System.Windows.Forms.Control)">
            <summary>
            Notifies the CalcManager that the value of a control that is used in a formula has changed. 
            </summary>
            <remarks>
            <p class="body">This method allows the programmer to manually mark the CalcSettings of a control dirty. This is usually not necessary, depending on the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.PropertyName"/> property.
            If the property being used has a corresponding PropertyChanged event, then the UltraCalcManager will automatically hook into this property changed notification. Likewise, if the control is being used as the target of a formula, and not the source, this notification is unneccessary. 
            For example, if the PropertyName is "Text", UltraCalcManager will hook the "TextChanged" event. If no such event exists on the control, then the CalcManager cannot detect a change in the Text of the control. In that case, the program will need to call NotifyValueChanged whenever the Text of the control is dirtied.</p>
            </remarks>
            <param name="control">The control whose value has changed.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.Calculate(System.String)">
            <summary>
            Calculates the specified formula and returns the value.
            </summary>
            <remarks>
            <p class="body">The Calculate method allows you to calculate a formula once without creating a <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/>.</p>
            <p class="body">This method does not ensure that any dependants of the specified formula are calculated. When using a <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalcFrequency"/> of <b>Asynchronous</b>, you should call the <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ReCalc"/> method before calling this method.</p>
            <p class="body">This method throws an exception if the formula has a syntax error. Any other kind of error is returned as an instance of <see cref="T:Infragistics.Win.CalcEngine.UltraCalcValue"/> that represents the error that occurred.</p>
            </remarks>
            <param name="formula">Formula to calculate.</param>
            <returns>The result of the formula.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.OnSubObjectPropChanged(Infragistics.Shared.PropChangeInfo)">
            <summary>
            Invoked when a property on a sub object has changed.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.IsValidReferenceName(System.String)">
            <summary>
            Validates the Reference name for invalid characters
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.OnCalculationsCompleted(System.EventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalculationsCompleted"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.OnValueDirtied(Infragistics.Win.UltraWinCalcManager.ValueDirtiedEventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ValueDirtied"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.OnParseValue(Infragistics.Win.UltraWinCalcManager.ParseValueEventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ParseValue"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.OnFormatValue(Infragistics.Win.UltraWinCalcManager.FormatValueEventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormatValue"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.OnNamedReferenceResultChanged(Infragistics.Win.UltraWinCalcManager.NamedReferenceResultChangedEventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.NamedReferenceResultChanged"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.OnFormulaSyntaxError(Infragistics.Win.UltraWinCalcManager.FormulaSyntaxErrorEventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaSyntaxError"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.OnFormulaCircularityError(Infragistics.Win.UltraWinCalcManager.FormulaCircularityErrorEventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaCircularityError"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.OnFormulaReferenceError(Infragistics.Win.CalcEngine.FormulaCalculationErrorEventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaReferenceError"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.OnFormulaCalculationError(Infragistics.Win.CalcEngine.FormulaCalculationErrorEventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaCalculationError"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.OnCalcEngineDirtyValue(Infragistics.Win.CalcEngine.UltraCalcReferenceEventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ValueDirtied"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.OnCalcEngineRecalcValue(Infragistics.Win.CalcEngine.UltraCalcReferenceEventArgs)">
            <summary>
            Fires the <see cref="E:Infragistics.Win.CalcEngine.IUltraCalcManager.CalcEngineRecalcValue"/> event.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.System#ComponentModel#IExtenderProvider#CanExtend(System.Object)">
            <summary>
            Indicates which controls can have a CalcSettings extender property.
            </summary>
            <param name="extendee">Object to check if it can be extended.</param>
            <returns>True if the control can have a CalcSettings property.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.GetCalcSettings(System.Windows.Forms.Control)">
            <summary>
            Gets the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> for the specified control.
            </summary>
            <remarks>
            <p class="body">Use this method to get the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> for a particular control. If a <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> for the control already exists in the calculation network, then it will be returned. If it does not exist, a new <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> object will be created for the control and added into the calculation network.</p>
            <p class="body">In order for any control to be part of the calculation network, the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.PropertyName"/> property must be set.</p>
            </remarks>
            <param name="control">The control for which to obtain the CalcSettings setting.</param>
            <returns>The <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> object for the specified control.</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SetCalcSettings(System.Windows.Forms.Control,Infragistics.Win.UltraWinCalcManager.CalcSettings)">
            <summary>
            This sets the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> extender property for the specified control.
            </summary>
            <remarks>
            <p class="body">This method associates a <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> object with a particular control and adds it to the calculation network. If there is already an existing <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> associated with the specified control, then the existing <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> is removed from the calculation network and replaced by the new <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/>.</p>
            </remarks>
            <param name="control">The control whose <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> property is being set.</param>
            <param name="calcSettings">A <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> object which will be associated with the control.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ShouldSerializeCalcSettings(System.Windows.Forms.Control)">
            <summary>
            Indicates whether the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if a <b>CalcSettings</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <param name="control">The control whose <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> are being queried.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ResetCalcSettings(System.Windows.Forms.Control)">
            <summary>
            Resets the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> of the passed in control.
            </summary>		
            <remarks>
            <p class="body">This method resets the <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> of a particular control. If the control does not have a <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> object in the calculation network, then this method does nothing.</p>
            </remarks>
            <param name="control">The control whose <see cref="T:Infragistics.Win.UltraWinCalcManager.CalcSettings"/> will be reset.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.Infragistics#Win#CalcEngine#IUltraCalcManager#EnsureCalculated(Infragistics.Win.CalcEngine.IUltraCalcReference,System.Boolean)">
            <summary>
            Checks to see if a reference is dirty, and optionally waits for it to be recalculated
            </summary>
            <param name="reference">Reference whose dirty state is requested</param>
            <param name="wait">Denotes whether caller wants to wait until the reference is recalculated</param>
            <returns>True if the reference is dirty</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.Infragistics#Win#UltraWinCalcManager#FormulaBuilder#IFormulaBuilderInfo#GetReferenceTree">
            <summary>
            Returns a reference tree for use in the Designer
            </summary>
            <remarks>This property is for internal infrastrucure only and should not be used.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.Infragistics#Win#UltraWinCalcManager#FormulaBuilder#IFormulaBuilderInfo#GetUltraCalcReference(Infragistics.Win.UltraWinCalcManager.NamedReference)">
            <summary>
            Returns the IUltraCalcReference associated with a NamedReferences to the Designer.
            </summary>
            <remarks>This method is for internal infrastrucure only and should not be used.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.Infragistics#Win#UltraWinCalcManager#FormulaBuilder#IFormulaBuilderInfo#GetUltraCalcReference(Infragistics.Win.UltraWinCalcManager.CalcSettings)">
            <summary>
            Returns the IUltraCalcReference associated with a NamedReferences to the Designer.
            </summary>
            <remarks>This method is for internal infrastrucure only and should not be used.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.Infragistics#Win#UltraWinCalcManager#FormulaBuilder#IFormulaBuilderInfo#GetUniqueFunctionCategories">
            <summary>
            Returns a list of categories based on all known functions both built-in and user-defined.
            </summary>
            <remarks>This method is for internal infrastrucure only and should not be used.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.Infragistics#Win#UltraWinCalcManager#FormulaBuilder#IFormulaBuilderInfo#GetAllFunctions">
            <summary>
            Returns the UltraCalcFunctions for all categories
            </summary>
            <remarks>This method is for internal infrastrucure only and should not be used.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.Infragistics#Win#UltraWinCalcManager#FormulaBuilder#IFormulaBuilderInfo#GetUnassignedFunctions">
            <summary>
            Returns the UltraCalcFunctions for unassigned functions (functions which have no category).
            </summary>
            <remarks>This method is for internal infrastrucure only and should not be used.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.Infragistics#Win#UltraWinCalcManager#FormulaBuilder#IFormulaBuilderInfo#GetFunctions(System.String)">
            <summary>
            Returns the UltraCalcFunctions for the specified category
            </summary>
            <remarks>This method is for internal infrastrucure only and should not be used.</remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.GetColumnCalcSettings(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            Gets the CalcSettings for the specified control.
            </summary>
            <param name="column">The DataGridViewColumn for which to obtain the CalcSettings setting.</param>
            <returns>The DataGridViewColumnCalcSettings associated with the column.</returns>			
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SetColumnCalcSettings(System.Windows.Forms.DataGridViewColumn,Infragistics.Win.UltraWinCalcManager.DataGridViewColumnCalcSettings)">
            <summary>
            This sets the CalcSettings extender property for the specified DataGridViewColumn.
            </summary>
            <param name="column">The DataGridViewColumn whose CalcSettings property is being set.</param>
            <param name="calcSettings">The column settings to assign to the column.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ShouldSerializeColumnCalcSettings(System.Windows.Forms.DataGridViewColumn)">
            <summary>
            Indicates whether the <see cref="T:Infragistics.Win.UltraWinCalcManager.DataGridViewColumnCalcSettings"/> property contains data that needs to be serialized.
            </summary>
            <returns>Returns true if the <see cref="T:Infragistics.Win.UltraWinCalcManager.DataGridViewColumnCalcSettings"/> property needs to be serialized.</returns>
            <remarks>
            <p class="body">Use this method to determine if a <b>DataGridViewColumnCalcSettings</b> object has been created and contains data that needs to be serialized.</p>
            </remarks>
            <returns>Returns true if this property is not set to its default value</returns>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ResetDataGridViewCalcSettings(System.Windows.Forms.DataGridViewColumn)">
            
             Resets the DataGridViewColumnCalcSettings of the passed in column.
             
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.GetUseInCalcManager(System.Windows.Forms.DataGridView)">
            <summary>
            Gets the CalcSettings for the specified control.
            </summary>
            <param name="grid">The Grid whose UseInCalcManager property will be returned.</param>
            <returns>A bool indicating whether the grid will participate in the calculation network of the CalcManager.</returns>			
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SetUseInCalcManager(System.Windows.Forms.DataGridView,System.Boolean)">
            <summary>
            This sets the UseInCalcManager extender property for the specified DataGridView.
            </summary>
            <param name="grid">The DataGridView whose UseInCalcManager extender property is being set.</param>
            <param name="useInCalcManager">A setting of true will add the grid into the calculation network of the CalcManager so that columns can be used as the source or target of formulas. A setting of false indicates that the grid will not participate in the calculation network. It will not appear in the FormulaBuilder and any formulas that reference it's columns will return an error.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ShouldSerializeUseInCalcManager(System.Windows.Forms.DataGridView)">
            <summary>
            Indicates whether the UseInCalcManager extender property should be serialized.
            </summary>
            <param name="grid">The grid for which the UseInCalcManager extender property is being checked.</param>
            <returns>Returns true if the UseInCalcManager extender property needs to be serialized.</returns>        
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ResetDataGridViewCalcSettings(System.Windows.Forms.DataGridView)">
            <summary>
            Resets all CalcSettings for every column in the grid.
            </summary>
            <param name="grid">The grid whose column CalcSettings will be reset</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.NamedReferences">
            <summary>
            A collection of NamedReferences
            </summary>
            <remarks>
            <p class="body">NamedReferences are useful for creating formulas or constants that are used in other calculations but which will not be displayed to the user.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ContainingControl">
            <summary>
            Returns the Form or UserControl that this CalcManager component is servicing.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalcFrequency">
            <summary>
            Gets/sets the frequency with which the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> automatically performs calculations.
            </summary>
            <remarks>
            <p class="body">The CalcFrequency property determines when calculations are performed. They can be performed asynchronously on a timer, synchronously every time a value changes, or manually only when the <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ReCalc"/> method is explicitly called in code.</p>
            <p class="body">By default, calculations are done <b>Asynchronously</b> on a timer. This ensures that the UI thread is not locked up when long or complex calculations are performed. The disadvantage to this mode is that a particular value may not be calculated when it is requested in code. When retrieving a calculated value using Asynchronous mode, you should call the <see cref="M:Infragistics.Win.CalcEngine.IUltraCalcManager.EnsureCalculated(Infragistics.Win.CalcEngine.IUltraCalcReference,System.Boolean)"/> method to ensure the value has been calculated.</p>
            <p class="body"><b>Synchronous</b> mode will updated all calculations immediately any time a source value of a calculation changes. Unlike Asynchronous mode, values can always be depended upon to be calculated when asked for. The disadvantage of this mode is that long or complex calculations may lock the UI thread until they are complete.</p>
            <p class="body">In <b>Manual</b> mode, no calculations are performed by the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> until the code explicitly calls a method to do so, such as <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ReCalc"/> or <see cref="M:Infragistics.Win.CalcEngine.IUltraCalcManager.EnsureCalculated(Infragistics.Win.CalcEngine.IUltraCalcReference,System.Boolean)"/>. This allows you complete control over when calculations take place.</p>
            </remarks>
            <seealso cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.AsynchronousCalcDuration"/>
            <seealso cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.AsynchronousCalcInterval"/>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.EventManager">
            <summary>
            The object that enables, disables and controls firing of specific control events.
            </summary>
            <remarks>
            <p class="body">The <b>EventManager</b> gives you a high degree of control over how the component invokes event procedures. You can use it to selectively enable and disable event procedures depending on the context of your application. You can also use the event manager to return information about the state of the component's events.</p>
            <p class="body">The event manager's methods are used to determine the enabled state of an event (<see cref="M:Infragistics.Win.UltraWinCalcManager.CalcManagerEventManager.IsEnabled(Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds)"/>), to selectively enable or disable events (<see cref="M:Infragistics.Win.UltraWinCalcManager.CalcManagerEventManager.SetEnabled(Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds,System.Boolean)"/>), and to tell whether an event procedure is currently being processed (<see cref="M:Infragistics.Win.UltraWinCalcManager.CalcManagerEventManager.InProgress(Infragistics.Win.UltraWinCalcManager.CalcManagerEventIds)"/>). There is also an <seealso cref="P:Infragistics.Shared.EventManagerBase.AllEventsEnabled"/> property that you can check to quickly determine whether any events have been disabled by the event manager.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ErrorIconAlignment">
            <summary>
            Gets/sets where to place the ErrorProvider icon when a Calculation or Reference error occurs on a formula.
            </summary>
            <remarks>
            <p class="body">When a Calculation or Reference error occurs during the evaluation of a formula, The UltraCalcManager will display an ErrorProvider Icon adjacent to the target control. ErrorIconAlignment determines the location of the icon. When set to <b>Default</b>, <b>MiddleRight</b> is used. This setting can be overridden on any individual control by setting the <see cref="P:Infragistics.Win.UltraWinCalcManager.CalcSettings.ErrorIconAlignment"/> property. To turn off displaying ErrorProvider icons, use the <b>None</b> value.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ErrorIcon">
            <summary>
            The Error Icon to display when a Calculation or Reference error occurs on a control.
            </summary>
            <remarks><p class="body">The display of the icon varies depending on the context. A control on a form will show the icon as part of an ErrorProvider. NamedReferences show no icons. UltraWinGrid will not show the icon.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.AsynchronousCalcDuration">
            <summary>
            The duration in milliseconds that the CalcManager will use to perform calculations each time the AsynchronousCalculationInterval passes.
            </summary>
            <remarks><p class="body">This property only applies when <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalcFrequency"/> is set to <b>Asynchronous</b>.</p></remarks>
            <remarks><p class="body">AsynchronousCalcDuration determines how much time is used by the CalcManager to perform pending calculations. Each time the interval specified by <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.AsynchronousCalcInterval"/> passes, the CalcManager will begin performing any neccessary calculations. If there are still calculations pending when the time expires, then some calculations will be left in a dirty state until the next time ReCalc is called or the Interval passes again.</p></remarks>
            <remarks><p class="body">To force all calculations to be completed each time the Interval passes, set this property to -1.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.AsynchronousCalcInterval">
            <summary>
            The interval in milliseconds that the CalcManager will wait between performing calculations.
            </summary>
            <remarks><p class="body">This property only applies when <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalcFrequency"/> is set to <b>Asynchronous</b>.</p></remarks>
            <remarks><p class="body">AsynchronousCalcInterval determines how much time elapses between calculations. Each time the Interval passes the CalcManager will perform pending calculations for a period of time specified by <see cref="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.AsynchronousCalcDuration"/>.</p></remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.DeferredCalculationsEnabled">
            <summary>
            Gets / Sets whether certain calculations can be deferred to optimize calculation of visible objects.
            </summary>
            <remarks>
            <p class="body">When true, certain calculations will be deffered if they are not visible. This is mainly used for iterated calculations, such as UltraGrid cells. If possible, cells that are in view will be calculated before cells that are out of view. </p>
            <p class="note">Note that in some cases, deferring calcalations is not possible. For example, if there is a Summary on a column, then all the values in the column must be calculated before the summary can be calculated.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.UseExcelFormulaCompatibility">
            <summary>
            Determines if formula calculations are done in a way that is compatible with Microsoft Excel.
            </summary>
            <remarks>
            <para class="body">Set this property to true to make the CalcManager perform calculations in a way that is compatible with Microsoft Excel. By default, CalcManager calculations are performed using DotNet standards and functions. Setting this property to true will make the CalcManager's results closer to those in Excel.</para>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.SubObjectPropChangeHandler">
            <summary>
            Handler for a SubObjectPropChange event
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.Site">
            <summary>
            The component's site (set at design time only).
            </summary>
        </member>
        <member name="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.CalculationsCompleted">
            <summary>
            Fired after all calculations are complete. 
            </summary>
            <remarks>
            <p class="body"><b>CalculationsCompleted</b> event is fired when all calculations are completed. In Asynchronous mode, this even will fire only when all calculations have been computed and no references are dirty.</p>
            </remarks>	
        </member>
        <member name="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ValueDirtied">
            <summary>
            Fired any time a value referenced by a Formula is dirtied. 
            </summary>
            <remarks>
            <p class="body"><b>ValueDirtied</b> event is fired any time a value that is being used in a calculation is dirtied (changed). This even can be used in conjunction with a CalcFrequency setting of Manual to determine when to there are dirty calculations to be ReCalced.</p>
            </remarks>		
        </member>
        <member name="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaSyntaxError">
            <summary>
            Fired when parsing the formula expression fails because the expression contains typographical errors or uses operators incorrectly.
            </summary>
            <remarks>
            <p class="body">This event fires any time the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> attempts to calculate a formula that is syntactically invalid.</p>
            </remarks>
        </member>
        <member name="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaCircularityError">
            <summary>
            Fired any time a formula attempts to reference itself either directly or indirectly. 
            </summary>
            <remarks>
            <p class="body"><b>FormulaCircularityError</b> is fired any time a formula attempts to reference itself either directly or indirectly.</p>
            <p class="body">Circular references cannot be resolved by the UltraCalcmanager and so no calculations involving circular references will be performed.</p>
            </remarks>	
        </member>
        <member name="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaReferenceError">
            <summary>
            Fired when calculating the formula involves referencing an object that could not be found.
            </summary>
            <remarks>
            <p class="body">This event fires whenever the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> attemps to calculate a formula which refers to a reference that cannot be found in the calculation network.</p>
            </remarks>
        </member>
        <member name="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormulaCalculationError">
            <summary>
            Fired any time the attempt to calculate a formula results in an error. 
            </summary>
            <remarks>
            <p class="body"><b>FormulaCalculationError</b> event is fired any time the attempt to calcuate a formula results in an error, whether it be a reference, syntax, or mathematical error..</p>
            </remarks>	
        </member>
        <member name="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.ParseValue">
            <summary>
            Fired when a CalcSetting retrieves a value from a control
            </summary>
            <remarks>
            <p class="body"><b>ParseValue</b> event is fired any time a CalcSettings retrieves a value from a control. The Value can then be modified by before it passed back to the CalcManager for the purposes of formatting, type conversion, etc.</p>
            <p class="note">Note that if a control is both the source and target of a formula, the ParseValue event will not fire because the CalcManager does not retrive the value from the control. Instead, the CalcManager uses the calculated result of the formula. This means that a control that is being used as both source and target can safely be Formatted using the <see cref="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormatValue"/> event without the need to reverse the formatting.</p>
            </remarks>	
        </member>
        <member name="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.FormatValue">
            <summary>
            Fired before a CalcSettings sets a value on a control
            </summary>
            <remarks>
            <p class="body"><b>FormatValue</b> event is fired any time a CalcSettings is about to set a value on a control. The Value can then be modified by before it is assigned to the control for the purposes of formatting, type conversion, etc.</p>
            </remarks>	
        </member>
        <member name="E:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.NamedReferenceResultChanged">
            <summary>
            Fired after a <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> value has changed.
            </summary>
            <remarks>
            <p class="body">This event fires any time the result of a <see cref="T:Infragistics.Win.UltraWinCalcManager.NamedReference"/> changes.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManager.About">
            <summary>
            Display the about dialog
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManagerDesigner">
            <summary>
            The designer class for the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> component.
            </summary>
            <remarks>
            <p class="body">For Internal use only.</p>
            <p class="body">This class handles various design-time maintanence tasks such as trapping for when controls in the calculation network are removed or their names are changed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManagerDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the Designer
            </summary>
            <param name="component">The component being designed.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManagerDesigner.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManagerDesigner.ActionLists">
            <summary>
            Gets the <see cref="T:System.ComponentModel.Design.DesignerActionListCollection"/> for this designer's control/component.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManagerDesigner.UltraCalcManagerActionList">
            <summary>
            Provides DesignerActionItems for the SmartTag associated with the UltraCalcManager.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManagerDesigner.UltraCalcManagerActionList.#ctor(Infragistics.Win.UltraWinCalcManager.UltraCalcManager)">
            <summary>
            Constructor
            </summary>
            <param name="product">The UltraCalcManager component.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManagerDesigner.UltraCalcManagerActionList.CreateActionItems(System.ComponentModel.Design.DesignerActionItemCollection)">
            <summary>
            Overrides CreateActionItems.
            </summary>
            <param name="actionItems">The list to populate.</param>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcManagerDesigner.UltraCalcManagerActionList.EditNamedReferences">
            <summary>
            Used by SmartTag Panel.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManagerDesigner.UltraCalcManagerActionList.CalcFrequency">
            <summary>
            Used by SmartTag Panel.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManagerDesigner.UltraCalcManagerActionList.ErrorIcon">
            <summary>
            Used by SmartTag Panel.
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcManagerDesigner.UltraCalcManagerActionList.ErrorIconAlignment">
            <summary>
            Used by SmartTag Panel.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.CalcSettingsReferenceProxy">
            <summary>
            Summary description for CalcSettingsReferenceProxy.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.UltraCalcReferenceProxyBase">
            <summary>
            Summary description for UltraCalcReferenceProxy.
            </summary>
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcReferenceProxyBase.FindAll(System.String)">
            <summary>
            Returns the named reference relative to this reference with scope "All".
            </summary>
            <param name="name">The element name.</param>
            <returns>The referenced element</returns>
            <see cref="M:Infragistics.Win.UltraWinCalcManager.UltraCalcReferenceProxyBase.BuildReference(Infragistics.Win.CalcEngine.RefParser,System.Boolean)"/>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.UltraCalcNamedReferenceProxy">
            <summary>
            Summary description for UltraCalcNamedReferenceProxy.
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.UltraCalcUserDefinedLibraryBase">
            <summary>
            Used as a base class for a component that registers all user defined function
            in an assembly.
            </summary>
            <remarks>
            Placing an instance of a class derived from this class on a form with an <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/> component 
            on it will cause all functions derived from <see cref="T:Infragistics.Win.CalcEngine.UltraCalcFunction"/> 
            in the same assmbly to be registered with that calc manager. The registration happens automaticlly at both design and run time. 
            </remarks>	
        </member>
        <member name="M:Infragistics.Win.UltraWinCalcManager.UltraCalcUserDefinedLibraryBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcUserDefinedLibraryBase.CalcManager">
            <summary>
            Gets/sets the <see cref="T:Infragistics.Win.UltraWinCalcManager.UltraCalcManager"/>
            </summary>
            <remarks>
            Setting this property will register user-defined functions in this assembly with the calc manager.
            </remarks>
        </member>
        <member name="P:Infragistics.Win.UltraWinCalcManager.UltraCalcUserDefinedLibraryBase.ConcreteCalcManager">
            <summary>
            Returns the CalcManager as a typed UltraCalcManager instead of an IUltraCalcManager
            </summary>
        </member>
        <member name="T:Infragistics.Win.UltraWinCalcManager.UltraRefParser">
            <summary>
            Summary description for UltraRefParser.
            </summary>
        </member>
    </members>
</doc>
