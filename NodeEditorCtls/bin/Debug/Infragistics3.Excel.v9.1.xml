<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infragistics3.Excel.v9.1</name>
    </assembly>
    <members>
        <member name="T:Infragistics.Excel.ISparseArrayItem">
            <summary>
            This interface can be implemented on items to be contained in the sparse 
            array to get a fast IndexOf operation.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.ISparseArrayItem.GetOwnerData(Infragistics.Excel.SparseArray)">
            <summary>
            Gets the owner data of the item.
            </summary>
            <param name="context">The sparse array context.</param>
            <remarks>
            <p class="body"><b>GetOwnerData</b> and <see cref="M:Infragistics.Excel.ISparseArrayItem.SetOwnerData(System.Object,Infragistics.Excel.SparseArray)"/> methods are used by the <see cref="T:Infragistics.Excel.SparseArray"/> implementation to maintain a transparent piece of data. It uses this data to provide efficient IndexOf operation.</p>
            </remarks>
            <returns>The owner data of the item.</returns>
        </member>
        <member name="M:Infragistics.Excel.ISparseArrayItem.SetOwnerData(System.Object,Infragistics.Excel.SparseArray)">
            <summary>
            Sets the owner data of the item.
            </summary>
            <param name="ownerData">The owner data to assign to the item.</param>
            <param name="context">The sparse array context.</param>
            <remarks>
            <p class="body"><see cref="M:Infragistics.Excel.ISparseArrayItem.GetOwnerData(Infragistics.Excel.SparseArray)"/> and <b>SetOwnerData</b> methods are used by the <see cref="T:Infragistics.Excel.SparseArray"/> implementation to maintain a transparent piece of data. It uses this data to provide efficient IndexOf operation.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Excel.ISparseArrayMultiItem">
            <summary>
            ISparseArrayMultiItem interface.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.ISparseArrayMultiItem.GetItemAtScrollIndex(System.Int32)">
            <summary>
            Returns a descendant item at the specified index. The returned item 
            doesn't necessarily have to be an immediate child.
            </summary>
            <param name="scrollIndex">The index of the descendant item.</param>
            <returns>The descendant item found at the specified index.</returns>
        </member>
        <member name="P:Infragistics.Excel.ISparseArrayMultiItem.ScrollCount">
            <summary>
            Gets the scroll count of this item. If the scroll count is 0 then item 
            is considered hidden otherwise it's considered visible. Scroll count must 
            be a non-negative number.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.ICreateItemCallback">
            <summary>
            ICreateItemCallback interface.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.ICreateItemCallback.CreateItem(Infragistics.Excel.SparseArray,System.Int32)">
            <summary>
            Returns a new item to be assigned to a location in the array. CreateItem should not 
            set the new item at the location in the array. Array and relativeIndex are provided 
            for information only. Also the implementation should not modify array in any way 
            otherwise results will be undefined.
            </summary>
            <param name="array">The array to provide as context; this array will remain unmodified.</param>
            <param name="relativeIndex">The relative index of the item to create.</param>
        </member>
        <member name="T:Infragistics.Excel.SparseArray">
            <summary>
            SparseArray class.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.SparseArray"/> class with the default factor
            </summary>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.SparseArray"/> class
            </summary>
            <param name="useOwnerData">If true then either all items should implement ISparseArrayItem interface or the derived class should override <see cref="M:Infragistics.Excel.SparseArray.GetOwnerData(System.Object)"/> and <see cref="M:Infragistics.Excel.SparseArray.SetOwnerData(System.Object,System.Object)"/> methods to maintain owner data for items.</param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.SparseArray"/> class .
            </summary>
            <param name="factor">The number in determining how the array should grow.</param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.#ctor(System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.SparseArray"/> class.
            </summary>
            <param name="factor">The number in determining how the array should grow.</param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.#ctor(System.Int32,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.SparseArray"/> class.
            </summary>
            <param name="factor">The number in determining how the array should grow.</param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
            <param name="useOwnerData">If true then all the items must implement ISparseArrayItem interface.</param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.#ctor(System.Boolean,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.SparseArray"/> class.
            </summary>
            <param name="manageScrollCounts">Specifies whether scroll count and position should be maintained.</param>
            <param name="factor">The number in determining how the array should grow.</param>
            <param name="growthFactor">Must be between 0f and 1f exclusive.</param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.Expand(System.Int32)">
            <summary>
            Expands the array to the new count. New count must be greater than or equal to the 
            current count. This has the same logical effect as adding new count - current count 
            number of null items at the end of the array.
            </summary>
            <param name="newCount">The new size of the array.</param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.Add(System.Object)">
            <summary>
            Adds the speicifed item at the end of the collection.
            </summary>
            <param name="item"></param>
            <returns>The index at which the item was added.</returns>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified item at the specified location in the array.
            </summary>
            <param name="index">The location in the array that the item should be inserted.</param>
            <param name="item">The item to insert into the array.</param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.AddRange(System.Collections.ICollection)">
            <summary>
            Adds items in the specified collection to the end of the collection.
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts items in the specified collection to the collection at the specified index.
            </summary>
            <param name="index">The index at which to insert the specified items.</param>
            <param name="items">The collection of items to insert into the array.</param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specified index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.IndexOf(System.Object)">
            <summary>
            Retruns the index of the specified item.
            </summary>
            <param name="item">The item whose index should be determined.</param>
            <returns>The index of the specified item, or -1 if the item is not found.</returns>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.Remove(System.Object)">
            <summary>
            Removes the specified item. If the item doesn't exist in the collection, it does nothing.
            </summary>
            <param name="value">The item to remove from the array.</param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.Contains(System.Object)">
            <summary>
            Returns true if the specified item is contained in the collection.
            </summary>
            <param name="value">The item that should be searched for within the collection.</param>
            <returns>True if the object was found in the collection, otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.Clear">
            <summary>
            Removes all items from the array.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements from this collection to the specified array starting at index.
            </summary>
            <param name="array">The array into which the items should be copied.</param>
            <param name="index">The position in the array at which copying should begin.</param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.CopyTo(System.Array,System.Int32,Infragistics.Excel.ICreateItemCallback)">
            <summary>
            Copies all the elements from this collection to the specified array starting at index.
            </summary>
            <param name="array">The array into which the items should be copied.</param>
            <param name="index">The position in the array at which copying should begin.</param>
            <param name="callback">A callback mechanism used to insert new items when null slots are encountered.</param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.ToArray">
            <summary>
            Returns a new array containing all the elements of this collection.
            </summary>
            <returns>An object array containing all the elements of this collection.</returns>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.ToArray(System.Type)">
            <summary>
            Returns a new array of specified type containing all the elements of this collection.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> of array to create.</param>
            <returns>An array of the specified type containing all the elements of this collection.</returns>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index. If the item at the specified index is null 
            and createItemCallback parameter is non-null, it will call CreateItem on the 
            callback to create it and set it on the array at the specified index.
            </summary>
            <param name="index">The index of the item to get.</param>
            <returns>The item at the specified index, or null if no item exists.</returns>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.GetItem(System.Int32,Infragistics.Excel.ICreateItemCallback)">
            <summary>
            Gets the item at the specified index. If the item at the specified index is null 
            and createItemCallback parameter is non-null, it will call CreateItem on the 
            callback to create it and set it on the array at the specified index.
            </summary>
            <param name="index">The index of the item to get.</param>
            <param name="createItemCallback">A callback mechanism used to insert new items when null slots are encountered.</param>
            <returns>The item at the specified index, or null if no item exists.</returns>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the array.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.GetOwnerData(System.Object)">
            <summary>
            Returns the owner data of the item. Derived class can override <b>GetOwnerData</b> and <b>SetOwnerData</b> to support owner data without having to implement ISparseArrayItem interface on the items.
            </summary>
            <param name="item">The item whose owner data should be returned.</param>
            <returns>The owner data of the item, or null if none found.</returns>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.SetOwnerData(System.Object,System.Object)">
            <summary>
            Sets the owner data on item. Derived class can override <b>GetOwnerData</b> and <b>SetOwnerData</b> to support owner data without having to implement ISparseArrayItem interface on the items.
            </summary>
            <param name="item">The item whose owner data should be assigned.</param>
            <param name="ownerData">The owner data to assign to the item.</param>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.OnScrollCountChanged">
            <summary>
            Called by the sparse array whenever visible count or scroll count changes or is dirtied. Default implementation does nothing. This may get called multiple times for the same change as well as may get called even when the count doesn't change but is simply dirtied.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.OnDeserializationComplete">
            <summary>
            Sets the owner data on all the items contained in the tree. Typically you do not 
            need to call this as the sprase array automatically manages the owner data as you
            add and remove items. This is useful if you deserialize the sparse array and
            need to make sure that the owner data are set properly on the contained items.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.GetEnumerator">
            <summary>
            Returns an instance of IEnumerator that can be used to enumerate through all the 
            elements of this collection.
            </summary>
            <returns>A <see cref="T:System.Collections.IEnumerator"/> to traverse the collection.</returns>
        </member>
        <member name="M:Infragistics.Excel.SparseArray.GetEnumerator(Infragistics.Excel.ICreateItemCallback)">
            <summary>
            Returns an instance of IEnumerator that can be used to enumerate through all the 
            elements of this collection. New elements will be created to fill null slots via
            createItemCallback parameter if it's non-null.
            </summary>
            <param name="createItemCallback">A callback mechanism used to insert new items when null slots are encountered.</param>
            <returns>A <see cref="T:System.Collections.IEnumerator"/> to traverse the collection.</returns>
        </member>
        <member name="P:Infragistics.Excel.SparseArray.Count">
            <summary>
            Retruns the number of items contained in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.SparseArray.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.SparseArray.IsSynchronized">
            <summary>
            Indicates whether this collection is synchronized. Always returns false.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.SparseArray.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize thread access.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.SparseArray.NonNullItems">
            <summary>
            Returns a new instance of enumerable that can be used to enumerate through only the non-null items in the collection.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.ReferenceActionCode">
            <summary>
            Identifies formula token types in the <b>UltraCalcFormulaToken</b> class
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.IExcelCalcReferenceCollection">
            <summary>
            Collection of <see cref="T:Infragistics.Excel.CalcEngine.IExcelCalcReference"/> objects
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UCRecalcChain.CopyTo(System.Array,System.Int32)">
            <summary>
            Copys the collection to an array.
            </summary>
            <param name="array">Array used for the desitnation of the copy.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UCRecalcChain.GetEnumerator">
            <summary>
            Returns the collection enumerator.
            </summary>
            <returns>Collection enumerator.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCRecalcChain.IsSynchronized">
            <summary>
            Denotes whether the collection is thread-safe.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCRecalcChain.Count">
            <summary>
            Returns a number of elements in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCRecalcChain.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.AddAncestor(Infragistics.Excel.CalcEngine.UCReference,Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Add a formula refernce the given predecessor reference
            </summary>
            <param name="predecessor"><b>UCReference</b> predecessor reference</param>
            <param name="ancestor"><b>IUltraCalcReference</b> of formula that contains the given predecessor</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.Find(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Return the position of the given predecessor in the collection
            </summary>
            <param name="predecessor"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.DeleteAncestor(Infragistics.Excel.CalcEngine.IExcelCalcReference,Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Remove the given formula ancestor from the given  predecessor's list of formulas.
            </summary>
            <param name="formulaPredecessor"><b>IUltraCalcReference</b> that's referenced by given ancestor's formula</param>
            <param name="ancestor">Formula refernce to remove for given predecessor's list of formulas</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.DeleteAncestorAt(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Remove the given formula ancestor from the given  predecessor's list of formulas.
            </summary>
            <param name="posPredecessor">Position of the predecessor in the ancestor list</param>
            <param name="posAncestor">Position of the ancestor in the predecessor's Ancestors list</param>
            <param name="replacePredecessorInMapEntry">Indicates whether to update the predecessor reference in the ancestor map</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.Ancestors(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Return the collection of ancestors of the given predecessor
            </summary>
            <param name="predecessor">Reference whose collection of formulas to return</param>
            <returns>Collection of references whose formulas reference the given predecessor</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.CopyTo(System.Array,System.Int32)">
            <summary>
            Copys the collection to an array.
            </summary>
            <param name="array">Array used for the desitnation of the copy.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.GetEnumerator">
            <summary>
            Returns the collection enumerator.
            </summary>
            <returns>Collection enumerator.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.IsSynchronized">
            <summary>
            Denotes whether the collection is thread-safe.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.Count">
            <summary>
            Returns a number of elements in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry">
            <summary>
            Provides methods and properties to manage a list of formulas that reference a given reference
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.#ctor(Infragistics.Excel.CalcEngine.UCReference)">
            <summary>
            Predecessor constructor
            </summary>
            <param name="predecessor">predecessor for this instance</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.Equals(System.Object)">
            <summary>
            Equality method that returns whether an object is equal to this one
            </summary>
            <param name="obj">Object to compare to this entry</param>
            <returns>True if object is equal to this instance, else false</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.GetHashCode">
            <summary>
            Return hashcode for this object
            </summary>
            <returns>Integer hash code for this object</returns>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.formulaPredecessor">
            <summary>
            Storage for predecessor
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.formulaAncestors">
            <summary>
            Storage for ancestor collection
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.Predecessor">
            <summary>
            Get/Set the predecessor for this entry
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcAncestorMap.AncestorMapEntry.Ancestors">
            <summary>
            Get/Set the ancestor collection for this entry
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.FormulaReference">
            <summary>
            IUltraCalcReference implementation for caching the Formula of the underlying reference.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.IExcelCalcReference">
            <summary>
            The Primary Reference Inteface.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.IExcelCalcReference.CreateReference(System.String)">
            <summary>
            Create a new reference relative to this reference.  
            </summary>
            <param name="referenceString">The reference string.</param>
            <returns>The new reference.</returns>
            <remarks>
            A reference string may be external or internal.  
            <p>A external reference has the form "//object_name/object_specific_part".  
            The control identified by object_name must implement IUltraCalcReference and be able to 
            parse object_specific_part.</p>
            <p>An internal reference is a reference within the same control that implements this 
            instance of the interface.  An internal reference can be absolute or relative.  Absolute 
            references must begin with the "/" character.  Such references must be created relative to
            the root object in the control.  Relative references are created relative to this reference.</p>
            <p>Note that in complex reference models, multiple reference strings may point to the same
            underlying object.  The reference string used to create the reference must be available to
            other methods such as ResolveReference, References and MarkRelativeIndicies.  Consequently, if the reference 
            string is relative, a proxy reference object should be returned that retains the relative
            reference string.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.IExcelCalcReference.ContainsReference(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Returns true if this reference contains inReference
            </summary>
            <param name="inReference">The contained candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
            <remarks>
            This method is used by the <b>UltraCalcEngine</b> to determine if the passed in reference
            is either a child of this reference or a more fully scoped version of this reference.  
            Each element in this reference is compared with the corresponding element in the input 
            reference.  If the identifers are the same, and if this scope contains the input scope, then
            the input reference is contained by this reference.  If the input reference is longer than 
            this reference and the common element are contained, then the input reference is contained.
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.IExcelCalcReference.IsSubsetReference(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Returns true if inReference is a proper subset of this reference
            </summary>
            <param name="inReference">The subset candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
            <remarks>
            This method is used by the <b>UltraCalcEngine</b> to determine if the passed in reference
            is fully contained by this reference.  
            Each element in this reference is compared with the corresponding element in the input 
            reference.  If the identifers are the same, and if this scope entirely contains the input scope, then
            the input reference is a proper subset this reference.  
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IExcelCalcReference.AbsoluteName">
            <summary>
            The fully qualified unique name for the referenced element.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IExcelCalcReference.ElementName">
            <summary>
            The unqualified name of this referenced element.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IExcelCalcReference.Value">
            <summary>
            The <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcValue"/>, if any, associated with this Reference.  If this reference 
            does not contain a Value then a <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue"/> is returned.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IExcelCalcReference.Formula">
            <summary>
            The <see cref="T:Infragistics.Excel.CalcEngine.IExcelCalcFormula"/>, if any, associated with this Reference.  If this reference 
            can not contain a formula then null is returned.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IExcelCalcReference.Context">
            <summary>
            Returns a context for the Reference.
            </summary>
            <remarks><p class="body">Returns a meaningful object context for the reference. This could be an UltraGridCell, UltraGridColumn, NamedReference, Control, etc.</p></remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IExcelCalcReference.References">
            <summary>
            Return a collection of references if this Reference is enumerable.  An exception is
            thrown if this reference is not enumerable.
            </summary>
            <returns>A Reference collection.</returns>
            <remarks>
            The collection returned by this method must be constained to the scope specified by the 
            original string used to create the reference.  For example, if the original reference string
            was [Customers(State="MA")/Total], then the collection should be constained to the Total cells
            for all customers that have State = "MA".
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IExcelCalcReference.IsEnumerable">
            <summary>
            Returns true if this reference is enumerable.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IExcelCalcReference.NormalizedAbsoluteName">
            <summary>
            Returns the normalized absolute name. UltraCalcEngine makes use normalized
            absolute names of references to compare two references and search for references.
            This property should return the absolute name with case insensitive parts of
            the absolute names converted to lower case.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcEngine"/>
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.AddFunctionLibrary(System.Reflection.Assembly)">
            <summary>
            Registers an assembly containing <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcFunction"/> derived types.
            </summary>
            <param name="assembly">Loaded assembly to register</param>
            <returns>Returns true if the assembly was registered successfully, else false if the registration failed</returns>
            <remarks>
            <p class="body">
            All types within the registered assembly are enumerated and any that derive from <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcFunction"/> class are added to the list of available formula functions
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.AddFunction(Infragistics.Excel.CalcEngine.ExcelCalcFunction)"/>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.AddFunction(Infragistics.Excel.CalcEngine.ExcelCalcFunction)">
            <summary>
            Registers a single <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcFunction"/>
            </summary>
            <param name="function">User defined function instance to register</param>
            <returns>Returns true if the type was registered successfully, else false if the registration failed</returns>
            <remarks>
            <p class="body">
            Users can build custom functions used in formulas by sub-classing the <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcFunction"/> class.  
            Once the derived class is instaniated it must be registered by using the <b>AddFunction</b> method before being avilable and referenced by a formulas.
            Users can build a library of functions packaged in an assembly and register all the functions within the assembly by using the <b>AddFunctionLibrary</b> method.
            </p>
            </remarks>        
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.AddFormula(Infragistics.Excel.CalcEngine.IExcelCalcFormula)">
            <summary>
            Adds a formula into the calculation network.
            </summary>
            <param name="formula">Formula instance containing compiled formula string to add into the calculation network</param>
            <remarks>
            <p class="body">
            Formulas are entered into the calculation network by first compiling the formula string using the <b>Compile</b> method on the <b>UltraCalcFormula</b> class, then passing the <b>UltraCalcFormula</b> instance to the <b>AddFormula</b> method.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.DeleteFormula(Infragistics.Excel.CalcEngine.IExcelCalcFormula)">
            <summary>
            Deletes a formula from the calculation network
            </summary>
            <param name="formula">Formula instance to be removed</param>
            <remarks>
            <p class="body">
            References to formulas that are deleted are recalculated.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.ProcessAddFormula(Infragistics.Excel.CalcEngine.IExcelCalcFormula,Infragistics.Excel.CalcEngine.IExcelCalcReference)"/>
            <seealso cref="T:Infragistics.Excel.CalcEngine.UltraCalcFormulaBase"/>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.Recalc(System.Int64)">
            <summary>
            Performs a time-based recalculation
            </summary>
            <param name="ticks">Denotes the number of 100-nanosecond intervals used to perform time-based partial recalculation cycles</param>
            <returns>Returns true if there are still formulas to recalculate or false if recalculation process is complete</returns>
            <remarks>
            <p class="body">
            This method performs a partial recalculation cycle, yielding after the given number of ticks has expired.  This method should be repeately
            called until it returns false denoting all dirty formulas have been recalculated.
            <p></p>
            <seealso cref="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.Recalc(System.Int64)"/> 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.Recalc">
            <summary>
            Performs a synchronous recalculation
            </summary>
            <returns>Returns true if the reference is dirty, else false</returns>
            <p></p>
            <seealso cref="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.Recalc(System.Int64)"/> 
            <remarks>
            <p class="body">
            This method recalculates all dirty formulas before returning.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.IsDirty(Infragistics.Excel.CalcEngine.IExcelCalcReference,System.Boolean)">
            <summary>
            Checks to see if a reference is dirty, and optionally waits for it to be recalculated
            </summary>
            <param name="reference">Reference whose dirty state is requested</param>
            <param name="wait">Denotes whether caller wants to wait until the reference is recalculated</param>
            <returns>True if the reference is dirty</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.Dump">
            <summary>
            Outputs information about the current state of the calculation engine.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcEngine.AfterFormulaEvaluationCompleted(Infragistics.Excel.CalcEngine.IExcelCalcReference,Infragistics.Excel.CalcEngine.UltraCalcFormulaBase,Infragistics.Excel.CalcEngine.ExcelCalcValue)">
            <summary>
            Occurs after a single evaluation of a formula has completed.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcEngine.FunctionFactory">
            <summary>
            Returns the formula function factory for this instance of the calc engine
            </summary>
            <remarks>
            <p class="body">
            Use the function factory to access detailed information about each function available to formulas compiled against this instance of the calc engine.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcEngine.IgnoreRecalcList">
            <summary>
            Gets a dictionary of all references which should be ignored from recalculations for now due to dynamically
            added references which were dirty.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFormulaBase">
            <summary>
            Provides methods to compile and evaluate formulas.
            </summary>
            <remarks>
            <p class="body">
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.IExcelCalcFormula">
            <summary>
            Interface implemented by the formula object.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.IExcelCalcFormula.Evaluate(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Evaluate the compiled expression against the given base reference
            </summary>
            <param name="reference">Base reference used to resolve relative references into absolute references</param>
            <returns>Retuns an UltraCalcValue containing result of formula evaluation</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.IExcelCalcFormula.AddDynamicReference(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Adds a reference created during the evaluation of the formula to the refernces of the formula.
            </summary>
            <remarks>
            <p class="body">
            If the reference is already in the references or dynamic references collection of the formula, this will have no effect.
            </p>
            </remarks>
            <param name="reference">The reference to add to the formula's dynamic references collection.</param>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IExcelCalcFormula.FormulaString">
            <summary>
            Formula string.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IExcelCalcFormula.HasAlwaysDirty">
            <summary>
            Returns whether the formula contains an always dirty function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IExcelCalcFormula.BaseReference">
            <summary>
            Base reference associated with the formula.
            </summary>
            <remarks>
            <p class="body">Base reference associated with the formula. For example, in the case of a column formula, BaseReference would be the column reference.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IExcelCalcFormula.References">
            <summary>
            Retuns a collection of references contained in the formula token string
            </summary>
            <returns>Collection of IUltraCalcReferences</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IExcelCalcFormula.DynamicReferences">
            <summary>
            Gets the collection of reference created during the last evaluation of the formula.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFormulaBase.Evaluate(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Evaluate the compiled expression against the given base reference
            </summary>
            <param name="reference">Base reference used to resolve relative references into absolute references</param>
            <returns>Retuns an UltraCalcValue containing result of formula evaluation</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFormulaBase.HasAlwaysDirty">
            <summary>
            Denotes whether the formula contains an always dirty function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFormulaBase.FormulaString">
            <summary>
            Returns the formula string
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFormulaBase.BaseReference">
            <summary>
            Gets or sets the formula base reference
            </summary>
            <remarks>
            <p class="body">
            The base reference of a formula is sometimes referred to as the Left-Hand-Side (LHS)of an expression.  
            It represents the location within the grid, or other object, whose value is being computed by the given formula.  
            References within the formula expression my be fully qualified or relative to the formula's base reference.  
            For example, if we want to calculate a "[Total]" column in a grid we might have a formula such as "[Units] * [Price]".  Each cells within the
            "Total" column would be computed multiplying the "Units" cell and "Price" cell for row in the band.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFormulaBase.Tokens">
            <summary>
            Returns a collection of formula tokens in pre-fix form, called Reverse Polish Notation.
            </summary>
            <returns>Formula token collection</returns>
            <remarks>
            <p class="body">
            Compiling a formula converts the in-fix expression string into an intemediate post-fix form optimized for evaluation.  
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFormulaBase.References">
            <summary>
            Retuns a collection of references contained in the formula token string
            </summary>
            <returns>Collection of IUltraCalcReferences</returns>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFormulaReferenceCollection">
            <summary>
            Provides methods and properties that manage a collection of <b>IUltraCalcFormulaReference</b> objects.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFormulaReferenceCollection.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFormulaReferenceCollection.#ctor(Infragistics.Excel.CalcEngine.UltraCalcFormulaBase)">
            <summary>
            Constructor that accepts a collection of formula tokens used to access the references in a formula.
            </summary>
            <param name="formula">The formula which owns the collection.</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFormulaReferenceCollection.Add(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Adds a reference to the collection.
            </summary>
            <param name="reference"><b>IUltraCalcReference</b> instance to add to collection.</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFormulaReferenceCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copys the collection to an array.
            </summary>
            <param name="array">Array used for the desitnation of the copy.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFormulaReferenceCollection.GetEnumerator">
            <summary>
            Returns the collection enumerator.
            </summary>
            <returns>Collection enumerator.</returns>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcFormulaReferenceCollection.tokenArray">
            <summary>
            Underlying collection object managing the token collection.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFormulaReferenceCollection.IsSynchronized">
            <summary>
            Denotes whether the collection is thread-safe.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFormulaReferenceCollection.Count">
            <summary>
            Returns a number of elements in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFormulaReferenceCollection.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFormulaToken">
            <summary>
            Abstract base class from which all formula tokens must derive.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.IUltraCalcFormulaToken">
            <summary>
            Interface implemented by the calcengine formula token object.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IUltraCalcFormulaToken.Type">
            <summary>
            Return the token's type code
            </summary>
            <returns>The <b>UltraClacFormulaTokenType</b> for the this token</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFormulaToken.#ctor(Infragistics.Excel.CalcEngine.UltraCalcFormulaTokenType)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFormulaToken.Type">
            <summary>
            Return the token's type code
            </summary>
            <returns>The <b>UltraClacFormulaTokenType</b> for the this token</returns>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.IUltraCalcValueToken">
            <summary>
            Interface implemented by the calcengine formula token object.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IUltraCalcValueToken.Value">
            <summary>
            The UltraCalcValue represented by the token. 
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.IUltraCalcFunctionToken">
            <summary>
            Interface implemented by the calcengine formula token object.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IUltraCalcFunctionToken.ArgumentCount">
            <summary>
            Returns the number of arguments to the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IUltraCalcFunctionToken.FunctionName">
            <summary>
            The name of the UltraCalcFunction represented by the token. 
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.IUltraCalcFunctionToken.FunctionOperator">
            <summary>
            Returns an UltraCalcOperatorFunction indicating the operator that the function reprsents or null of the function does not represent an operator.   
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionToken.ArgumentCount">
            <summary>
            Returns the number of arguments to the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionToken.Infragistics#Excel#CalcEngine#IUltraCalcFunctionToken#FunctionName">
            <summary>
            The name of the UltraCalcFunction represented by the token. 
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionToken.Infragistics#Excel#CalcEngine#IUltraCalcFunctionToken#FunctionOperator">
            <summary>
            Returns an UltraCalcOperatorFunction indicating the operator that the function reprsents or null of the function does not represent an operator.   
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFormulaTokenCollection">
            <summary>
            Provides method and properties to manage a collection of <b>UltraCalcFormulaTokens.</b>
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFormulaTokenCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFormulaTokenCollection.Add(Infragistics.Excel.CalcEngine.UltraCalcFormulaToken)">
            <summary>
            Add a token to the collection.
            </summary>
            <param name="token">Token to add to collection.</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFormulaTokenCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">Array that is the destination of the copy.</param>
            <param name="index">Index into array to begin copying collection elements.</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFormulaTokenCollection.GetEnumerator">
            <summary>
            Returns the collection enumerator
            </summary>
            <returns>Collection enumerator</returns>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcFormulaTokenCollection.TokenArray">
            <summary>
            Underlying ArrayList used to manage token collection.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFormulaTokenCollection.IsSynchronized">
            <summary>
            Denotes whether the collection is thread-safe.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFormulaTokenCollection.Count">
            <summary>
            Returns the number of collection elements.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFormulaTokenCollection.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.ExcelCalcFunction">
            <summary>
            Base class for formula functions.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcFunction.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcFunction"/>
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcFunction.PerformEvaluation(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>        
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcFunction.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcFunction.GetArguments(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32,System.Boolean)">
            <summary>
            A helper method for extracting the <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcValue"/> instances from the stack.
            </summary>
            <param name="numberStack">Number stack whose values should be popped.</param>
            <param name="argumentCount">Number of items to pop/evaluate from the number stack</param>
            <param name="skipEmptyValues">True to ignore values whose IsNull returns true; otherwise false to include empty items in the list.</param>
            <returns>An array of UltraCalcValue instances removed from the number stack.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcFunction.IsAlwaysDirty">
            <summary>
            Indicates whether the results of the function is always dirty.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcFunction.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcFunction.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcFunction.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.BuiltInFunctionBase">
            <summary>
            Base class for the built in functions.
            </summary>	
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionAverage">
            <summary>
            Calculates an average (arithmetic mean) for a series of numbers.
            </summary>
            <remarks>
            <p class="body">AVERAGE(value1, value2, ...)</p>
            <p class="body">Value1, value2, ... are one or more numeric values or
            references to numeric values. An average (arithmetic mean) is calculated
            by taking the sum of all values, and dividing by the number of values.</p>
            <p class="body">Each value is equally weighted. To obtain a weighted average,
            you can multiply each value by a weight in the expression.</p>
            <code>
            AVERAGE( [Value1]*[Weight1], [Value2]*[Weight2], [Value3]*[Weight3])
            </code>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionAverage.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAverage.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAverage.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAverage.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionSum">
            <summary>
            Adds a series of numbers to obtain a total amount.
            </summary>
            <remarks>
            <p class="body">SUM(value1,value2,...)</p>
            <p class="body">Value1, value2, ... are references for which you want to find the total value.
            Text representations of numbers and literal numeric constants that you specify in the list of
            arguments will be included in the sum. If <em>value</em> is a column or vector reference then
            the sum will be taken of all cells or values contained by the reference. Any error values in
            the argument list, or text that is not convertible to a numeric value, will produce an error.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSum.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSum.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSum.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSum.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionUnaryPlus">
            <summary>
            '+' Unary plus formula operator (+20)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionUnaryPlus.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionUnaryPlus.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionUnaryPlus.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionUnaryPlus.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionUnaryMinus">
            <summary>
            '-' Negation formula operator (-20)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionUnaryMinus.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionUnaryMinus.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionUnaryMinus.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionUnaryMinus.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionPlus">
            <summary>
            '+' Addition formula operator (1+2)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionPlus.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPlus.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPlus.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPlus.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinus">
            <summary>
            '-' Subtraction formula operator (3-2)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinus.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinus.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinus.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinus.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionPercent">
            <summary>
             '%' Percent formula operator (20%)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionPercent.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPercent.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPercent.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPercent.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMultiply">
            <summary>
            '*' Multiplication formula operator (2*3)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMultiply.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMultiply.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMultiply.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMultiply.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDivide">
            <summary>
            '/' Division formula operator (3/2)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDivide.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDivide.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDivide.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDivide.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionConcat">
            <summary>
            '&amp;' formula operator used to concatenate two strings. ("First" &amp; "Second")
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionConcat.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionConcat.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionConcat.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionConcat.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionConcatenate">
            <summary>
            Combines two or more text values into a single text string.
            </summary>
            <remarks>
            <p class="body">CONCATENATE(text1, text2, ..., textN)</p>
            <p class="body">Text1, text2, ..., textN are multiple text values that
            you want to concatenate into one text string. These text values may be
            text strings, numbers (which will be converted into text), or a single
            value reference (such as a cell reference) containing such a value.</p>
            <p class="body">This function provides for elementary text processing
            in UltraCalc, such as when building message text or appending some
            connective text or punctuation to the results of evaluating other
            text-bearing expressions.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionConcatenate.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionConcatenate.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionConcatenate.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionConcatenate.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionEqual">
            <summary>
            '=' Equality formula operator (Price = 200)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionEqual.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionEqual.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionEqual.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionEqual.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionNE">
            <summary>
            "&lt;&gt;" Inequality formula operator (Price &lt;&gt; 200)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionNE.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNE.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNE.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNE.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionLT">
            <summary>
            '&lt;' Less than formula operator (Price &lt; 200)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionLT.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLT.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLT.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLT.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionLE">
            <summary>
            "&lt;=" Less than or equal formula operator (Price &lt;= 200)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionLE.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLE.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLE.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLE.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionGT">
            <summary>
            "&gt;" Greater than formula operator (Price > 200)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionGT.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionGT.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionGT.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionGT.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionGE">
            <summary>
            "&gt;=" Greater than or equal formula operator (Price >= 200)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionGE.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionGE.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionGE.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionGE.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionExpon">
            <summary>
            "^" Exponentiation formula operator (3^2)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionExpon.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionExpon.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionExpon.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionExpon.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIf">
            <summary>
            Chooses between two outcomes (or UltraCalc expressions to evaluate) based on
            the result of a logical test on a value or UltraCalc expression you specify.
            </summary>
            <remarks>
            <p class="body">IF( boolean_test, result_if_true, [result_if_false])</p>
            <p class="body">Boolean_test is a value (or an UltraCalc expression) which the IF function
            evaluates to produce a boolean value of either TRUE or FALSE. The outcome of
            this test determines which result will be returned by the function.
            </p>
            <p class="body">Result_if_true is a value (or the outcome of another
            UltraCalc expression) that will be returned only when boolean_test has
            evaluated to the boolean value, TRUE.</p>
            <p class="body">Result_if_false is a value (or the outcome of another
            UltraCalc expression) that will be returned only when boolean_test has
            evaluated to the boolean value, FALSE.</p>
            <p class="body">The IF function allows you to write an UltraCalc expression
            that branches to one expression (when the boolean_test is TRUE) or another
            (when the boolean_test is FALSE) based on an arbitrary condition you have
            specified.</p>
            <p class="body">The result_if_false is not specified and boolean_test is FALSE, the 
            IF function will return FALSE.</p>
            <p class="note">If boolean_test's evaluation produces an error value then
            neither Result_if_true nor Result_if_false will be evaluated. Instead, the
            IF function returns the error value from its evaluation of boolean_test.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIf.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIf.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIf.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIf.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionAbs">
            <summary>
            Calculates a number's absolute value.
            </summary>
            <remarks>
            <p class="body">ABS( value)</p>
            <p class="body">A number's absolute value is it's value without any
            sign. It represents the magnitude of a value while ignoring it's
            direction (positive or negative) on a number line or vector.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionAbs.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAbs.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAbs.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAbs.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMod">
            <summary>
            Gets the remainder following integer division of two numbers.
            </summary>
            <remarks>
            <p class="body">MOD(numerator, denominator)</p>
            <p class="body">Numerator is the number being divided by <em>denominator</em>.
            When <em>denominator</em> can only be taken from <em>numerator</em>
            a certain whole number of types (the quotient), any leftover is the
            remainder.</p>
            <p class="body">Denominator is the number dividing the <em>numerator</em>.
            Any remainder will have the sign of the <em>denominator</em>. This number
            cannot be zero, otherwise the MOD() function returns a #DIV/0 error.</p>
            <p class="body">If you want to perform integer division on these two numbers
            then use the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionQuotient">QUOTIENT()</see> function.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMod.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMod.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMod.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMod.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionQuotient">
            <summary>
            Performs integer division on two numbers disregarding any remainder.
            </summary>
            <remarks>
            <p class="body">QUOTIENT(numerator, denominator)</p>
            <p class="body">Numerator is a numeric value that will be divided
            by the <em>denominator</em>. It is sometimes called the dividend.
            </p>
            <p class="body">Denominator is the numeric value that divides the
            <em>numerator</em>. It is sometimes called the divisor.  It cannot
            be zero or a #DIV/0 error value will be returned.
            </p>
            <p class="body">When either the <em>numerator</em> or the 
            <em>denominator</em> is not a number, the QUOTIENT() function
            returns an error value (#VALUE!).</p>
            <p class="body">If you need the remainder from an integer division,
            use the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMod">MOD()</see> function.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionQuotient.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionQuotient.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionQuotient.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionQuotient.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionProduct">
            <summary>
            Multiplies a series of numbers to return their total product.
            </summary>
            <remarks>
            <p class="body">PRODUCT( value1, value2, ..., valueN)</p>
            <p class="body">Value1 is the first number (the multiplicand) in a
            series of numbers that you want to multiply.</p>
            <p class="body">Value2 is the second number (the first multiplier)
            in a series of numbers that you want to multiply.</p>
            <p class="body">Value<em>N</em> is the last number (the last multiplier)
            in a series of numbers that you want to multiply.</p>
            <p class="body">This function offers a convenience when you need to
            multiply many numbers or expressions at one time.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionProduct.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionProduct.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionProduct.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionProduct.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionPower">
            <summary>
            Raises the specific number to a power.
            </summary>
            <remarks>
            <p class="body">POWER(value, exponent)</p>
            <p class="body">Value is a numeric value or reference to a numeric value
            which you want to raise to a power.</p>
            <p class="body">Exponent is a real number power to which <em>value</em>
            is to be raised. Imaginary exponents are not supported.</p>
            <p class="body">Common applications of the POWER() function occur when
            you need to multiply a number against itself multiple times. For example,
            it is common in many computer applications to create bit mask values by
            raising the value 2 to integer exponents, which produce a sequence such
            as (1, 2, 4, 8, 16, 32, 64, 128, ...)</p>
            <p class="body">The POWER() function additionally supports fractional
            exponents, and can be used to emulate other functions such as the quad
            root (raising to an exponent of 0.25, which is 1/4) or the inverse
            square (raising to an exponent of -2.0).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionPower.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPower.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPower.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPower.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionInt">
            <summary>
            Converts a real numeric value (which may have a fractional part)
            into a whole number.
            </summary>
            <remarks>
            <p class="body">INT(value)</p>
            <p class="body">Value is a real numeric value that you want to
            convert into a whole number. INT() is a more specialized version
            of the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrunc">TRUNC()</see> function
            because it always produces integer values (whereas the TRUNC()
            function allows you to specify a precision at which to truncate
            the numeric value.)</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionInt.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionInt.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionInt.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionInt.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrunc">
            <summary>
            Truncates the fractional portion of a numeric value to produce an integer.
            </summary>
            <remarks>
            <p class="body">TRUNC(value, number_of_digits)</p>
            <p class="body">Value is a numeric value or reference to a numeric value
            that you want to truncate.</p>
            <p class="body">Number_of_digits specifies the precision at which truncation
            should occur. By default, truncation occurs zero places right of the decimal
            point which will produce an integer.</p>
            <p class="body">Truncation always discards the fractional value, causing the
            <em>Value</em> to move closer to zero (whether it was positive or negative
            before the truncation). It differs from the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionRound">ROUND()</see>
            function in that the value always changes to a lesser value.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrunc.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrunc.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrunc.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrunc.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionCount">
            <summary>
            Counts how many cells have numeric or date/time values. 
            </summary>
            <remarks>
            <p class="body">COUNT(Value1, Value2, ..., ValueN)</p>
            <p class="body">Value1, value2, ... valueN can be references to different data structures,
            such as columns. Each numeric or date/time value is counted. Empty, error, boolean or text
            values that are not convertible into numeric values are not counted.</p>
            <p class="body">When a reference is a range reference, only those numeric and date/time
            values within the range will be counted.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionCount.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCount.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCount.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCount.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrue">
            <summary>
            A constant function always returning the TRUE value of Boolean
            logic.
            </summary>
            <remarks>
            <p class="body">TRUE() will always evaluate to the boolean value
            of TRUE. It takes no arguments.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrue.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrue.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrue.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrue.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionFalse">
            <summary>
            A constant function always returning the FALSE value of Boolean
            logic.
            </summary>
            <remarks>
            <p class="body">FALSE() will always evaluate to the boolean value
            of FALSE. It takes no arguments.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionFalse.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFalse.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFalse.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFalse.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionNot">
            <summary>
            Logical-NOT returns the inverse boolean value of it's argument.
            </summary>
            <remarks>
            <p class="body">NOT(boolean1)</p>
            <p class="body">Boolean1 is any boolean (TRUE or FALSE) value, or
            conditional statement (made up of any UltraCalc expression which
            itself evaluates to a boolean TRUE or FALSE value) to be inverted.</p>
            <p class="body">If boolean1 was TRUE, then the Logical-NOT would
            return FALSE. If boolean1 was FALSE, then the Logical-NOT would
            return TRUE.</p>
            <p class="note">If Boolean1 is an UltraCalc expression that evaluates
            to an error value, then the result of a Logical-NOT operation is
            undefined because an error value is neither TRUE nor FALSE.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionNot.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNot.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNot.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNot.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionAnd">
            <summary>
            Logical-AND returns the boolean value, FALSE, if at least one argument has a value of FALSE.
            When <em>all</em> arguments are TRUE, then this function returns TRUE.
            </summary>
            <remarks>
            <p class="body">AND(boolean1, boolean2, ...)</p>
            <p class="body">Boolean1, boolean2, ... are a list of boolean (TRUE or FALSE) values or
            conditional statements (any UltraCalc expression which itself evaluates to a boolean
            TRUE or FALSE value) to be evaluated for the constraint that all arguments should be
            TRUE (or conversely, that at least one argument should be FALSE.)</p>
            <p class="body">All arguments are tested (<em>i.e.</em>, the logical-AND function
            does not use "short-circuit" evaluation, in which the function can stop executing
            as soon as the first argument having the boolean value, FALSE, has been processed.)</p>
            <p class="note">This function stops evaluating immediately when any argument results in
            an error value. An error value is neither TRUE nor FALSE, therefore the return value of
            the logical-AND function is undefined.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionAnd.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAnd.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAnd.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAnd.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionOr">
            <summary>
            Logical-OR returns the boolean value, TRUE, if at least one argument has a value of TRUE.
            When <em>all</em> arguments are FALSE, then this function returns FALSE.
            </summary>
            <remarks>
            <p class="body">OR(boolean1, boolean2, ...)</p>
            <p class="body">Boolean1, boolean2, ... are a list of boolean (TRUE or FALSE) values or
            conditional statements (any UltraCalc expression which itself evaluates to a boolean
            TRUE or FALSE value) to be evaluated for the constraint that at least one argument
            should be TRUE (or conversely, that all arguments should be FALSE.)</p>
            <p class="body">All arguments are tested (<em>i.e.</em>, the logical-OR function
            does not use "short-circuit" evaluation, in which the function can stop executing
            as soon as the first argument having the boolean value, TRUE, has been processed.)</p>
            <p class="note">This function stops evaluating immediately when any argument results in
            an error value. An error value is neither TRUE nor FALSE, therefore the return value of
            the logical-OR function is undefined.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionOr.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOr.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOr.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOr.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMin">
            <summary>
            Gives you the smallest numeric value out of a series. 
            </summary>
            <remarks>
            <p class="body">MIN(Value1, value2, ..., valueN)</p>
            <p class="body">Value1, value2, ... valueN are any number of numeric values or references to
            numeric values from which you want the minimum value found. Arguments may be numbers, boolean
            values, text values convertible into numbers, or empty. Error values and text values that are
            not convertible into numbers will produce an error.</p>
            <p class="body">The minimum value for a series of numbers can be it's largest magnitude
            negative number because larger magnitude negative numbers are less than smaller magnitude
            negative numbers. For example, given the expression MIN( -1500, -50, 5, 150), the return value
            is -1500 and not 5. To determine the numeric value with the smallest magnitude you would
            use the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionAbs">ABS()</see> function on each argument. The
            following example would produce a minimum value of 5.</p>
            <code>MIN( ABS(-1500), ABS(-50), ABS(5), ABS(150))</code>
            <p class="body">When the argument list is empty, MIN() returns zero.</p>
            <seealso cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMax">MAX()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMin.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMin.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMin.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMin.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMax">
            <summary>
            Gives you the largest numeric value out of a series. 
            </summary>
            <remarks>
            <p class="body">MAX(Value1, value2, ..., valueN)</p>
            <p class="body">Value1, value2, ... valueN are any number of numeric values or references to numeric
            values from which you want the maximum value found. Arguments may be numbers, boolean
            values, text values convertible into numbers, or empty. Error values and text values
            that are not convertible into numbers will produce an error.</p>
            <p class="body">When the argument list is empty, MAX() returns zero.</p>
            <seealso cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMin">MIN()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMax.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMax.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMax.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMax.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionExp">
            <summary>
            Calculates the mathematical constant, e, raised to the specified power.
            </summary>
            <remarks>
            <p class="body">EXP(exponent)</p>
            <p class="body">Exponent is the power to which the base, e, is raised.
            This gives the function it's characteristic "exponential" growth.</p>
            <p class="body">Euler's Number, e, is the value 2.718281828459..., and
            is also the base of the natural logarithm. You can represent the constant
            e within your UltraCalc formula by specifying EXP(1). The exponential
            function (and natural logarithm) have many applications in mathematics,
            engineering, and for modeling behavioral and statistical distributions 
            commonly observed in nature and the social sciences.</p>
            <seealso cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionLn">LN()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionExp.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionExp.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionExp.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionExp.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionRound">
            <summary>
            Rounds the fractional portion of a numeric value up or down to produce an
            integer.
            </summary>
            <remarks>
            <p class="body">ROUND(value, number_of_digits)</p>
            <p class="body">Value is a numeric value or reference to a numeric value
            that you want to round up or down.</p>
            <p class="body">Number_of_digits specifies the precision at which rounding
            should occur. This will be the place value which UltraCalc examines to round
            up or down. By default, rounding occurs zero places right of the decimal point
            produces an integer.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionRound.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRound.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRound.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRound.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionPi">
            <summary>
            Returns the mathematical constant for the Greek letter, pi.
            </summary>
            <remarks>
            <p class="body">PI()</p>
            <p class="body">The mathematical constant pi represents the relationship
            between a circle's diameter and it's circumference. It is also the constant
            relating the square of a circle's radius with the surface area of the circle.
            It has a great many applications in mathematics, geometry, the sciences, and
            engineering.</p>
            <p class="body">The constant pi is a non-terminating decimal number, although
            UltraCalc approximates it to 15 significant digits of precision (3.14159265358979).</p>
            <p class="body">A common use of the PI function in UltraCalc is to convert
            a measurement in radians which is the form in which trigonometric functions
            take their arguments, and the more conventional degrees of arc. This conversion
            can be accomplished by multiplying the radian measurement by PI()/180. The
            following table describes some benchmarks for comparison between radians and
            degrees.</p>
            <table border="0">
            <thead>
            <th>Radians</th><th>Degrees</th><th>Turns of a wheel (common example)</th>
            </thead>
            <tbody>
            <tr><td>0</td><td>0</td><td>no turns</td></tr>
            <tr><td>PI/4</td><td>45</td><td>one-eighth turn</td></tr>
            <tr><td>PI/2</td><td>90</td><td>one-quarter turn</td></tr>
            <tr><td>PI</td><td>180</td><td>one-half turn</td></tr>
            <tr><td>2x PI</td><td>360</td><td>one complete turn</td></tr>
            <tr><td>3x PI</td><td>540</td><td>one and one-half turn</td></tr>
            </tbody>
            </table>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionPi.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPi.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPi.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPi.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionSqrt">
            <summary>
            Calculates the square root of a number.
            </summary>
            <remarks>
            <p class="body">SQRT(value)</p>
            <p class="body">Value is the numeric value or reference to a numeric
            value which you are calculating the square root of. Only real roots
            are supported, therefore if <em>value</em> is negative (which would
            produce an imaginary root) the SQRT() function will return an error
            value (#NUM!).</p>
            <p class="body">The square root is the number whose product, when
            the number is multiplied against itself (squared), is <em>value</em>.
            Note that it is possible to multiply two negative square roots to
            produce the same positive <em>value</em>. By convention, the SQRT()
            function only returns the positive root.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSqrt.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSqrt.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSqrt.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSqrt.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionCos">
            <summary>
            Calculates the trigonometric cosine of a specified angle (measured in
            radians).
            </summary>
            <remarks>
            <p class="body">COS(value)</p>
            <p class="body">Value is the angle measured in radians for which you want
            to take the cosine. If your argument must be in degrees, multiply it by
            PI()/180 to convert it into radians.</p>
            <p class="body">The cosine is an sinusoidal function with a period of 2*PI()
            radians. It's value is always between 1 and -1. It behaves like the sine function,
            <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionSin">SIN()</see>, with a phase shift (phi) of -PI()/4
            radians.</p>
            <p class="body">The cosine function value derives from the geometric ratio
            between the length of the adjacent (non-hypotenuse) leg to the hypotenuse of
            a right triangle, when the hypotenuse has a length of one. It is continuous
            because at intervals of PI() radians the length of the adjacent leg and the
            hypotenuse are equal.</p>
            <p class="body">Another way of looking at this function is to imagine the
            hypotenuse is the radius, r, of a unit circle centered on a Cartesian plane
            with x- and y- axes.  At any point on the edge of the unit circle, the
            hypotenuse makes an angle, theta, with the x-axis.  The cosine function
            value of the angle theta is the distance from the center of the circle
            to the point in the direction of the x-axis.  Applied in this fashion,
            the COS() function can be used to convert between Cartesian and Polar
            coordinate systems.</p>
            <p class="body">Both interpretations are equivalent because if you drop
            a line from a point on the unit circle that intersects the x-axis at a
            right angle you form a right triangle.</p>
            <p class="body">These trigonometric concepts appear frequently in many
            engineering, architectural and scientific applications.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionCos.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCos.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCos.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCos.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionACos">
            <summary>
            Returns the angle (measured in radians) having the specified value of the trigonometric cosine function.
            </summary>
            <remarks>
            <p class="body">ACOS(value)</p>
            <p class="body">Value is the real number result of the cosine function taken of an angle you want
            to find. The legal values of the cosine function are from -1 to 1. An inverse cosine
            by default will return the normal angle from 0 up to PI. This is because there are
            several angles which may have an identical value of their cosine. For example, the
            angles -PI/2, PI/2, 3PI/2, etc., all have a cosine of zero. You can find alternate
            angles by adding (or subtracting) any multiple of PI radians to the normal angle
            returned by the inverse cosine function.</p>
            <p class="body">You can convert the result of the inverse cosine function from
            radians into degrees by multiplying it by 180/PI().</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionACos.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionACos.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionACos.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionACos.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionCosh">
            <summary>
            Returns the angle (measured in radians) having the specified value of it's hyperbolic cosine function.
            </summary>
            <remarks>
            <p class="body">ACOSH(value)</p>
            <p class="body">Value is the hyperbolic cosine of some angle (measured in radians) that you want
            to find. As you might expect, the values of the hyperbolic cosine function (see the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionCosh">COSH</see> function)
            increase at a hyperbolic rate, but one consequence is that these ever larger changes in the hyperbolic
            cosine will correspond to ever smaller changes in the angle. This relationship is intrinsic to many of
            the mathematical and engineering applications of the inverse hyperbolic cosine function, such as when
            resistance or strain builds up on a body increasingly as it is rotated (hysteresis).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionCosh.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCosh.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCosh.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCosh.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionSin">
            <summary>
            Calculates the trigonometric sine of a specified angle (measured in
            radians).
            </summary>
            <remarks>
            <p class="body">SIN(value)</p>
            <p class="body">Value is the angle measured in radians for which you want
            to take the cosine. If your argument must be in degrees, multiply it by
            PI()/180 to convert it into radians.</p>
            <p class="body">The sine is an sinusoidal function with a period of 2*PI()
            radians. It's value is always between 1 and -1.</p>
            <p class="body">The sine function value derives from the geometric ratio
            between the length of a right triangle's hypotenuse and the length of the
            opposite leg, when the hypotenuse has a length of one.  It is a continuous
            function because at intervals of PI() radians the length of the opposite
            leg and the hypotenuse are equal.</p>
            <p class="body">Another way of looking at this function is to imagine the
            hypotenuse is the radius, r, of a unit circle centered on a Cartesian plane
            with x- and y- axes.  At any point on the edge of the unit circle, the
            hypotenuse makes an angle, theta, with the x-axis.  The sine function
            value of the angle theta is the distance from the center of the circle
            to the point in the direction of the y-axis.  Applied in this fashion,
            the SIN() function can be used to convert between Cartesian and Polar
            coordinate systems.</p>
            <p class="body">Both interpretations are equivalent because if you drop a
            line from a point on the unit circle that intersects the y-axis at a right
            angle you form a right triangle.</p>
            <p class="body">These trigonometric concepts appear frequently in many
            engineering, architectural and scientific applications.</p>
            <seealso cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionCos">COS()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSin.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSin.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSin.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSin.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionSinh">
            <summary>
            Calculates the hyperbolic sine of a specified angle measured in radians.
            </summary>
            <remarks>
            <p class="body">SINH(value)</p>
            <p class="body">Value is an angle measured in radians for which you want to
            calculate the hyperbolic sine. If your angle is measured in degrees, 
            multiply it by PI()/180 to convert into radians. </p>
            <p class="body">Many applications in mathematics and physics, for example
            determining the gravitational potential of a cylinder, make use of the
            hyperbolic sine function's characteristics.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSinh.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSinh.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSinh.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSinh.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionASin">
            <summary>
            Returns the angle (measured in radians) having the specified value of the trigonometric sine function.
            </summary>
            <remarks>
            <p class="body">ASIN(value)</p>
            <p class="body">Value is the sine value of the angle you want. Legal sine values are
            confined to real numbers from -1 to 1, inclusive.</p>
            <p class="body">The angle returned will be between -PI()/2 and PI()/2 radians. To convert
            this angle into degrees, multiply by PI()/180.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionASin.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionASin.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionASin.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionASin.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionTan">
            <summary>
            Calculates the trigonometric tangent of a specified angle (measured in
            radians).
            </summary>
            <remarks>
            <p class="body">TAN(value)</p>
            <p class="body">Value is the angle measured in radians for which you want
            to take the tangent. If your argument must be in degrees, multiply it by
            PI()/180 to convert it into radians.</p>
            <p class="body">The tangent can have a value from -INF to +INF, however it
            is undefined at intervals of every PI()/2 radians +/- PI() radians.</p>
            <p class="body">The tangent function value derives from a well-known geometric
            ratio between the length of the opposite and the adjacent (non-hypotenuse) leg
            of a right triangle. All 3 angles inside of any triangle must add up to exactly
            PI() radians, and in a right triangle the angle opposite the hypotenuse must be
            PI()/2 radians. Given these facts, it is not possible for either of the other
            two angles within the triangle to reach PI()/2 radians themselves. If you choose
            an angle (other than the triangle's right angle) which approaches PI()/2 radians
            then the remaining angle must approach 0 radians. The tangent function value tells
            you in these circumstances how the leg of the right triangle opposite your angle
            approaches infinite length. These calculations have important applications in
            architecture and engineering.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionTan.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTan.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTan.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTan.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionTanh">
            <summary>
            Calculates the hyperbolic tangent of a specified angle measured in radians.
            </summary>
            <remarks>
            <p class="body">TANH(value)</p>
            <p class="body">Value is an angle measured in radians for which you want to
            calculate the hyperbolic tangent. If your angle is measured in degrees, 
            multiply it by PI()/180 to convert into radians. The hyperbolic tangent 
            has a range from -1 to 1.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionTanh.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTanh.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTanh.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTanh.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionATan">
            <summary>
            Calculates the normalized angle (measured in radians) which has the
            specified tangent function value.
            </summary>
            <remarks>
            <p class="body">ATAN(value)</p>
            <p class="body">Value is a number containing a tangent function value
            that you want to retrieve the angle of. This function returns an angle
            of between PI()/2 and -PI()/2. Although the tangent function is undefined
            for values of PI()/2 and -PI()/2, the return value of this function is
            rounded to these values if <em>Value</em> is +INF or -INF, respectively.</p>
            <p class="body">This function is sometimes referred to as the inverse
            tangent function or the arctangent.</p>
            <p class="body">The angle returned is the principal value, as
            there exist an uncountable number of alternative angles satisfying
            the requirement of having <em>Value</em> as their tangent function
            value, at regular intervals of +/- PI() to either side of this
            principal value.</p>
            <p class="body">If you require a result in degrees, multiply the
            arctangent by 180/PI().</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionATan.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionATan.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionATan.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionATan.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionATan2">
            <summary>
            Calculates the angle made with the x-axis on a Cartesian coordinate
            plane by the specified (x, y) coordinates.
            </summary>
            <remarks>
            <p class="body">ATAN2(x_ordinate, y_abscissa)</p>
            <p class="body">X_ordinate is a number representing the distance along
            the x-axis of a Cartesian point. It may also be thought of as the
            adjacent leg of a right triangle, where the right angle is made by
            dropping a perpendicular line from (<em>x_ordinate</em>, <em>y_abscissa</em>)
            to the point (<em>x_ordinate</em>, 0) on the x-axis.</p>
            <p class="body">Y_abscissa is a number representing the distance along
            the y-axis of a Cartesian point. It may also be thought of as the
            opposite leg of the right triangle constructed above.</p>
            <p class="body">This variation on the arctangent (or inverse tangent function)
            calculates for you the angle, theta, made with the x-axis when you extend a
            line segment from the origin at (0, 0) to your specified coordinates at
            (<em>x_ordinate</em>, <em>y_abscissa</em>). This line segment can also be
            seen to be the hypotenuse of a right triangle, or the radius of the circle
            on which the point, (<em>x_ordinate</em>, <em>y_abscissa</em>), sits on
            the edge.  This function is another way of looking at the trigonometric
            tangent function value that is useful in many UltraCalc applications
            because it affords you a more convenient parameterization for some tasks,
            such as converting from Cartesian to Polar coordinate systems.</p>
            <p class="body">The return value of this function is within the range of
            PI()/2 and -PI()/2 measured in radians. If you need to convert this value
            into degrees then multiply the result by 180/PI().</p>
            <seealso cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionATan">ATAN()</seealso>
            <seealso cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionTan">TAN()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionATan2.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionATan2.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionATan2.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionATan2.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionFloor">
            <summary>
            Calculates the next lesser whole number for a specified numeric
            value.
            </summary>
            <remarks>
            <p class="body">FLOOR(value)</p>
            <p class="body">Value is a real numeric value to be rounded down
            to the next lesser whole number (also called an integer). FLOOR()
            behaves differently from the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionInt">INT()</see>
            function because when <em>value</em> is negative, the "next lesser
            whole number" will be a number having greater magnitude (i.e., it
            becomes more negative.)</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionFloor.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFloor.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFloor.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFloor.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionCeiling">
            <summary>
            Returns the smallest whole number greater than or equal to the given number
            </summary>
            <remarks>
            <p class="body">
            CEILING(number)
            <p></p>
            Number   is the numeric value you want to round.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionCeiling.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCeiling.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCeiling.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCeiling.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionRand">
            <summary>
            Generates a pseudorandom number from zero up to (but not including) one.
            </summary>
            <remarks>
            <p class="body">RAND()</p>
            <p>The RAND() function will generate another pseudorandom number each time it
            is evaluated. It returns a fractional number on a unit basis, therefore
            you can use RAND() to produce numbers between 0 and <em>C</em> by multiplying
            the RAND() result by <em>C</em>. It follows that to produce a pseudorandom
            number between <em>A</em> and <em>B</em> you could translate the result by
            <em>A</em> like this:</p>
            <code>RAND() * ( [B] - [A] ) + [A]</code>
            <p class="body">The number generation of the RAND() function derives from the
            system clock, and therefore may not be entirely random. It should not be used
            for applications requiring cryptographically-strong randomness or uniform
            probability distributions.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionRand.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRand.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRand.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRand.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionLn">
            <summary>
            Calculates the natural logarithm of a specified numeric value.
            </summary>
            <remarks>
            <p class="body">LN(value)</p>
            <p class="body">Value is a real number to calculate the natural
            logarithm of. <em>Value</em> must be positive as the logarithm
            is undefined for negative values.</p>
            <p class="body">A natural logarithm is a special case of a logarithm
            having the base of Euler's Number, e (2.71828...). It is the inverse
            of the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionExp">EXP()</see> function.</p>
            <p class="body">Logarithms have many applications in mathematics,
            life and social sciences.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionLn.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLn.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLn.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLn.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionLog10">
            <summary>
            Calculates the logarithm (base 10) of a specified numeric value.
            </summary>
            <remarks>
            <p class="body">LOG10(value)</p>
            <p class="body">Value is a real number to calculate the decimal
            logarithm of. <em>Value</em> must be positive as the logarithm
            is undefined for negative values.</p>
            <p class="body">To specify your own base for a logarithm use the
            <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionLog">LOG()</see> function. To calculate
            the natural logarithm use the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionLn">LN()</see>
            function.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionLog10.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLog10.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLog10.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLog10.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionLog">
            <summary>
            Calculates a logarithm for a specified numeric value to the
            specified base.
            </summary>
            <remarks>
            <p class="body">LOG(value, base)</p>
            <p class="body">Value is a real number that you want to calculate the logarithm
            to <em>base</em> for. This number must be positive, as the logarithm
            is undefined for negative numbers.</p>
            <p class="body">Base is the base of the logarithm, which defaults to 10.</p>
            <p class="body">To calculate the natural logarithm (a logarithm to the base
            of Euler's Number, e) it is usually more convenient to call the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionLn">LN()</see>
            function.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionLog.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLog.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLog.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLog.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionNPV">
            <summary>
            Calculates an investment's Net Present Value given it's expected rate or return and the cash flow
            represented as positive numeric values (income) and negative numeric values (payments).
            </summary>
            <remarks>
            <p class="body">NPV(discountRate, value1, value2, ..., valueN)</p>
            <p class="body">DiscountRate is the investment's expected rate of return over the life of the
            investment, expressed as a percentage growth (or decline) per payment period. In some applications
            this may be the fixed interest rate. This numeric value is used to discount cash flows paid into or
            received from the investment.</p>
            <p class="body">Value1, value2, ... valueN are any number of numeric values representing cash inflows
            (as positive numbers) or cash outflows (as negative numbers). These cash flows must occur at a fixed
            period (the same period at which the <em>discountRate</em> is expressed), although some cash flows
            may be zero. The order of the sequence is important, as <em>value1</em> is assumed to occur (<em>N</em>-1)
            periods before <em>valueN</em> and will have been able to accrue that much more interest at the assumed
            <em>discountRate</em>.</p>
            <p class="body">By convention, the NPV() assumes cash flows occur at the end of each period. Consequently,
            the NPV() represents the present value as of the date one period's length before the first cash flow, 
            <em>value1</em>, has been made. If you require flexibility in when cash flows occur (the beginning or
            end of each period), consider using the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionPV">PV()</see> function. However,
            it differs from NPV() in that NPV() allows cash flows of different amounts.</p>
            <p class="body">Only numeric values or text values convertible to numeric values may be passed to this
            function. If a column or range reference is passed as a <em>value</em> argument, only numeric values or
            text values convertible to numeric values are used.</p>
            <seealso cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIRR">IRR()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionNPV.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNPV.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNPV.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNPV.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionFV">
            <summary>
            Calculates the future value of an annuity having fixed payments and assuming
            a fixed interest rate or rate of return.
            </summary>
            <remarks>
            <p class="body">FV(interestRate, nPeriod, payment, presentValue, paymentDue)</p>
            <p class="body">InterestRate is the assumed interest rate per period. The future
            value calculation assumes no change in the interest rate over the course of the
            investment. If you anticipate interest rate fluctuations, you should calculate
            the future value incrementally over shorter periods in which the interest rate
            is held constant. In some calculations, the <em>interestRate</em> may be
            synonymous with an investments' expected growth or rate of return per period.</p>
            <p class="body">NPeriod is the total number of payment periods in an annuity.
            Each payment is assumed to be of the same amount, and occur at regular fixed
            time intervals. A payment earlier in the annuity will be invested for a longer
            period of time and therefore would accrue more interest than a payment made
            later in the annuity.</p>
            <p class="body">Payment is a fixed amount invested in the annuity at each
            period. Use a negative number to represent an outflow of cash paid out, and a
            positive number to represent an inflow of cash received. Calculating a future
            value requires either a non-zero series of payments or a <em>presentValue</em>.</p>
            <p class="body">PresentValue is the value of the investment at the beginning of
            the annuity. It represents the discounted value of a series of future payments,
            which over time could be worth a greater amount because they have accrued interest.
            If the annuity has no present value, then you must specify a non-zero <em>payment</em>
            amount.</p>
            <p class="body">PaymentDue is a numeric value of either 1 or 0, and indicates whether
            payments are invested in the annuity at the beginning of each period (1) or at the end
            of each period (0).</p>
            <p class="body">The <em>interestRate</em> and <em>nPeriod</em> arguments determine the
            frequency of payments. If <em>interestRate</em> is given as an annual rate, and <em>nPeriod</em>
            is 1 then payments are once per year.  On the other hand, if <em>nPeriod</em> had been 4 then
            payments would occur quarterly. Please ensure you use consistent time values when specifying
            these arguments.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionFV.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFV.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFV.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFV.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionPV">
            <summary>
            Calculates an investment's present value by discounting what a series of fixed future payments is worth
            at a specified interest rate.
            </summary>
            <remarks>
            <p class="body">PV(interestRate, nPeriods, amount, futureValue, paymentDue)</p>
            <p class="body">InterestRate is the per-period rate of interest used to discount the future payments. For
            positive interest rates, the value of future payments diminishes (discounts) to what they are worth now.
            It is assumed you can reinvest the present value at <em>interestRate</em> to receive <em>futureValue</em>
            after <em>nPeriods</em>.</p>
            <p class="body">NPeriods are the total number of payment periods over the course of the annuity. If your
            retirement plan annuitizes in 35-years, and you make a fixed quarterly contribution into it, then you
            would use 35x4 or 140 as your total number of payment periods.</p>
            <p class="body">Amount is how much is paid (or received) each period. This <em>amount</em> must be constant
            over the course of the investment. If you need to calculate the Net Present Value of a series of variable
            payment amounts, then you should consider using the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionNPV">NPV()</see> function.</p>
            <p class="body">FutureValue is the expected cash balance of the investment at culmination. If this argument
            is omitted, it will be assumed to be zero. In the common usage scenario of calculating loan repayments, a
            future value of zero represents having a zero liability when the loan is fully repaid. When specifying a
            zero future value, ensure that <em>amount</em> is non-zero (otherwise the loan could never be repaid). In
            retirement planning, you would normally estimate the future value you would like to have when you retire.
            </p>
            <p class="body">PaymentDue is a numeric value of either 1 or 0, and indicates whether
            payments are invested in the annuity at the beginning of each period (1) or at the end
            of each period (0).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionPV.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPV.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPV.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPV.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionPmt">
            <summary>
            Calculates what the payment amount should be on a loan at a fixed interest rate requiring
            a fixed number of payments.
            </summary>
            <remarks>
            <p class="body">PMT(interestRate, nPeriods, presentValue, futureValue, paymentDue)</p>
            <p class="body">InterestRate is the interest rate for the loan.</p>
            <p class="body">NPeriods is the number of payments required to pay back the loan.</p>
            <p class="body">PresentValue is the current value of the loan (also called the principal),
            which is a lump sum that the future series of <em>nPeriods</em> payments (which accumulate
            interest at <em>interestRate</em>) is worth today.</p>
            <p class="body">FutureValue is the cash balance in the future (for a loan, this will typically
            be a loan liability balance of zero) following this series of fixed payments, accruing a fixed
            <em>interestRate</em>. If omitted, a default future value of 0 is used.</p>
            <p class="body">PaymentDue is a numeric value of either 1 or 0, and indicates whether
            payments are invested in the annuity at the beginning of each period (1) or at the end
            of each period (0).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionPmt.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPmt.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPmt.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPmt.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionNPer">
            <summary>
            Calculates an investment's number of payment periods when the payment frequency, amount,
            and interest rate are held steady.
            </summary>
            <remarks>
            <p class="body">NPER(interestRate, amount, presentValue, futureValue, paymentDue)</p>
            <p class="body">InterestRate is the rate of interest per payment period. This numeric
            value must be held fixed for the duration of the investment. If you must calculate
            financing based on changes in interest rate then you will need to break up the
            calculation into several stages over which the interest rate is held constant.</p>
            <p class="body">Amount is the payment amount due each period. This numeric value must
            be constant over the duration of the investment.</p>
            <p class="body">PresentValue is a discounted value or lump sum payment that if taken today
            and invested at the <em>interestRate</em> would be worth the same as this series of fixed
            payments in the future.</p>
            <p class="body">FutureValue is the value after the last payment has been made. If this
            numeric value is omitted it is assumed to be zero (since this function is normally used
            in calculating loan repayment you will reach zero liability when the loan is finally
            paid off.)</p>
            <p class="body">PaymentDue indicates whether payments come due at the beginning of each
            payment period (1) or at the end of each payment period (0). If left unspecified, the
            default is to assume <em>paymentDue</em> occurs at the end of each payment period.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionNPer.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNPer.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNPer.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNPer.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionEven">
            <summary>
            Rounds a positive number up and a negative number down to the nearest even integer.
            </summary>
            <remarks>
            <p class="body">
            EVEN(Number)
            <p></p>
            Number	is the value to round.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionEven.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionEven.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionEven.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionEven.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionOdd">
            <summary>
            Rounds a positive number up and a negative number down to the nearest odd integer.
            </summary>
            <remarks>
            <p class="body">
            ODD(Number)
            <p></p>
            Number is the value to round.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionOdd.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOdd.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOdd.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOdd.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionPPmt">
            <summary>
            Calculates the principal portion of a payment due on an investment or loan with periodic, fixed payments
            and having a fixed rate of interest.
            </summary>
            <remarks>
            <p class="body">PPMT(interestRate, periodNumber, nPeriods, presentValue, futureValue, paymentDue)</p>
            <p class="body">InterestRate is a fixed rate of interest per period. This function assumes there
            is one payment made on each period, therefore in cases where you want to calculate quarterly or
            monthly payments you should adjust an annual <em>interestRate</em> accordingly by dividing it 
            by the number of payments per year.</p>
            <p class="body">PeriodNumber identifies the period of the current payment, where the first payment
            has the number 1. The <em>periodNumber</em> must not exceed the total number of periods (<em>nPeriods</em>).</p>
            <p class="body">NPeriods is the total number of payments over the course of this investment or loan.</p>
            <p class="body">PresentValue is the discounted value of this series of future payments, if you could take
            a lump sum payment today and invest it at the fixed <em>interestRate</em> until the future date when this
            investment or loan had been repaid.</p>
            <p class="body">FutureValue is the expected value of this series of payments after the last payment has
            been made, where all previous payments have been accumulating interest at the fixed <em>interestRate</em>.
            When omitted, such as when this function is used for calculating loan payments that reduce an outstanding
            liability, the future value is assumed to be zero.</p>
            <p class="body">PaymentDue is a numeric value indicating that payments are due at the beginning of each period (1)
            or at the end of each period (0).</p>
            <p class="body">The PPMT() function calculates the portion of a fixed payment attributed to principal. If you
            need to calculate the portion of a fixed payment repaying interest then use the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIPmt">IPMT()</see>
            function. To calculate fixed payment amounts, use the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionPmt">PMT()</see> function.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionPPmt.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPPmt.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPPmt.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPPmt.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIPmt">
            <summary>
            Calculates the interest portion of a payment due on an investment or loan with periodic, fixed payments
            and having a fixed rate of interest.
            </summary>
            <remarks>
            <p class="body">IPMT(interestRate, periodNumber, nPeriods, presentValue, futureValue, paymentDue)</p>
            <p class="body">InterestRate is a fixed rate of interest per period. This function assumes there
            is one payment made on each period, therefore in cases where you want to calculate quarterly or
            monthly payments you should adjust an annual <em>interestRate</em> accordingly by dividing it 
            by the number of payments per year.</p>
            <p class="body">PeriodNumber identifies the period of the current payment, where the first payment
            has the number 1. The <em>periodNumber</em> must not exceed the total number of periods (<em>nPeriods</em>).</p>
            <p class="body">NPeriods is the total number of payments over the course of this investment or loan.</p>
            <p class="body">PresentValue is the discounted value of this series of future payments, if you could take
            a lump sum payment today and invest it at the fixed <em>interestRate</em> until the future date when this
            investment or loan had been repaid.</p>
            <p class="body">FutureValue is the expected value of this series of payments after the last payment has
            been made, where all previous payments have been accumulating interest at the fixed <em>interestRate</em>.
            When omitted, such as when this function is used for calculating loan payments that reduce an outstanding
            liability, the future value is assumed to be zero.</p>
            <p class="body">PaymentDue is a numeric value indicating that payments are due at the beginning of each period (1)
            or at the end of each period (0).</p>
            <p class="body">The IPMT() function calculates the portion of a fixed payment attributed to interest. If you
            need to calculate the portion of a fixed payment repaying loan principal then use the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionPPmt">PPMT()</see>
            function. To calculate fixed payment amounts, use the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionPmt">PMT()</see> function.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIPmt.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIPmt.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIPmt.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIPmt.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionLower">
            <summary>
            Converts a text value to all lowercase letters.
            </summary>
            <remarks>
            <p class="body">LOWER(text_value)</p>
            <p class="body">Text_value is a piece of text you want converted into lowercase. The invariant
            culture is used to translate characters, therefore this function may not be suitable for use
            with localizable text values.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionLower.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLower.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLower.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLower.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionUpper">
            <summary>
            Converts all lowercase letters in a text string to uppercase.
            </summary>
            <remarks>
            <p class="body">UPPER(text_value)</p>
            <p class="body">Text_value is the text you want to convert to uppercase. UPPER does not change characters in text that are not letters.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionUpper.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionUpper.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionUpper.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionUpper.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionLeft">
            <summary>
            Gets the leftmost characters from a text value, up to the specified number of characters.
            </summary>
            <remarks>
            <p class="body">LEFT(text_value, num_chars)</p>
            <p class="body">Text_value is a piece of text or reference to some text starting with
            a substring you want to retrieve.</p>
            <p class="body">Num_chars indicate the number of characters retrieved from the beginning
            of <em>text_value</em>. An error value is returned if this argument is less than zero.
            If this argument exceeds the length of <em>text_value</em>, then all of <em>text_value</em>
            is retrieved. If omitted, the first character of <em>text_value</em> is retrieved.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionLeft.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLeft.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLeft.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLeft.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionRight">
            <summary>
            Gets the rightmost characters from a text value, up to the specified number of characters.
            </summary>
            <remarks>
            <p class="body">RIGHT(text_value, num_chars)</p>
            <p class="body">Text_value is a piece of text or reference to some text ending with
            a substring you want to retrieve.</p>
            <p class="body">Num_chars indicate the number of characters retrieved from the end
            of <em>text_value</em>. An error value is returned if this argument is less than zero.
            If this argument exceeds the length of <em>text_value</em>, then all of <em>text_value</em>
            is retrieved. If omitted, the last character of <em>text_value</em> is retrieved.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionRight.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRight.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRight.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRight.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMid">
            <summary>
            Gets a specified number of characters from the middle of a text string, starting from a specified position in that string.
            </summary>
            <remarks>
            <p class="body">MID(text_value, starting_point, character_count)</p>
            <p class="body">Text_value is a piece of text containing the substring you want to retrieve, when you know
            the position and length of your desired substring.</p>
            <p class="body">Character_count specifies how long of a substring to retrieve from <em>text_value</em>
            measured as a number of characters. If the requested length, when added to the specified <em>starting_point</em>,
            exceeds the length of <em>text_value</em> then the remainder of the string starting at <em>starting_point</em>
            is returned.</p>
            <p class="body">Starting_point is the one-based position within <em>text_value</em> of the first character
            in the substring you want to retrieve. If this argument exceeds the length of <em>text_value</em> then the
            function will return an empty string.</p>
            <p class="body">If either <em>character_count</em> or <em>starting_point</em> has a negative value, or
            evaluate to an error value, then the function returns an error value.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMid.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMid.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMid.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMid.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrim">
            <summary>
            Removes any leading or trailing spaces from a text value, and normalizes runs of
            whitespace within a text value. 
            </summary>
            <remarks>
            <p class="body">TRIM(text_value)</p>
            <p class="body">Text_value is a piece of text to trim and normalize the white
            space of. Trimming removes all leading and trailing white space. Normalization
            reduces runs of consecutive whitespace appearing within the <em>text_value</em>
            to single blank spaces.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrim.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrim.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrim.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTrim.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionLen">
            <summary>
            Counts the number of characters in a text value.
            </summary>
            <remarks>
            <p class="body">LEN(text_value)</p>
            <p class="body">Text_value is any text string or reference to a text value
            for which you want a character count. The number of characters, including
            all whitespace, determines the length of the text string.</p>
            <p class="body">Depending on the character encoding used, some whitespace
            characters such as line-breaks may count as two characters (one character
            is a carriage return, the other character is a line feed).</p>
            <p class="body">An empty text string contains no characters.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionLen.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLen.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLen.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLen.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionValue">
            <summary>
            Retrieves the numeric value of a piece of text that is supposed to
            represent either a number or a currency.
            </summary>
            <remarks>
            <p class="body">VALUE(text_value)</p>
            <p class="body">Text_value is any text value or single-value reference to
            a text string that you want to convert into a number. It may have been
            formatted with a sign, currency symbol, or thousands separator. These
            characters will be stripped to yield the numeric value of the text.</p>
            <p class="body">If the <em>text_value</em> is an error value or could not
            be converted into a numeric value then the function returns an error value.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionValue.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the argument on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <remarks>
            <p class="body">Returns an error if the <b>UltraCalcValue</b> argument at the top of the number stack was an error.</p>
            <p class="body">Returns a value conversion into a double-precision numeric type if the incoming text can be interpreted as a numeric value (possibly after filtering off thousands separators, decimal separators, currency symbols, exponents and signs.)</p>
            <p class="body">Returns a numeric conversion from another numeric type if the incoming argument was not text (sometimes when the result of such a conversion is poorly defined this may defy an application's expectations, for example, a <b>DATEVALUE</b> may convert into a numeric value of ticks.)</p>
            </remarks>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionValue.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionValue.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionValue.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionFind">
            <summary>
            Finds one piece of text within another piece of text.
            </summary>
            <remarks>
            <p class="body">FIND(text_to_find, text_to_search, starting_point)</p>
            <p class="body">Text_to_find is the piece of text you want to find. It can
            be a reference (for example, a NamedReference to a constant text string or
            a CalcSettings reference to a TextBox on the form). It should be shorter in
            length than the <em>text_to_search</em>.</p>
            <p class="body">Text_to_search is the piece of text you want to search for
            <em>text_to_find</em> within. It's commonly a reference to a text string
            that you want to search.</p>
            <p class="body">Starting_point is the one-based character position inside of 
            <em>text_to_search</em> at which UltraCalc will begin searching. This argument
            is optional and if omitted, the search will begin at the first character.</p>
            <p class="body">If <em>text_to_find</em> is not found this function returns
            a Value error, otherwise it returns the starting position of <em>text_to_find</em>
            within <em>text_to_search</em>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionFind.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFind.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFind.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFind.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionReplace">
            <summary>
            Replaces a substring of a text value with some new text. This substring is specified by giving
            it's starting point and it's length in characters, within the original text value.
            </summary>
            <remarks>
            <p class="body">REPLACE(text_value, starting_point, character_count, new_text_value)</p>
            <p class="body">Text_value is the original text within which you want to replace some substring of text,
            and you already know the <em>starting_point</em> and <em>character_count</em> of that substring.</p>
            <p class="body">Starting_point is the one-based position within <em>text_value</em> where the replaced
            substring begins.</p>
            <p class="body">Character_count is the length of the substring being replaced as a count of the characters
            it contains. If this value when added to <em>starting_point</em> would exceed the length remaining in
            <em>text_value</em> then the entire remainder of <em>text_value</em> is replaced.</p>
            <p class="body">New_text_value is some new text that replaces the text of the specified substring. It is
            not required to be the same length as the replaced substring.</p>
            <p class="body">When <em>starting_point</em> or <em>character_count</em> are error values, or less than zero,
            an error value is returned. If <em>starting_point</em> exceeds the length of <em>text_value</em> then an error
            value is returned.</p>
            <p class="body">It is possible to use the REPLACE() function with other UltraCalc functions to express the
            replacement of one substring with another. The following UltraCalc expression replaces the word "Old" with
            the word "New" in the original text value.</p>
            <code>REPLACE("Hello Old World", FIND("Old"), LEN("Old"), "New")</code>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionReplace.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionReplace.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionReplace.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionReplace.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionSYD">
            <summary>
            Calculates depreciation of an asset using the sum of years' digits (SYD)
            calculation method.
            </summary>
            <remarks>
            <p class="body">SYD(assetCost, salvageValue, lifespan, periodNumber)</p>
            <p class="body">AssetCost is the initial value of the asset
            when it was purchased new. This numeric value needs to be
            greater than the <em>salvageValue</em> (otherwise the asset
            would be appreciating in value).</p>
            <p class="body">SalvageValue is the market price you can get
            for an asset at the end of it's useful life (<em>lifespan</em>
            periods). In some situations, this may represent the value of
            the asset's spare parts.</p>
            <p class="body">Lifespan is the useful life of the asset being
            depreciated measured in fixed-length time periods (usually years).
            The appropriate <em>lifespan</em> to use may vary with the kind
            of asset being depreciated. As the name of this function suggests,
            the <em>lifespan</em> when using this depreciation method is normally
            measured in years (although this does not necessarily have to be the
            case).</p>
            <p class="body">PeriodNumber is the one-based number of the period
            to calculate the depreciation of the asset for, having a value of
            between 1 and <em>lifespan</em>. It must be measured in the same
            units of time as the <em>lifespan</em>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSYD.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSYD.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSYD.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSYD.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionSLN">
            <summary>
            Calculates what the straight-line depreciation
            of an asset should be per period.
            </summary>
            <remarks>
            <p class="body">SLN(assetCost, salvageValue, lifespan)</p>
            <p class="body">AssetCost is the initial value of the asset
            when it was purchased new. This numeric value needs to be
            greater than the <em>salvageValue</em> (otherwise the asset
            would be appreciating in value).</p>
            <p class="body">SalvageValue is the market price you can get
            for an asset at the end of it's useful life (<em>lifespan</em>
            periods). In some situations, this may represent the value of
            the asset's spare parts.</p>
            <p class="body">Lifespan is the useful life of the asset being
            depreciated measured in fixed-length time periods (usually years).
            The appropriate <em>lifespan</em> to use may vary with the kind
            of asset being depreciated.</p>
            <p class="body">Straight-line depreciation expresses an asset's
            depreciation at a constant rate per period. The asset is assumed
            to lose useful value no faster in the first period depreciation
            is calculated than in the last period. An accountant can advise
            you as to which assets the straight-line depreciation calculation
            method is suitable.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSLN.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSLN.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSLN.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSLN.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDB">
            <summary>
            Calculates an asset's depreciation using the fixed declining balance (DB) method over a specified term.
            </summary>
            <remarks>
            <p class="body">DB(assetCost, salvageValue, lifespan, period, months)</p>
            <p class="body">AssetCost is the original cost or purchase price of the asset at the start of the
            calculation.</p>
            <p class="body">SalvageValue is the market value of the asset after it's expected useful life ends,
            sometimes this will be the value of the asset as spare parts.</p>
            <p class="body">Lifespan indicates for how many periods the asset is useful (it's useful life), and
            must be depreciated. Accounting standards vary on what <em>lifespan</em> is appropriate for different
            classes of assets, such as durable and non-durable goods.</p>
            <p class="body">Period indicates the number of units of time between decremental calculations of the
            depreciation. If <em>lifespan</em> is measured in years, then the value specified for the <em>period</em>
            must also be in years.</p>
            <p class="body">Months allows you to specify the number of months in the first year, if the depreciation
            does not begin on the first day of the year. You might specify <em>months</em> based on when the asset
            was purchased new. If omitted, the calculation defaults to 12 which is equivalent to calculating starting
            from the first day of the year.</p>
            <p class="body">For some assets, alternative calculation methods such as the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDDB">DDB()</see>
            function may be more appropriate. Your accountant can tell you for which assets the fixed declining
            balance method is an acceptable means of calculating depreciation.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDB.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDB.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDB.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDB.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDDB">
            <summary>
            Calculates an asset's depreciation using the double declining balance (DDB) or another weighted
            factor method over a specified term.
            </summary>
            <remarks>
            <p class="body">DDB(assetCost, salvageValue, lifespan, period, weight)</p>
            <p class="body">AssetCost is the original cost or purchase price of the asset at the start of the
            calculation.</p>
            <p class="body">SalvageValue is the market value of the asset after it's expected useful life ends,
            sometimes this will be the value of the asset as spare parts.</p>
            <p class="body">Lifespan indicates for how many periods the asset is useful (it's useful life), and
            must be depreciated. Accounting standards vary on what <em>lifespan</em> is appropriate for different
            classes of assets, such as durable and non-durable goods.</p>
            <p class="body">Period indicates the number of units of time between decremental calculations of the
            depreciation. If <em>lifespan</em> is measured in years, then the value specified for the <em>period</em>
            must also be in years.</p>
            <p class="body">Weight allows you to fine tune the calculation method. By default, the double declining
            balance method uses a factor of 2.</p>
            <p class="body">For some assets, alternative calculation methods such as the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDB">DB()</see>
            function may be more appropriate. Your accountant can advise you for which assets the double declining
            balance method is an acceptable means of calculating depreciation, and what factors can be used when
            depreciating certain assets such as high-tech equipment or motor vehicles which exhibit accelerated
            depreciation in their first years of use.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDDB.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDDB.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDDB.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDDB.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIntRate">
            <summary>
            Calculates the interest rate yielded by a security
            investment redeemable at a future date, such as a
            zero coupon bond.
            </summary>
            <remarks>
            <p class="body">INTRATE(settlementDate, maturityDate,
            amount, redemptionValue, basis)</p>
            <p class="body">SettlementDate is the date on which a
            security purchase is settled with the buyer taking
            possession of the security. Market conventions for
            settlement of trades vary by security and exchange.
            The settlement date may be substantially later than
            a security's issue date when it is traded on the
            secondary market.</p>
            <p class="body">MaturityDate is the date when the
            security can be redeemed. It ceases to accrue any
            further value after this date. The maturity date
            must be later than the <em>settlementDate</em> or
            an error value is returned.</p>
            <p class="body">Amount is the purchase price of the
            security. For positive interest, this amount will be
            smaller than the <em>redemptionValue</em> because it
            discounts interest that will be accrued over the time
            period the security is held.</p>
            <p class="body">RedemptionValue is the price a security
            holder may redeem their security for at the <em>maturityDate</em>.
            In some cases, this may be called the face value of the
            security.</p>
            <p class="body">Basis describes what accounting convention to
            use when counting days per calendar year, and days on which
            interest can accrue. If omitted, a basis consistent with
            United States National Association of Security Dealers (NASD)
            of 30/360 will be employed.</p>
            <table>
            <colgroup><col width="100px"/><col width="240px"/></colgroup>
            <tr><th>Basis</th><th>Day counting method</th></tr>
            <tr><td>0</td><td>30/360 (US NASD)</td></tr>
            <tr><td>1</td><td>Actual/actual</td></tr>
            <tr><td>2</td><td>Actual/360</td></tr>
            <tr><td>3</td><td>Actual/365</td></tr>
            <tr><td>4</td><td>30/360 (European)</td></tr>
            </table>
            <p class="body">Date values should be passed to this function using either the
            <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDate">DATE()</see> function or <strong>UltraCalcValue</strong>
            objects containing .NET <strong>DateTime</strong> values. Date values represented
            as text may not be interpreted as you had intended.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIntRate.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIntRate.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIntRate.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIntRate.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateValue">
            <summary>
            Returns the .NET DateTime of the time represented by date formated in a string
            </summary>
            <remarks>
            <p class="body">
            DATEVALUE(date_text)
            <p></p>
            Date_text is text that represents a date in a .NET DateTime format
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateValue.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateValue.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateValue.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateValue.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDate">
            <summary>
            Returns the .NET DateTime ticks number that represents a particular date
            </summary>
            <remarks>
            <p class="body">
            DATE(year,month,day)
            <p></p>
            Year is the number representing the year 
            <p></p>
            Month is a number representing the month of the year
            <p></p>
            Day is a number representing the day of the month
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDate.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDate.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDate.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDate.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDays360">
            <summary>
            Returns the number of days between two dates based on a 360-day year (twelve 30-day months), which is used in some accounting calculations.
            </summary>
            <remarks>
            <p class="body">
            DAYS360(start_date,end_date,method)
            <p></p>
            Start_date and end_date are the two dates between which you want to know the number of days. 
            <p></p>
            If start_date occurs after end_date, DAYS360 returns a negative number. 
            Dates should be entered by using the DATE function, or as results of other formulas or functions. 
            For example, use DATE(2008,5,23) for the 23rd day of May, 2008. Problems can occur if dates are entered as text.
            <p></p>
            Method is a logical value that specifies whether to use the U.S. or European method in the calculation:
            <p></p><t></t>
            FALSE or omitted U.S. (NASD) method. If the starting date is the 31st of a month, it becomes equal to the 30th of the same month. If the ending date is the 31st of a month and the starting date is earlier than the 30th of a month, the ending date becomes equal to the 1st of the next month; otherwise the ending date becomes equal to the 30th of the same month. 
            <p></p><t></t>
            TRUE European method. Starting dates and ending dates that occur on the 31st of a month become equal to the 30th of the same month. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDays360.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDays360.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDays360.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDays360.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDay">
            <summary>
            Returns the day of a date value
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDay.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDay.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDay.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDay.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMonth">
            <summary>
            Returns the month of a date value
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMonth.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMonth.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMonth.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMonth.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionYear">
            <summary>
            Returns the year of a date value
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionYear.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionYear.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionYear.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionYear.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionHour">
            <summary>
            Returns the hour of a time value
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionHour.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHour.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHour.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHour.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinute">
            <summary>
            Returns the minute of a time value
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinute.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinute.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinute.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinute.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionSecond">
            <summary>
            Returns the second of a time value
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSecond.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSecond.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSecond.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSecond.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionNow">
            <summary>
            Returns a .NET DateTime ticks value of the current day and time
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionNow.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNow.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNow.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNow.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionTimeValue">
            <summary>
            Returns the .Net DateTime of the time represented by time formated in a string
            </summary>
            <remarks>
            <p class="body">
            TIMEVALUE(time_text)
            <p></p>
            Time_text is text that represents a date in the .NET DateTime format
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionTimeValue.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTimeValue.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTimeValue.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTimeValue.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionTime">
            <summary>
            Returns the .NET DateTime ticks value that represents a particular time
            </summary>
            <remarks>
            <p class="body">
            TIME(hour,minute,second)
            <p></p>
            Hour is a number representing the time's hour
            <p></p>
            Minute is a number representing the time's minute
            <p></p>
            Second is a number representing the time's second
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionTime.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTime.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTime.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTime.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMedian">
            <summary>
            Calculates the median value of a specified list of numeric values.
            </summary>
            <remarks>
            <p class="body">MEDIAN(Value1, value2, ..., valueN)</p>
            <p class="body">Value1, value2, ..., valueN are any number of numeric values or references to
            numeric values for which you want the median value found. If any argument is an error value,
            or there are no numeric values within the series of arguments, then MEDIAN() will return an
            error value.</p>
            <p class="body">The median is the middle value of the sorted list of numeric values (you do
            not need to sort <em>Value1</em>, <em>value2</em>, ..., <em>valueN</em> prior to passing them
            to the MEDIAN() function). When the list contains an odd number of values, the median will be
            the value at position CEIL(<em>N</em>/2). For example, the median of the 5-value list 0, 20,
            30, 50, 80, is the value in the third position: 30. When the list contains an even number of
            values, the median will be the average of the two values in the middle. For example, the
            median of the 4-value list 7, 20, 30, 45, is the average of the two middle elements (20 and
            30): 25. Note that the value of the MEDIAN() varies most from the arithmetic mean of the
            sorted list when the distribution of values tends to favor one side or the other of that
            arithemtic mean. For example, the arithmetic mean of the 5-value list 1, 2, 3, 21, 43 is
            14 but it's median value is 3.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMedian.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMedian.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMedian.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMedian.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionVar">
            <summary>
            Calculates the estimated variance for a specified sampling of numeric values.
            </summary>
            <remarks>
            <p class="body">VAR(Value1, value2, ..., valueN)</p>
            <p class="body">Value1, value2, ..., valueN are any number of numeric values or
            references to numeric values you provide to specify a sampling of your larger
            data population. If any argument contains an error value or there arte no numeric
            values in the sampling, the VAR() function evaluates to the first error value it
            encounters.</p>
            <p class="body">Variance is a measure of statistical variability, and is used in
            statistical studies based on small samplings from much larger data populations to
            draw inferences about the variability of those data populations.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionVar.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionVar.CalculateVariance(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Estimates the variance based on a sample.
            </summary>
            <param name="numberStack">Number stack to evaluate</param>
            <param name="argumentCount">Number of arguments on the stack to use</param>
            <returns>A boolean indicating if the value was calculated</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionVar.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionVar.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionVar.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionStdev">
            <summary>
            Calculates an approximate standard deviation of a specified sampling of numeric
            values.
            </summary>
            <remarks>
            <p class="body">STDEV(Value1, value2, ..., valueN)</p>
            <p class="body">Value1, value2, ..., valueN are any number of numeric values or references
            to numeric values that you've given to provide a sample space of your data set. If any value
            contains an error, then the function evaluates to the first error encountered. An error value
            is returned if the sample space contains no numeric values.</p>
            <p class="body">The standard deviation is used in statistical studies to make inferences about
            a larger population of data based on sampling only a subset. For well chosen samplings, a small
            standard deviation indicates most data points tend to cluster within a narrow range of values.
            A larger standard deviations indicates greater variability in the data points, and that there
            is a higher likelihood for values to occur farther away and/or more frequently away from the
            expected norm.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionStdev.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionStdev.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionStdev.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionStdev.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionType">
            <summary>
            Returns the underlying UltraCalc data type for the specified value.
            </summary>
            <remarks>
            <p class="body">TYPE( value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> object or
            the result of evaluating an UltraCalc expression.</p>
            <p class="body">
            <table border="0">
            <colgroup><col width="160px"/><col width="160px"/></colgroup>
            <thead><th>UltraCalc data type:</th><th>TYPE function returns:</th></thead>
            <tbody>
            <tr><td>Number</td><td>1</td></tr>
            <tr><td>Text</td><td>2</td></tr>
            <tr><td>Boolean</td><td>4</td></tr>
            <tr><td>Error</td><td>16</td></tr>
            </tbody>
            </table>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionType.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionType.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionType.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionType.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionErrorType">
            <summary>
            When an error value is returned, the ERRORTYPE function returns a
            numeric value corresponding to the UltraCalcErrorCode enumeration.
            </summary>
            <remarks>
            <p class="body">ERRORTYPE(error_value)</p>
            <p class="body">Error_value is an UltraCalc error value resulting
            from the unsuccessful evaluation of an expression.</p>
            <p class="body">The ERRORTYPE function returns an error value of
            #N/A (Not Applicable) if you pass it an UltraCalc value that was
            not an error value.</p>
            <p class="body">
            <table border="0">
            <thead>
            <th>Error_value</th>
            <th>ERRORTYPE returns</th>
            </thead>
            <tbody>
            <tr><td>#NULL!</td><td>1</td></tr>
            <tr><td>#DIV/0!</td><td>2</td></tr>
            <tr><td>#VALUE!</td><td>3</td></tr>
            <tr><td>#REF!</td><td>4</td></tr>
            <tr><td>#NAME?</td><td>5</td></tr>
            <tr><td>#NUM!</td><td>6</td></tr>
            <tr><td>#N/A!</td><td>7</td></tr>
            </tbody>
            </table>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionErrorType.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionErrorType.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionErrorType.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionErrorType.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionNa">
            <summary>
            Returns #N/A!, the error value representing a not applicable result.
            </summary>
            <remarks>
            <p class="body">NA()</p>
            <p class="body">The NA function always returns the same constant
            error value.</p>
            <p class="body">You might use this function when you wanted an IF
            function or other complex UltraCalc expression to return the #N/A!
            error value.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionNa.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNa.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNa.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNa.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsBlank">
            <summary>
            Returns TRUE if the specified value is blank.
            </summary>
            <remarks>
            <p class="body">ISBLANK(value)</p>
            <p class="body">Value can be any constant, reference or the result of
            evaluating an UltraCalc expression.</p>
            <p class="body">The definition of what constitutes "blank" is anything
            that causes the <strong>IsNull</strong> method of the <strong>UltraCalcValue</strong>
            object containing the argument, value, to return TRUE. This may vary
            for different kinds of <strong>UltraCalcValue</strong> object.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsBlank.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsBlank.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsBlank.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsBlank.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsErr">
            <summary>
            Returns TRUE if the specified value is any error value, except #N/A!
            </summary>
            <remarks>
            <p class="body">ISERR(value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> object (perhaps
            the result of evaluating an UltraCalc expression) thought to be an error
            value. The ISERR function will return FALSE when value is not an error
            value, or it is an error but the error value was not applicable.</p>
            <p class="body">This is a weaker variation of the more stringent
            <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsError">ISERROR</see> function.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsErr.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsErr.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsErr.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsErr.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsError">
            <summary>
            Returns TRUE if the specified value is any error value without exception.
            </summary>
            <remarks>
            <p class="body">ISERROR(value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> object (perhaps
            the result of evaluating an UltraCalc expression) thought to be an error
            value. The ISERROR function will return FALSE only when value is not an
            error value.</p>
            <p class="body">A more relaxed variation of this function is the
            <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsErr">ISERR</see> function, which
            returns TRUE when an error value is not applicable. The ISERROR
            function treats this case as being an error. If you are using
            certain UltraCalc functions then sometimes error values of #N/A!
            should be treated by your application as non-errors and you
            should choose ISERR instead of ISERROR.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsError.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsError.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsError.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsError.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsLogical">
            <summary>
            Returns TRUE if the specified value refers to a two-state logic
            or Boolean value.
            </summary>
            <remarks>
            <p class="body">ISLOGICAL(value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> object,
            or the result of evaluating an UltraCalc expression, which is thought
            to be a boolean value (TRUE or FALSE.) Boolean values are named in
            honor of George Boole, whose development of Boolean algebra governs
            the special characteristics of logical functions upon these two
            values.</p>
            <p class="body">Depending on the kind of value, it may not be convertible
            into a boolean value and therefore the ISLOGICAL function returns FALSE.
            The ISLOGICAL function only furnishes information about the compatibility
            of a value with the boolean-typed values evaluated by UltraCalc.</p>
            <p class="note">The ISLOGICAL function does not perform deductive reasoning.
            A return value of TRUE should not be interpreted as proof any value or UltraCalc
            expression passed to the ISLOGICAL function represents a logical outcome.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsLogical.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsLogical.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsLogical.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsLogical.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNa">
            <summary>
            Returns TRUE if an error value is #N/A (not applicable.)
            </summary>
            <remarks>
            <p class="body">ISNA(value)</p>
            <p class="body">Value is an error value thought to be the error value
            returned when an error has happened, but the error code was not applicable.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNa.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNa.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNa.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNa.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNonText">
            <summary>
            Returns TRUE if the specified value refers to any not-text value.
            </summary>
            <remarks>
            <p class="body">ISNONTEXT( value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> object
            or the result of an UltraCalc expression evaluation that you want
            to test to determine whether it is a text value (such as a .NET
            <strong>String</strong> object) or a non-text value.</p>
            <seealso cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsText">ISTEXT function</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNonText.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNonText.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNonText.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNonText.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNumber">
            <summary>
            Returns TRUE if the specified value refers to a numeric value.
            </summary>
            <remarks>
            <p class="body">ISNUMBER( value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> or the
            result of evaluating an UltraCalc expression that you want to test
            to determine whether it is a number or not. A numeric value can be
            an integer, floating-point or decimal number.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNumber.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNumber.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNumber.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNumber.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsRef">
            <summary>
            Returns TRUE if the specified value is an UltraCalc reference.
            </summary>
            <remarks>
            <p class="body">ISREF( reference)</p>
            <p class="body">Reference is an <strong>UltraCalcValue</strong>
            object that contains a reference to some application-specific
            control, field, or piece of information. You can think of it as
            an address which the UltraCalc engine uses to look-up a value
            in your application when one is needed to evaluate an expression.
            </p>
            <p class="body">The ISREF function returns TRUE when the specified
            <strong>UltraCalcValue</strong> is a reference. Since it's value
            is defined by the contents at another referenced location, it's
            possible for this <strong>UltraCalcValue</strong> object to change
            in value based on changes in your application (outside of the
            UltraCalc engine.) Proper implementation of the <strong>IUltraCalcReference</strong>
            interface and <strong>NotifyValueChange</strong> methods will ensure the
            UltraCalc engine is made aware of any changes in a referenced value,
            and that all references depending on this value are refreshed.</p>
            <p class="body">Conversely, the ISREF function will return FALSE
            should the <strong>UltraCalcValue</strong> you supply represent
            a constant value or the temporary result of evaluating an UltraCalc
            expression (a constant value sitting at the top of the UltraCalc
            engine's number stack.)</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsRef.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsRef.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsRef.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsRef.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsText">
            <summary>
            Returns TRUE if the specified value refers to a text (or string) value.
            </summary>
            <remarks>
            <p class="body">ISTEXT(value)</p>
            <p class="body">Value is an <strong>UltraCalcValue</strong> object or
            the result of evaluating an UltraCalc expression that you want to test
            to determine whether it is of a text (<em>e.g.</em>, string) value or
            a non-text value (which could be a numeric, boolean, or error value.)
            </p>
            <seealso cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNonText">ISNONTEXT function</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsText.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsText.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsText.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsText.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsEven">
            <summary>
            Returns TRUE if the specified value is an even number.
            </summary>
            <remarks>
            <p class="body">ISEVEN(value)</p>
            <p class="body">Value is a number thought to be even (divisible by the
            integer 2.) A value that is not an integer will first be converted to
            an integer using the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionFloor">FLOOR</see>
            function before evaluation.</p>
            <seealso cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsOdd">ISODD function</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsEven.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsEven.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsEven.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsEven.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsOdd">
            <summary>
            Returns TRUE if the specified value is an odd number.
            </summary>
            <remarks>
            <p class="body">ISODD(value)</p>
            <p class="body">Value is a number thought to be odd (not divisible by
            the integer 2.) A value that is not an integer will first be converted
            to an integer using the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionFloor">FLOOR</see>
            function before evaluation.</p>
            <seealso cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsEven">ISEVEN function</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsOdd.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsOdd.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsOdd.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsOdd.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIRR">
            <summary>
            Calculates an internal rate of return for a given series of cash flows represented by either positive (incoming) or
            negative (outgoing) numeric values.
            </summary>
            <remarks>
            <p class="body">IRR(value_reference, estimate)</p>
            <p class="body">Value_reference must be a column or range reference of numeric values representing cash outflows
            (payments) as negative numeric values, and cash inflows (income) as positive numeric values. Each cash flow must
            occur with a regular period. If payments occur at irregular intervals, then you must represent the cash flow periods
            as taking place on a period common to all cash flows, and at intervals without a cash flow specify a zero value. 
            For example, if you finance the purchase of a television by taking a $300 loan with monthly payments of $110, but
            your payments do not start for three months, your series of cash flows would be monthly but would show three zero
            values for the months without payments (+300, 0, 0, 0, -110, -110, -110).</p>
            <p class="body">Estimate is an approximation close to what you expect the resulting internal rate of return to
            be. This function employs an iterative algorithm starting with this estimate and then repeatedly converging on
            a result that has a diminishing margin of error. If you do not provide an <em>estimate</em> then this function
            uses 10 percent as it's starting point.</p>
            <p class="body">If after twenty iterations the margin of error has not closed to within 1/1000 basis point then
            a #NUM error value will be returned.</p>
            <p class="body">The IRR() function has applications where you may be given a series of cash flows without an
            interest rate, such as in the retail financing example above, and wish to calculate what it's effective rate
            of interest would be. The internal rate is based on the period between cash flows, therefore when calculating
            payments that are not annual, you must annualize the internal rate.</p>
            <seealso cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionNPV">NPV()</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIRR.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIRR.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIRR.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIRR.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionRate">
            <summary>
            Calculates the per-period interest rate for a series of cash flows (an annuity).
            </summary>
            <remarks>
            <p class="body">RATE(nPeriods, amount, presentValue, paymentDue, futureValue, estimate)</p>
            <p class="body">NPeriods are the total number of cash flows, whether a payment (negative <em>amount</em>)
            or a receipt (positive <em>amount</em>) occuring periodically with a fixed time period between each cash
            flow.</p>
            <p class="body">Amount is the amount of cash paid (negative) or received (positive). It must be held
            constant over the course of the annuity.</p>
            <p class="body">PresentValue is the value today of the series of future payments. Payments made in the
            future are discounted by the interest rate being calculated, because it is assumed that at that interest
            rate a smaller sum could be invested today and would grow to the <em>amount</em> at a future time when
            that payment became due.</p>
            <p class="body">PaymentDue indicates whether cash flows occur at the beginning of each period (1) or at
            the end of each period (0). If not specified, the payments at the end of each period is assumed.</p>
            <p class="body">FutureValue is the accumulated balance attained after <em>nPeriods</em> payments have
            been made and accrued interest at the calculated rate. If left unspecified, the default future value
            is assumed to be zero (this represents reaching zero loan liability, when a loan has been fully repaid).
            </p>
            <p class="body">Estimate is an approximation of the interest rate used to start the calculation (which
            works by iteratively refining the <em>estimate</em> until it converges on the correct value). When no
            <em>estimate</em> is given a default of 10% is assumed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionRate.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRate.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRate.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRate.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNull">
            <summary>
            Returns a boolean indicating if the value is null (Nothing in VB).
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNull.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNull.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNull.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsNull.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionNull">
            <summary>
            Returns a null value (Nothing in VB)
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionNull.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNull.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNull.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNull.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsDBNull">
            <summary>
            Returns a boolean indicating if the value is DBNull.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsDBNull.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsDBNull.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsDBNull.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIsDBNull.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDBNull">
            <summary>
            Returns DBNull
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDBNull.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDBNull.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDBNull.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDBNull.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateAdd">
            <summary>
            Returns a <see cref="T:System.DateTime"/> value resulting from adding a specified interval to a DateTime.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateAdd.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateAdd.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateAdd.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateAdd.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateDiff">
            <summary>
            Returns a value specifying the number of time intervals between two DateTime values.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateDiff.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateDiff.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateDiff.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDateDiff.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionChar">
            <summary>
            Returns the character specified by the code number from the character set for your computer.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionChar.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionChar.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionChar.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionChar.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionCode">
            <summary>
            Gives you the numeric code corresponding the the first character in a
            specific text string.
            </summary>
            <remarks>
            <p class="body">CODE(Text)</p>
            <p class="body">Text is a text string of at least one character in length.
            This function returns the numeric code of the first character in <em>Text</em>.
            These code values correspond to those used by your machine to encode the text
            characters in a string (<em>e.g.</em>, Unicode).</p>
            <p class="body">If <em>Text</em> is an empty string of zero length, then
            this function returns the code zero.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionCode.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCode.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCode.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCode.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionFixed">
            <summary>
            Formats a numeric value rounded to a specified number of decimal places and
            with optional thousands separators.
            </summary>
            <remarks>
            <p class="body">FIXED(value, decimal_places, exclude_thousands_separators)</p>
            <p class="body">Value is the numeric value to be rounded and formatted as text.</p>
            <p class="body">Decimal_places indicate how many places to the right of the decimal point
            the <em>value</em> should be rounded. If omitted, rounding occurs to two decimal places.</p>
            <p class="body">Exclude_thousands_separators is a boolean value (TRUE or FALSE) indicating
            whether commas should appear in the formatted text value. By default the formatted text
            includes commas as thousands separators.</p>
            <p class="body">This function may not return text values consistent with your locale's
            formatting of numbers because it operates using culture invariant settings (these include
            commas as thousands separators and decimal points) to facilitate unambiguously parsing the
            text values it formats into numeric values for subsequent calculations. Applications may
            instead choose to format numeric values after UltraCalc has finished processing them, but
            before presenting them to their end user.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionFixed.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFixed.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFixed.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFixed.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionToday">
            <summary>
            Gets the host's current date.
            </summary>
            <remarks>
            <p class="body">No arguments are passed to this function.</p>
            <p class="body">The date returned for TODAY() is based on the local time of the
            host running UltraCalc. In some distributed applications, such as those built for
            the Web, this may be different from today's date at the client.</p>
            <p class="body">The date/time value returned is always adjusted to Midnight 
            (00:00).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionToday.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionToday.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionToday.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionToday.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionASinh">
            <summary>
            Returns the angle (measured in radians) having the specified value of it's hyperbolic sine function.
            </summary>
            <remarks>
            <p class="body">ASINH(value)</p>
            <p class="body">Value is the hyperbolic sine of some angle (measured in radians) that you want
            to find. As you might expect, the values of the hyperbolic sine function (see the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionSinh">SINH</see> function)
            increase at a hyperbolic rate, but one consequence is that these ever larger changes in the hyperbolic
            sine will correspond to ever smaller changes in the angle. This relationship is intrinsic to many of
            the mathematical and engineering applications of the inverse hyperbolic sine function, such as when
            resistance or strain builds up on a body increasingly as it is rotated (hysteresis).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionASinh.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function, Arcsinh, against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionASinh.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionASinh.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionASinh.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionATanh">
            <summary>
            Calculates the hyperbolic tangent of a specified angle measured in radians.
            </summary>
            <remarks>
            <p class="body">TANH(value)</p>
            <p class="body">Value is an angle measured in radians for which you want to
            calculate the hyperbolic tangent. If your angle is measured in degrees, 
            multiply it by PI()/180 to convert into radians. The hyperbolic tangent 
            has a range from -1 to 1.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionATanh.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function, Arctanh, against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionATanh.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionATanh.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionATanh.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionACosh">
            <summary>
            Returns the angle (measured in radians) having the specified value of it's hyperbolic cosine function.
            </summary>
            <remarks>
            <p class="body">ACOSH(value)</p>
            <p class="body">Value is the hyperbolic cosine of some angle (measured in radians) that you want
            to find. As you might expect, the values of the hyperbolic cosine function (see the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionCosh">COSH</see> function)
            increase at a hyperbolic rate, but one consequence is that these ever larger changes in the hyperbolic
            cosine will correspond to ever smaller changes in the angle. This relationship is intrinsic to many of
            the mathematical and engineering applications of the inverse hyperbolic cosine function, such as when
            resistance or strain builds up on a body increasingly as it is rotated (hysteresis).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionACosh.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function, Arccosh, against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionACosh.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionACosh.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionACosh.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionEDate">
            <summary>
            Returns a date that is the specified number of months before or after the start date.
            </summary>
            <remarks>
            <p class="body">
            DATE(date, numberOfMonths)
            <br/>
            Date is the starting date
            <br/>
            NumberOfMonths is a number of months to shift the date. A positive number means a date after the startdate. A negative number indicates a date prior to the start date.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionEDate.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionEDate.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionEDate.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionEDate.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionEOMonth">
            <summary>
            Returns a date that is at the end of the month which is the specified number of months before or after the start date.
            </summary>
            <remarks>
            <p class="body">
            EOMONTH(date, numberOfMonths)
            <br/>
            Date is the starting date
            <br/>
            NumberOfMonths is a number of months to shift the date. A positive number means a date after the startdate. A negative number indicates a date prior to the start date.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionEOMonth.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionEOMonth.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionEOMonth.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionEOMonth.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionWeekDay">
            <summary>
            Returns a number representing the day of the week of the specified date. 
            </summary>
            <remarks>
            <p class="body">
            WEEKDAY(date, returnType)
            <br/>
            Date is a date.
            <br/>
            ReturnType determines which numbering scheme is used for the days of the week.
            1 (default) = Sunday (1) through Saturday (7)
            2 = Monday (1) through Sunday (7)
            3 = Monday (0) through Sunday (6)
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionWeekDay.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionWeekDay.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionWeekDay.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionWeekDay.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionNetWorkDays">
            <summary>
            Returns the total number of whole work days between the specified dates, excluding any specified holidays.
            </summary>
            <remarks>    
            <p class="body">
            NETWORKDAYS(startDate, endDate [, holiday1, holiday2, ..., holidayN])
            <br/>
            StartDate is the date from which to start.
            <br/>
            EndDate is the date at which to end.
            <br/>
            Holiday1, holiday2, ..., holidayN is any number of dates or range references containing dates that are to be considered non-working days.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionNetWorkDays.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNetWorkDays.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNetWorkDays.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionNetWorkDays.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionWeekNum">
            <summary>
            Returns the number of the week into which the specified date falls. 
            </summary>
            <remarks>
            <p class="body">
            WEEKNUM(date, returnType)
            <br/>
            Date is a date.
            <br/>
            ReturnType determines which day begins the week.
            1 (default) = Sunday is the first day of the week.
            2 = Monday is the first day of the week.    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionWeekNum.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionWeekNum.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionWeekNum.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionWeekNum.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionWorkDay">
            <summary>
            Returns a work day the specified number of days from the specified date, excluding any specified holidays.
            </summary>
            <remarks>    
            <p class="body">
            WORKDAY(startDate, days [, holiday1, holiday2, ..., holidayN])
            <br/>
            StartDate is the date from which to start.
            <br/>
            Days is the number of work days to offset from the start date.
            <br/>
            Holiday1, holiday2, ..., holidayN is any number of dates or range references containing dates that are to be considered non-working days.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionWorkDay.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionWorkDay.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionWorkDay.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionWorkDay.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2XBase">
            <summary>
            Returns a string representing the specified decimal value in the specified base number scheme.
            </summary>
            <remarks>
            <p class="body">
            Dec2X(number, places)
            <br/>
            Number is the decimal value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2XBase.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2XBase.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2XBase.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2XBase.NumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2XBase.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2XBase.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Bin">
            <summary>
            Returns a string representing the specified decimal value as a binary number.
            </summary>
            <remarks>
            <p class="body">
            Dec2Bin(number, places)
            <br/>
            Number is the decimal value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Bin.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Bin.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Bin.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Bin.NumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Hex">
            <summary>
            Returns a string representing the specified decimal value as a hexadecimal number.
            </summary>
            <remarks>
            <p class="body">
            Dec2Hex(number, places)
            <br/>
            Number is the decimal value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Hex.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Hex.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Hex.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Hex.NumberSystem">
            <summary>
            The number system to convert to (2 = hexadecimal, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Oct">
            <summary>
            Returns a string representing the specified decimal value as a octal number.
            </summary>
            <remarks>
            <p class="body">
            Dec2Oct(number, places)
            <br/>
            Number is the decimal value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Oct.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Oct.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Oct.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDec2Oct.NumberSystem">
            <summary>
            The number system to convert to (2 = octal, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2Dec">
            <summary>
            Returns the decimal value of a string representation of a number in a non-decimal number system.
            </summary>
            <remarks>
            <p class="body">
            X2Dec(number)
            <br/>
            Number is a string represeting a number in a non-decimal number system.    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2Dec.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2Dec.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2Dec.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2Dec.NumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2Dec.MaxLength">
            <summary>
            The maximum length of the number string.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2Dec.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2Dec.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Dec">
            <summary>
            Returns the decimal value of a string representation of a number in a binary system.
            </summary>
            <remarks>
            <p class="body">
            Bin2Dec(number)
            <br/>
            Number is a string represeting a binary number.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Dec.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Dec.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Dec.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Dec.NumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Dec.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Dec">
            <summary>
            Returns the decimal value of a string representation of a number in a hexadecimal system.
            </summary>
            <remarks>
            <p class="body">
            Hex2Dec(number)
            <br/>
            Number is a string represeting a hexadecimal number.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Dec.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Dec.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Dec.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Dec.NumberSystem">
            <summary>
            The number system to convert to (2 = hexadecimal, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Dec.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Dec">
            <summary>
            Returns the decimal value of a string representation of a number in a octal system.
            </summary>
            <remarks>
            <p class="body">
            Oct2Dec(number)
            <br/>
            Number is a string represeting a octal number.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Dec.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Dec.MinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Dec.MaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Dec.NumberSystem">
            <summary>
            The number system to convert to (2 = octal, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Dec.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2XBase">
            <summary>
            Converts a string representing a number in a non-decimal number system to a number in another non-decimal number system.
            </summary>
            <remarks>
            <p class="body">
            XBase2XBase(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2XBase.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2XBase.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the original number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2XBase.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the original number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2XBase.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2XBase.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2XBase.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2XBase.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2XBase.MaxLength">
            <summary>
            The maximum length of the number string.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2XBase.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXBase2XBase.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Oct">
            <summary>
            Converts a string representing a binary number  to a string representing the same number in the octal number system.
            </summary>
            <remarks>
            <p class="body">
            Bin2Oct(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Oct.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Oct.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Oct.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Oct.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Oct.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Oct.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Oct.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Oct.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Hex">
            <summary>
            Converts a string representing a binary number  to a string representing the same number in the hexadecimal number system.
            </summary>
            <remarks>
            <p class="body">
            Bin2Hex(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Hex.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Hex.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Hex.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Hex.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Hex.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Hex.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Hex.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionBin2Hex.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Bin">
            <summary>
            Converts a string representing an octal number to a string representing the same number in the binary number system.
            </summary>
            <remarks>
            <p class="body">
            Oct2Bin(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Bin.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Bin.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Bin.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Bin.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Bin.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Bin.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Bin.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Bin.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Hex">
            <summary>
            Converts a string representing an octal number to a string representing the same number in the hexadecimal number system.
            </summary>
            <remarks>
            <p class="body">
            Oct2Hex(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Hex.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Hex.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Hex.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Hex.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Hex.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Hex.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Hex.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOct2Hex.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Bin">
            <summary>
            Converts a string representing an hexadecimal number to a string representing the same number in the binary number system.
            </summary>
            <remarks>
            <p class="body">
            Hex2Bin(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Bin.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Bin.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Bin.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Bin.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Bin.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Bin.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Bin.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Bin.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Oct">
            <summary>
            Converts a string representing an hexadecimal number to a string representing the same number in the octal number system.
            </summary>
            <remarks>
            <p class="body">
            Hex2Oct(number, places)
            <br/>
            Number is the value to be converted.
            <br/>
            Places is the number of characters to use in representing the value. If places is not specified, the mimumum number of characters neccessary to represent the value will be used. Places allows you to specify leading zeros.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Oct.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Oct.OriginalMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Oct.OriginalMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Oct.NewMinNumber">
            <summary>
            The minimum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Oct.NewMaxNumber">
            <summary>
            The maximum value that the number argument to this function will allow in the new number system.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Oct.OriginalNumberSystem">
            <summary>
            The number system to convert from (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Oct.NewNumberSystem">
            <summary>
            The number system to convert to (2 = binary, 8 = octal, 16 = Hexadecimal, etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHex2Oct.MaxLength">
            <summary>
            The maximum length of the 'number' string.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionConvert">
            <summary>
            Converts a value from one system of measurement to another. For example, meters to inches or hours to seconds.
            </summary>
            <remarks>
            <p class="body">CONVERT(number, fromUnit, toUnit)
            <br/>
            Number is the value to convert.
            <br/>
            FromUnit is the unit in which the number is given.
            <br/>
            ToUnit is the units to convert to.
            <br/>
            Weight and mass units:
            "g" = gram
            "sg" = slug
            "lbm" = pound mass (avoirdupois)
            "u" = U (atomic mass unit)
            "ozm" = Ounce mass (avoirdupois)
            <br/>
            Distance units:
            "m" = Meter
            "mi" = Statute mile
            "Nmi" = Nautical mile 
            "in" = Inch
            "ft" = Foot 
            "yd" = Yard
            "ang" = Angstrom
            "Pica" = Pica (1/72 in.)    
            <br/>
            Time units:
            "yr" = Year
            "day" = Day
            "hr" = Hour
            "mn" = Minute
            "sec" = Second
            <br/>
            Pressure units
            "Pa" (or "p") = Pascal
            "atm" (or "at") = Atmosphere
            "mmHg" = mm of Mercury
            <br/>
            Force units
            "N" = Newton
            "dyn" (or "dy") = Dyne
            "lbf" = Pound force
            <br/>
            Energy units:
            "J" = Joule
            "e" = Erg
            "c" = Thermodynamic calorie
            "cal" = IT calorie
            "eV" (or "ev") = Electron volt
            "HPh" (or "hh") = Horsepower-hour
            "Wh" (or "wh") = Watt-hour
            "flb" = Foot-pound
            "BTU" (or "btu") = BTU
            <br/>
            Power units:
            "HP" (or "h") = Horsepower
            "W" (or "w") = Watt
            <br/>
            Magentism units:
            "T" = Tesla
            "ga" = Gauss
            <br/>
            Temperature units:
            "C" (or "cel") = Degree Celsius
            "F" (or "fah") = Degree Fahrenheit
            "K" (or "kel") = Kelvin
            <br/>
            Liquid measure units:
            "tsp" = Teaspoon
            "tbs" = Tablespoon
            "oz" = Fluid ounce
            "cup" = Cup
            "pt" (or "us_pt") = U.S. pint
            "uk_pt" = U.K. pint
            "qt" = Quart
            "gal" = Gallon
            "l" (or "lt") = Liter
            <br/>
            Any metric ToUnit or FromUnit may be prefixed with one of the following:
            exa ("E") = 1E+18
            peta ("P") = 1E+15
            tera ("T") = 1E+12
            giga ("G") = 1E+09
            mega ("M") = 1E+06
            kilo ("k") = 1E+03
            hecto ("h") = 1E+02
            dekao ("e") = 1E+01
            deci ("d") = 1E-01
            centi ("c") = 1E-02
            milli ("m") = 1E-03
            micro ("u") = 1E-06
            nano ("n") = 1E-09
            pico ("p") = 1E-12
            femto ("f") = 1E-15
            atto ("a") = 1E-18
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionConvert.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionConvert.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionConvert.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionConvert.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDelta">
            <summary>
            Compares two numbers and returns 1 if they are equal or 0 if they are not. 
            </summary>
            <remarks>
            <p class="body">DELTA(number1, [number2])
            <br/>
            Number1 is a number.
            <br/>
            Number2 is a number. If Number2 is not specified, Number1 will be compared to 0.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDelta.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDelta.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDelta.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDelta.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionGeStep">
            <summary>
            Compares two numbers and returns 1 the first number is greater than or equal to the second or returns 0 if not.
            </summary>
            <remarks>
            <p class="body">GESTEP(number, [step])
            <br/>
            Number is a number.
            <br/>
            Step is a number. If step is not specified, Number will be compared to 0.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionGeStep.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionGeStep.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionGeStep.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionGeStep.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionComplex">
            <summary>
            Returns a complex number represented as a string in the format "x + yi" or "x + yj" by comining a real and imaginary number.
            </summary>
            <remarks>
            <p class="body">COMPLEX(realNumber, imaginaryNumber, [suffix])
            <br/>
            RealNumber is the real coefficient of the complex number.
            <br/>
            ImaginaryNumber is the imaginary coefficient of the number.
            <br/>
            Suffix specifies the suffix to use. The acceptable values are "i" or "j". If omitted, "i" is used. Note that the suffix is case-sensitive; upper case "I" and "J" are not allowed and will result in a #VALUE error.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionComplex.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionComplex.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionComplex.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionComplex.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImAbs">
            <summary>
            Returns the absolute value of a complex number.
            </summary>
            <remarks>
            <p class="body">IMABS(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImAbs.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImAbs.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImAbs.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImAbs.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImaginary">
            <summary>
            Returns the imaginary coefficient of a complex number.
            </summary>
            <remarks>
            <p class="body">IMAGINARY(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImaginary.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImaginary.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImaginary.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImaginary.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImArgument">
            <summary>
            Returns the argument theta, and angle expressed in radians.
            </summary>
            <remarks>
            <p class="body">IMARGUMENT(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImArgument.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImArgument.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImArgument.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImArgument.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImConjugate">
            <summary>
            Returns the conjugate of a complex number.
            </summary>
            <remarks>
            <p class="body">IMCONJUGATE(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImConjugate.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImConjugate.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImConjugate.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImConjugate.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImCos">
            <summary>
            Returns the cosine of a complex number.
            </summary>
            <remarks>
            <p class="body">IMCOS(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImCos.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImCos.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImCos.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImCos.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImDiv">
            <summary>
            Returns the quotient of two complex numbers.
            </summary>
            <remarks>
            <p class="body">IMDIV(dividend, divisor)
            <br/>
            Dividend is a complex number in the format: "x + yi" or "x + yj".
            <br/>
            Divisor is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImDiv.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImDiv.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImDiv.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImDiv.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImExp">
            <summary>
            Returns the exponential of a complex number.
            </summary>
            <remarks>
            <p class="body">IMEXP(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImExp.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImExp.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImExp.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImExp.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLn">
            <summary>
            Returns the natural logarithm of a complex number.
            </summary>
            <remarks>
            <p class="body">IMLN(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLn.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLn.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLn.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLn.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImReal">
            <summary>
            Returns the real coefficient of a complex number.
            </summary>
            <remarks>
            <p class="body">IMREAL(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImReal.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImReal.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImReal.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImReal.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSub">
            <summary>
            Returns the difference between two complex numbers.
            </summary>
            <remarks>
            <p class="body">IMSUB(complexNumber1, complexNumber2)
            <br/>
            ComplexNumber1 is a complex number in the format: "x + yi" or "x + yj" from which ComplexNumber2 will be subtracted.
            <br/>
            ComplexNumber2 is a complex number in the format: "x + yi" or "x + yj" which will be subtracted from ComplexNumber1.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSub.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSub.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSub.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSub.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImProduct">
            <summary>
            Returns the product of 1 to n complex numbers. 
            </summary>
            <remarks>
            <p class="body">IMPRODUCT(complexNumber1 [, complexNumber2, complexNumber3, ..., complexNumberN])
            <br/>    
            ComplexNumber1, ComplexNumber2, ..., ComplexNumberN is any number of complex numbers in the format: "x + yi" or "x + yj" which will be multiplied together.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImProduct.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImProduct.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImProduct.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImProduct.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSum">
            <summary>
            Returns the sum of 1 to n complex numbers. 
            </summary>
            <remarks>
            <p class="body">IMSUM(complexNumber1 [, complexNumber2, complexNumber3, ..., complexNumberN])
            <br/>    
            ComplexNumber1, ComplexNumber2, ..., ComplexNumberN is any number of complex numbers in the format: "x + yi" or "x + yj" which will be added together.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSum.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSum.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSum.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSum.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLog10">
            <summary>
            Returns the base-10 logarithm of a complex number.
            </summary>
            <remarks>
            <p class="body">IMLOG10(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLog10.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLog10.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLog10.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLog10.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLog2">
            <summary>
            Returns the base-2 logarithm of a complex number.
            </summary>
            <remarks>
            <p class="body">IMLOG2(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLog2.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLog2.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLog2.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImLog2.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSin">
            <summary>
            Returns the sine of a complex number.
            </summary>
            <remarks>
            <p class="body">IMSIN(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSin.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSin.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSin.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSin.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSqrt">
            <summary>
            Returns the square root of a complex number.
            </summary>
            <remarks>
            <p class="body">IMSQRT(complexNumber)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSqrt.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSqrt.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSqrt.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImSqrt.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionImPower">
            <summary>
            Returns the complex number raised to the specified power. 
            </summary>
            <remarks>
            <p class="body">IMPOWER(complexNumber, power)
            <br/>
            ComplexNumber is a complex number in the format: "x + yi" or "x + yj".    
            <br/>
            Power is the power to which ComplexNumber will be raised. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionImPower.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImPower.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImPower.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionImPower.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDollarFr">
            <summary>
            Converts a dollary amount expressed as a decimal into a dollar amount expressed as a fraction. 
            </summary>
            <remarks>
            <p class="body">DollarFr(decimalDollarAmount, Fraction)
            <br/>
            DecimalDollarAmount is the dollar amount expressed as a decimal. 
            <br/>
            Fraction is the value used as the denominator of the fraction. If this value is not an integer, it will be truncated. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDollarFr.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDollarFr.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDollarFr.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDollarFr.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDollarDe">
            <summary>
            Converts a dollary amount expressed as a decimal into a dollar amount expressed as a fraction. 
            </summary>
            <remarks>
            <p class="body">DollarFr(decimalDollarAmount, Fraction)
            <br/>
            DecimalDollarAmount is the dollar amount expressed as a decimal. 
            <br/>
            Fraction is the value used as the denominator of the fraction. If this value is not an integer, it will be truncated. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDollarDe.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDollarDe.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDollarDe.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDollarDe.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionInfo">
            <summary>
            Returns information about the current operating environment. 
            </summary>
            <remarks>
            <p class="body">INFO(type)
            <br/>
            Type is a string indicating the type of information to return.
            <br/>
            "directory" = The full path to the current folder.
            "osversion" = The currently operating system version as a string. 
            "system" = The current operating system. This will always return "pcdos" which indicates Microsoft Windows. The corresponding function in Excel can also return "mac" for Macintosh, but since NetAdvantage is only supported in Windows, this function will always return "pcdos". 
            <br/>
            The following are supported by Microsoft Excel, but have no correlation in UltraCalcManager: "numfile", "origin", "recalc", "release".
            <br/>
            The following are supported in older versions of Excel, but not Office2007, and have no correlation in UltraCalcManager: "memavail", "memused", "totmem".
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionInfo.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionInfo.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionInfo.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionInfo.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionN">
            <summary>
            Converts a value to a number.
            </summary>
            <remarks>
            <p class="body">N(value)
            <br/>
            Value is the value to be converted to a number. The following are acceptable values:
            <br/>
            A number - returns the number.
            A date - returns the date.
            True - returns 1.
            False - returns 0.
            An error value - returns the error value. 
            Any other value - returns 0.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionN.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionN.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionN.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionN.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionFact">
            <summary>
            Returns the factorial of a number.
            </summary>
            <remarks>
            <p class="body">FACT(number)
            <br/>
            Number is a positive number for which the factorial will be calculated. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionFact.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFact.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFact.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFact.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionFactDouble">
            <summary>
            Returns the double factorial of a number.
            </summary>
            <remarks>
            <p class="body">FACTDOUBLE(number)
            <br/>
            Number is a positive number for which the double factorial will be calculated. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionFactDouble.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFactDouble.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFactDouble.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFactDouble.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionCombin">
            <summary>
            Returns the number of possible combinations given a set of items and a number of chosen items from that set.
            </summary>
            <remarks>
            <p class="body">Combin(number, numberChosen)
            <br/>
            Number is the number of items.    
            <br/>
            NumberChosen is the number of items chosen in each combination.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionCombin.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCombin.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCombin.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCombin.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionDegrees">
            <summary>
            Converts radians to degrees.
            </summary>
            <remarks>
            <p class="body">DEGREES(radians)
            <br/>
            Radians is a value in radians which will be converted to degrees.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionDegrees.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDegrees.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDegrees.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionDegrees.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionRadians">
            <summary>
            Converts degrees to radians.
            </summary>
            <remarks>
            <p class="body">RADIANS(degrees)
            <br/>
            Degrees is a value in degrees which will be converted to radians.     
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionRadians.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRadians.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRadians.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRadians.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionGcd">
            <summary>
            Returns the greatest common divisor of integer values. 
            </summary>
            <remarks>
            <p class="body">GCD(number1, [number2, number3, ..., numberN])
            <br/>
            Number1, Number2, ..., NumberN is any number of integers. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionGcd.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionGcd.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionGcd.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionGcd.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionLcm">
            <summary>
            Returns the least common multiple of integer values.
            </summary>
            <remarks>
            <p class="body">LCM(number1, [number2, number3, ..., numberN])
            <br/>
            Number1, Number2, ..., NumberN is any number of integers. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionLcm.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLcm.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLcm.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionLcm.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMultinomial">
            <summary>
            Returns the multinomial of a set of numbers. 
            </summary>
            <remarks>
            <p class="body">MULTINOMIAL(number1, [number2, number3, ..., numberN])
            <br/>
            Number1, Number2, ..., NumberN is any number of numbers. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMultinomial.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMultinomial.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMultinomial.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMultinomial.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionMRound">
            <summary>
            Rounds a number to the nearest multiple of another number.
            </summary>
            <remarks>
            <p class="body">MRound(number, multiple)
            <br/>
            Number is a number to be rounded.
            <br/>
            Multiple is a number indicating the multiple to which to round.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMRound.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMRound.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMRound.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMRound.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionRandBetween">
            <summary>
            Generates a pseudorandom integer between two specified numbers. 
            </summary>
            <remarks>
            <p class="body">RANDBETWEEN(bottom, top)
            <br/>
            Bottom is the minumum value that will be returned.
            <br/>
            Top is the maximum value that will be returned.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionRandBetween.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack
            </summary>
            <param name="numberStack">Formula number stack containing function arguments</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRandBetween.Name">
            <summary>
            Function name used to reference the function in a formula
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRandBetween.MinArgs">
            <summary>
            Minimum number of arguments required for the function
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRandBetween.MaxArgs">
            <summary>
            Maximum number of arguments required for the function
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoman">
            <summary>
            Converts a number into a roman number as a string.
            </summary>
            <remarks>
            <p class="body">ROMAN(number, form)
            <br/>
            Number is the number to convert to roman numerals.
            <br/>
            Form is a number or boolean value indicating whether to use classic roman numerals or a more concise version. 
            <br/>
            0  = (Default) Classic. (499 = "CDXCIX")
            1  = More concise. (499 = "LDVLIV")
            2  = More concise. (499 = "XDIX")
            3  = More concise. (499 = "VDIV")
            4  = Simplified. (499 = "ID")
            TRUE  = Classic. 
            FALSE = Simplified. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoman.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoman.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoman.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoman.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoundDown">
            <summary>
            Rounds a number to down to the specified number of digits. 
            </summary>
            <remarks>
            <p class="body">ROUNDDOWN(number, digits)
            <br/>
            Number is a number to be rounded down.
            <br/>
            Digits indicates the number of decimal places to round to. Positive numbers indicates places after the decimal point, negative numbers indicate places before the decimal point.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoundDown.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoundDown.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoundDown.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoundDown.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoundUp">
            <summary>
            Rounds a number to up to the specified number of digits.
            </summary>
            <remarks>
            <p class="body">ROUNDUP(number, digits)
            <br/>
            Number is a number to be rounded up.
            <br/>
            Digits indicates the number of decimal places to round to. Positive numbers indicates places after the decimal point, negative numbers indicate places before the decimal point.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoundUp.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoundUp.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoundUp.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRoundUp.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionSeriesSum">
            <summary>
            Returns the sum of a power series.
            </summary>
            <remarks>
            <p class="body">SERIESSUM(inputValue, initialPower, step, coefficient1 [, coefficient2, coefficient3, ..., coefficientN])
            <br/>
            InputValue is the input value to the power series. 
            <br/>
            InitialPower is the initial power to which X will be raised.
            <br/>
            Step is the step which will be used to increase N for each term in the series. 
            <br/>
            Coefficient1, Coefficient2, ..., CoefficientN is a set of coefficients by which each successive power of X is multiplied.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSeriesSum.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSeriesSum.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSeriesSum.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSeriesSum.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionSign">
            <summary>
            Returns the sign of a number. (-1, 0, or 1)
            </summary>
            <remarks>
            <p class="body">SIGN(number)
            <br/>
            The number whose sign wil be returned. 
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSign.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSign.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSign.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSign.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionSqrtPi">
            <summary>
            Returns the square root of the specified number times Pi.
            </summary>
            <remarks>
            <p class="body">SQRTPI(number)
            <br/>
            The number which will be multiplied by Pi.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSqrtPi.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSqrtPi.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSqrtPi.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSqrtPi.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionChoose">
            <summary>
            The CHOOSE function returns one of the values provided in its arguments based on the number in the first argument.
            </summary>
            <remarks>
            <p class="body">CHOOSE(index_num, value1, [value2, ..., valueN])
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionChoose.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionChoose.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionChoose.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionChoose.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionAddress.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAddress.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAddress.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAddress.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionAreas.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAreas.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAreas.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionAreas.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionColumn.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionColumn.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionColumn.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionColumn.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionColumns.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionColumns.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionColumns.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionColumns.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTwoMatrixFunction.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTwoMatrixFunction.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionCorrel.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCorrel.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionCovar.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionCovar.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionForecast.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionForecast.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionForecast.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionForecast.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionHyperlink.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHyperlink.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHyperlink.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionHyperlink.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIndex.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIndex.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIndex.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIndex.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIndirect.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIndirect.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIndirect.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIndirect.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionIntercept.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionIntercept.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMdeterm.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMdeterm.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMdeterm.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMdeterm.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinverse.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinverse.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinverse.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMinverse.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionMmult.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMmult.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMmult.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionMmult.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionOffset.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOffset.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOffset.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionOffset.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionPearson.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionPearson.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionRow.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRow.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRow.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRow.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionRows.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRows.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRows.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRows.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionRsq.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionRsq.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSlope.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSlope.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSteyx.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSteyx.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSumproduct.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSumproduct.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSumproduct.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSumproduct.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSumx2my2.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSumx2my2.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSumx2py2.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSumx2py2.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionSumxmy2.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionSumxmy2.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionTranspose.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTranspose.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTranspose.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionTranspose.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionXLIntersect.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXLIntersect.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXLIntersect.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXLIntersect.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionXLRange.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXLRange.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXLRange.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXLRange.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionXLUnion.Evaluate(Infragistics.Excel.CalcEngine.ExcelCalcNumberStack,System.Int32)">
            <summary>
            Evaluates the function against the arguments on the number stack.
            </summary>
            <param name="numberStack">Formula number stack containing function arguments.</param>
            <param name="argumentCount">Denotes the number of function arguments pushed onto the number stack.</param>
            <returns>An UltraCalcValue represents the result of the function evaluation.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXLUnion.Name">
            <summary>
            Function name used to reference the function in a formula.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXLUnion.MinArgs">
            <summary>
            Minimum number of arguments required for the function.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionXLUnion.MaxArgs">
            <summary>
            Maximum number of arguments required for the function.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionFactory">
            <summary>
            Class used to manage the stock and user defined <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcFunction"/> instances
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionFactory.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFunctionFactory"/>
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionFactory.Add(Infragistics.Excel.CalcEngine.ExcelCalcFunction)">
            <summary>
            Adds the specified function to the function list.
            </summary>
            <param name="function">Function to add</param>
            <returns>A boolean indicating if the function was added.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionFactory.AddLibrary(System.Reflection.Assembly)">
            <summary>
            Adds a library of user defined functions contained in the given assembly.
            </summary>
            <param name="assembly">Loaded assembly containing a library of user defined functions</param>
            <remarks>
            <p class="body">
            Once the assembly is loaded, any type that derives from <b>UltraCalcFunction</b> will be registered with the function factory
            </p>
            </remarks>
            <returns>True if the function library was successfully loaded and its functions registered, else false</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcFunctionFactory.GetOperator(Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction)">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcFunction"/> for the specified operator enumeration
            </summary>
            <param name="operatorType">Operator whose function should be returned.</param>
            <returns>The <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcFunction"/> associated with the specified enumeration.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcFunctionFactory.Item(System.String)">
            <summary>
            Returns the function with the specified name
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.ExcelCalcNumberStack">
            <summary>
            Stack of <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcValue"/> instances used to evaluate formulas.  
            </summary>
            <remarks>
            <p class="body">
            The number stack is used by the <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcFormulaBase"/> class to evaluate formulas.  When formulas are compiled, the formula tokens are 
            placed in a collection in post-fix, or Reverse Polish Notation (RPN) format.  RPN format arranges the formula token list so each 
            sub-expressions's terms are placed before their operator, and sub-expressions are ordered to enforce correct operator precedence.
            This format allows the formula evaluate method to loop through the formula token collection front to back pushing an operator's terms onto 
            the number stack until an operator is reached.  Each time an operator is reached, it's subexpression is computed and resulting value pushed 
            onto the number stack.  Once the end of the end of the formula collection is reached, the formulas calculated value is at the top of the 
            number stack.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcNumberStack.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcNumberStack"/>
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcNumberStack.Push(Infragistics.Excel.CalcEngine.ExcelCalcValue)">
            <summary>
            Push a value onto number stack.
            </summary>
            <param name="value">Value to push onto the number stack</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcNumberStack.Pop">
            <summary>
            Pop value off top of the number stack.
            </summary>
            <returns>UltraCalcValue that was at the top of the number stack.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcNumberStack.Peek">
            <summary>
            Return value off top of the number stack.
            </summary>
            <returns>UltraCalcValue that is at the top of the number stack.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcNumberStack.Clear">
            <summary>
            Remove all values from number stack.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcNumberStack.Reset(System.Int32)">
            <summary>
            Clear elements off top of number stack until it contains given number of elements
            </summary>
            <param name="elements">Denotes the desired stack level</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcNumberStack.Count">
            <summary>
            Return the number of values on number stack
            </summary>
            <returns>Number of stack values</returns>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection">
            <summary>
            Manages a collection of <see cref="T:Infragistics.Excel.CalcEngine.IExcelCalcReference"/> objects
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection"/>
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.#ctor(Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection"/> from another reference collection		
            </summary>
            <param name="copy">The original collection from which to copy.</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.Merge(Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection)">
            <summary>
            Adds the contents of the specified <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection"/> into this instances collection.
            </summary>
            <param name="merge">Collection whose contents should be merged with this list.</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.Add(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Add an <b>IUltraCalcReference> elements to the collection</b>
            </summary>
            <param name="reference">Element to add to collection</param>
            <returns>Ordinal Position within collection where element was inserted </returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.Insert(System.Int32,Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Insert an <b>IUltraCalcReference> elements to the collection</b>
            </summary>
            <param name="pos">Ordinal postion to insert reference</param>
            <param name="reference">Reference element to be inserted into collecction</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.Remove(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Remove <b>IUltraCalcReference</b> element from collection
            </summary>
            <param name="reference">Element to be removed from collection</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.RemoveAt(System.Int32)">
            <summary>
            Remove element at given postion from collection
            </summary>
            <param name="pos">Ordinal index denoting element to remove</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.IndexOf(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Return ordinal index of given element
            </summary>
            <param name="reference">Element whose position is desired</param>
            <returns>Ordinal index of reference</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copys the collection to an array.
            </summary>
            <param name="array">Array used for the desitnation of the copy.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.GetEnumerator">
            <summary>
            Returns the collection enumerator.
            </summary>
            <returns>Collection enumerator.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.Item(System.Int32)">
            <summary>
            Indexer method that returns a <b>IUltraCalcReference</b> by position
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.IsSynchronized">
            <summary>
            Denotes whether the collection is thread-safe.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.Count">
            <summary>
            Returns a number of elements in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcReferenceCollection.SyncRoot">
            <summary>
            Returns an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.HashSet.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.HashSet.Add(System.Object)">
            <summary>
            Adds the item to the set. If the item already exists in the set, does nothing.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.HashSet.Remove(System.Object)">
            <summary>
            Removes the specified item from the set. If the item doesn't exist in the set
            does nothing.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.HashSet.Exists(System.Object)">
            <summary>
            Returns true if the specified item exists in this set.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.HashSet.AddItems(Infragistics.Excel.CalcEngine.HashSet)">
            <summary>
            Adds items from the specified set to this set.
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.HashSet.GetUnion(Infragistics.Excel.CalcEngine.HashSet,Infragistics.Excel.CalcEngine.HashSet)">
            <summary>
            Calculates the union of the specified sets.
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.HashSet.GetIntersection(Infragistics.Excel.CalcEngine.HashSet,Infragistics.Excel.CalcEngine.HashSet)">
            <summary>
            Calculates the intersection of the specified sets.
            </summary>
            <param name="set1"></param>
            <param name="set2"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.HashSet.DoesIntersect(Infragistics.Excel.CalcEngine.HashSet)">
            <summary>
            Returns true of the specified set and this set intersect.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.HashSet.IsSubsetOf(Infragistics.Excel.CalcEngine.HashSet)">
            <summary>
            Returns true if this set is a subset of the specified set.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.HashSet.Clear">
            <summary>
            Clears the set.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.HashSet.GetEnumerator">
            <summary>
            Returns a new enumerator that enumerates all the elements of this set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.HashSet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all the elements of this set to the spcified array starting at the specified index in the array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.HashSet.ToArray(System.Type)">
            <summary>
            Returns an array containing all the elements of this set.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.HashSet.Count">
            <summary>
            Returns the number of items contained in the set.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.HashSet.IsEmpty">
            <summary>
            Returns true if the set is empty, that is it has no elements.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.HashSet.IsSynchronized">
            <summary>
            Indicates whether this data structure is synchronized.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.HashSet.SyncRoot">
            <summary>
            Returns the object that can be used to synchronize the access to this data structure.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.ExcelCalcErrorCode">
            <summary>
            Enumeration of error codes assigned to <b>UltraCalcErrorValue</b>
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.ExcelCalcErrorCode.Reference">
            <summary>
            Occurs when an invalid or disconnected reference is encountered while evaluating a formula
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.ExcelCalcErrorCode.Value">
            <summary>
            Occurs when the wrong type of argument or operand is used in a formula
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.ExcelCalcErrorCode.Div">
            <summary>
            Occurs when a number is divided by zero (0)
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.ExcelCalcErrorCode.NA">
            <summary>
            Occurs when @NA is entered into a formula
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.ExcelCalcErrorCode.Num">
            <summary>
            Occurs with invalid numeric values in a formula or function
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.ExcelCalcErrorCode.Circularity">
            <summary>
            Occurs when a circularity formula is used when circularities are not allowed.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.ExcelCalcErrorCode.Null">
            <summary>
            Occurs when there is an intersection of two references that do not contain any common cells.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.ExcelCalcErrorCode.Name">
            <summary>
            Occurs when text in a formula is not recognized.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcErrorException">
            <summary>
            Exception containing an <b>UltraCalcErrorValue</b>
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcException">
            <summary>
            Generic UltraCalc Exception.  All UltraCalc Exceptions derive from this so that a developer can
            easily turn off our exceptions during debugging.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcException.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcException"/>
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcException.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcException"/> with the specified error message
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcException"/> with the specified error message and exception instance.
            </summary>
            <param name="message">Error message</param>
            <param name="innerException">The exception that caused this exception</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcErrorException.#ctor(Infragistics.Excel.CalcEngine.ExcelCalcErrorValue)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.UltraCalcErrorException"/> using the specified <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue"/>
            </summary>
            <param name="errorValue">The UltraCalcErrorValue that has generated the exception.</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcErrorException.ToString">
            <summary>
            Returns the string representation of the underlying error value.
            </summary>
            <returns>The string representation of the underlying error value.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcErrorException.Value">
            <summary>
            Get the <b>UltraCalcErrorValue</b> associated with the exception
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue">
            <summary>
            Provides methods and properties used to define and manage an <b>UltraCalc</b> error value
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue.#ctor(Infragistics.Excel.CalcEngine.ExcelCalcErrorCode)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue"/> with the specified error code.
            </summary>
            <param name="code"><b>UltraCalcErrorCode</b> value to assign this instance</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue.#ctor(Infragistics.Excel.CalcEngine.ExcelCalcErrorCode,System.String)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue"/> with the specified error code and error message
            </summary>
            <param name="code"><b>UltraCalcErrorCode</b> value</param>
            <param name="message">Localized Message indicating reason for error</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue.#ctor(Infragistics.Excel.CalcEngine.ExcelCalcErrorCode,System.String,System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue"/> with the specified error code, message and error value.
            </summary>
            <param name="code"><b>UltraCalcErrorCode</b> value</param>
            <param name="message">Localized Message indicating reason for error</param>
            <param name="value">Value associated with error</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue.ToString">
            <summary>
            Return a string message that denotes reason for error
            </summary>
            <returns>String containing error message</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue.RaiseException">
            <summary>
            Raise an <b>UltraCalcErrorException</b> exception containing this class's error information
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue.Code">
            <summary>
            Gets the error code for this class instance
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue.Message">
            <summary>
            Gets error message for this class instance. Note that when setting this property the 
            message is assumed to be localized.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue.ErrorValue">
            <summary>
            Gets the error object for this class instance
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcReferenceError">
            <summary>
            Implementation of <b>IUltraCalcReference</b> interface that denotes a reference error
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UltraCalcReferenceError.#ctor(System.String,System.String)">
            <summary>
            Reference string constructor
            </summary>
            <param name="reference">Absolute name of reference</param>
            <param name="message">Localized Error message</param>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UltraCalcReferenceError.Message">
            <summary>
            Get reference error message
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.ExcelCalcValue">
            <summary>
            Provides methods that manage a composite data type representing an <b>UltraCalc</b> value.
            </summary>
            <remarks>
            <p class="body">
            An instance of this class may contain one of several base data types including doubles, singles, integers, booleans, strings, and error values.  
            <p></p>
            The class implements the IConvertible interface providing methods to perform conversions between the basic data types.  
            <p></p>
            Additionally the class provides methods to perform basic arithetic operations and comparisons between <b>UltraCalcValue</b> objects.
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.ExcelCalcValue.value">
            <summary>
            Storage for the underlying data type
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.#ctor(System.Object)">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcValue"/>
            </summary>
            <param name="value">Object to be represented by the UltraCalcValue</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToInt">
            <summary>
            Convert this class instance's value to an int
            </summary>
            <returns>A signed 32-bit integer value containing the equivalent value of this instance</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToInt(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to an int
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A signed 32-bit integer value containing the equivalent value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion to an integer this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ExceptionHandler(System.Exception)">
            <summary>
            Set this class's instance to an <b>UltraCalcErrorValue</b> based on the given exception
            </summary>
            <param name="e">Exception whose value is used to set this instance's error value</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToReference">
            <summary>
            Convert this instance's value to a <see cref="T:Infragistics.Excel.CalcEngine.IExcelCalcReference"/>.
            </summary>
            <returns>If this instance contains a object that implements the <see cref="T:Infragistics.Excel.CalcEngine.IExcelCalcReference"/> interface, this method returns the object instance, else a <b>UltraCalcReferenceError</b> is returned</returns>
            <remarks>
            <p class="body">
            The instance value's underlying data type must be reference to return a reference, else a <b>UltraCalcReferenceError</b> is returned.
            <p></p>
            If there is no meaningful conversion to a reference, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToErrorValue">
            <summary>
            Convert this instance's value to an <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue"/>
            </summary>
            <returns>A <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue"/> containing the equivalent error code to the value of this instance</returns>
            <remarks>
            <p class="body">
            This method returns an <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue"/> whose error code is set this instance's error code.
            <p></p>
            If there this instance does not contain an error, a <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcErrorValue"/> containing a default value is returned
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToString">
            <summary>
            Returns a string representation of this instance's value.
            </summary>
            <returns>String representation of instance's value</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.AreValuesEqual(Infragistics.Excel.CalcEngine.ExcelCalcValue,Infragistics.Excel.CalcEngine.ExcelCalcValue)">
            <summary>
            Indicates if the value of the specified <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcValue"/> is equivalent to the <see cref="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.Value"/>
            </summary>
            <param name="x">First <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcValue"/> to compare</param>
            <param name="y">Second <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcValue"/> to compare</param>
            <returns>True if the values are the same; otherwise false is returned.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.CompareTo(Infragistics.Excel.CalcEngine.ExcelCalcValue)">
            <summary>
            Compares current instance with the passed in <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcValue"/> instance. Returns 
            -1, 1 or 0 depending on whether the current instance is less than, greater than
            or equal to the passed in instance respectively.
            </summary>
            <param name="value">The object that this instance should be compared against.</param>
            <returns>-1, 1 or 0 depending on whether the current instance is less than, greater than
            or equal to the passed in instance respectively.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.CompareTo(Infragistics.Excel.CalcEngine.ExcelCalcValue,Infragistics.Excel.CalcEngine.ExcelCalcValue)">
            <summary>
            Compares x and y <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcValue"/> instances and returns -1 if x is less than y, 
            1 if x is greater than y and 0 if x and y are equal.
            </summary>
            <param name="x">The first value to compare.</param>
            <param name="y">The value to compare with the first value.</param>
            <returns>-1, 1 or 0 depending on whether the current instance is less than, greater than
            or equal to the passed in instance respectively.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.IsSameValue(Infragistics.Excel.CalcEngine.ExcelCalcValue)">
            <summary>
            Indicates if the specified <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcValue"/> has the save <see cref="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.Value"/> as this instance.
            </summary>
            <param name="value">UltraCalcValue to compare against</param>
            <returns>True if the <see cref="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.Value"/> of both instances are equal; otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.GetResolvedValue">
            <summary>
            Gets the resolved value of the reference. This method will walk down the reference chain recursively to get the resolved value of the reference that is not just another reference. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a ulong data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>An 64-bit unsigned integer equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a SByte data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>An 8-bit signed integer equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToDouble">
            <summary>
            Convert this class instance's value to a double data type
            </summary>
            <seealso cref="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToDouble(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToDouble(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a double data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A double-precision floating-point equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToDouble(System.Double@)">
            <summary>
            Converts the <see cref="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.Value"/> to a double data type
            </summary>
            <param name="result">The resulting double value. If the return value is false, the result is 0.</param>
            <returns>True if the value was successfully converted to a double; otherwise false.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToDateTime">
            <summary>
            Convert this class instance's value to a DateTime data type
            </summary>
            <seealso cref="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToDateTime(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToDateTime(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a DateTime data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A <b>DateTime</b> equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToSingle">
            <summary>
            Convert this class instance's value to a float data type
            </summary>
            <seealso cref="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToSingle(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToSingle(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a float data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A single-precision floating-point equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToBoolean">
            <summary>
            Convert this class instance's value to a boolean data type
            </summary>
            <seealso cref="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToBoolean(System.IFormatProvider)"/>
            <returns>A boolean floating-point equivalent to the value of this instance</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToBoolean(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a boolean data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A boolean floating-point equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToInt32">
            <summary>
            Convert this class instance's value to a int data type
            </summary>
            <seealso cref="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToInt32(System.IFormatProvider)"/>
            <returns>A 32-bit signed integer floating-point equivalent to the value of this instance</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToInt32(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a int data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A 32-bit signed integer floating-point equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a ushort data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A 16-bit unsigned integer floating-point equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToInt16">
            <summary>
            Convert this class instance's value to a short data type
            </summary>
            <seealso cref="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToInt16(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToInt16(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a short data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A 16-bit signed integer floating-point equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToString(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a string instance data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A string instance equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToByte">
            <summary>
            Convert this class instance's value to a byte data type
            </summary>
            <seealso cref="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToByte(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToByte(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a byte data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A 8-bit unsigned integer equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToChar">
            <summary>
            Convert this class instance's value to a char data type
            </summary>
            <seealso cref="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToChar(System.IFormatProvider)"/>
            <returns>A Unicode character equivalent to the value of this instance</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToChar(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a char type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A Unicode character equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToInt64">
            <summary>
            Convert this class instance's value to a long data type
            </summary>
            <seealso cref="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToInt64(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToInt64(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a long data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A 64-bit signed integer equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.GetTypeCode">
            <summary>
            Returns the <b>TypeCode</b> for this instance
            </summary>
            <returns>The enumerated constant that is the <b>TypeCode</b> of the class or value type that implements this interface.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToDecimal">
            <summary>
            Convert this class instance's value to a decimal data type
            </summary>
            <seealso cref="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToDecimal(System.IFormatProvider)"/>
            <returns>A <b>Decimal</b> equivalent to the value of this instance</returns>
            <seealso cref="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToDecimal(System.IFormatProvider)"/>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToDecimal(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a decimal data type
            </summary>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>A <b>Decimal</b> equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a uint data type
            </summary>
            <param name="conversionType">The <b>Type</b> to which the value of this instance is converted</param>
            <param name="provider">An <b>IFormatProvider</b> interface implementation that supplies culture-specific formatting information</param>
            <returns>An Object instance of type conversionType whose value is equivalent to the value of this instance.</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Convert this class instance's value to a uint data type
            </summary>
            <param name="provider">Format provider to use in conversion</param>
            <returns>A 32-bit unsigned integer equivalent to the value of this instance</returns>
            <remarks>
            <p class="body">
            If there is no meaningful conversion, this method will throw an <b>InvalidCastException</b>
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.DateTimeToExcelDate(Infragistics.Excel.Workbook,System.DateTime)">
            <summary>
            Converts a DateTime to Excel's numerical representation of a date.
            </summary>
            <remarks>
            <p class="body">
            When using the 1900 date system in Excel, dates before 3/1/1900 must be corrected, because Excel 
            incorrectly assumes 1900 is a leap year. This overload assumes the 1900 date system is being used
            as so it corrects the date values.
            </p>
            </remarks>
            <param name="dateValue">The DateTime value to convert to the Microsoft Excel date format.</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.DateTimeToExcelDate(Infragistics.Excel.Workbook,System.DateTime,System.Boolean)">
            <summary>
            Converts a DateTime to Excel's numerical representation of a date.
            </summary>
            <param name="dateValue">The DateTime value to convert to the Microsoft Excel date format.</param>
            <param name="shouldCorrect1900Dates">
            When using the 1900 date system in Excel, dates before 3/1/1900 must be corrected, because Excel 
            incorrectly assumes 1900 is a leap year. Pass False to disable this correction.
            </param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ExcelDateToDateTime(Infragistics.Excel.Workbook,System.Double)">
            <summary>
            Converts Excel's numerical representation of a date to a DateTime.
            </summary>
            <remarks>
            <p class="body">
            When using the 1900 date system in Excel, dates before 3/1/1900 must be corrected, because Excel 
            incorrectly assumes 1900 is a leap year. This overload assumes the 1900 date system is being used
            as so it corrects the date values.
            </p>
            </remarks>
            <param name="excelDate">The Microsoft Excel date format which should be converted to a DateTime.</param>		
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ExcelDateToDateTime(Infragistics.Excel.Workbook,System.Double,System.Boolean)">
            <summary>
            Converts Excel's numerical representation of a date to a DateTime.
            </summary>
            <param name="excelDate">The Microsoft Excel date format which should be converted to a DateTime.</param>
            <param name="shouldCorrect1900Dates">
            When using the 1900 date system in Excel, dates before 3/1/1900 must be corrected, because Excel 
            incorrectly assumes 1900 is a leap year. Pass False to disable this correction.
            </param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.GetResolvedValue(System.Boolean)">
            <summary>
            Gets the resolved value of the reference. This method will walk down the reference chain recursively to get the resolved value of the reference that is not just another reference. 
            </summary>
            <remarks>
            <p class="body">
            If this is being called to use the resolved value in a calculation, <paramref name="addDynamicReferences"/> should be True. Otherwise, if this is just being used to determine
            what type of resolved value is held, <paramref name="addDynamicReferences"/> should be False.
            </p>
            </remarks>
            <param name="addDynamicReferences">If True and a reference is held by this value, the reference will be added to the dynamic references of the formula being evaluated.</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToArray">
            <summary>
            Convert this class instance's value to an array data type
            </summary>
            <returns>An array equivalent to the value of this instance</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.ExcelCalcValue.ToArrayGroup">
            <summary>
            Convert this class instance's value to an array group data type
            </summary>
            <returns>An array group equivalent to the value of this instance</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.IsReference">
            <summary>
            Returns whether this class instance contains a <see cref="T:Infragistics.Excel.CalcEngine.IExcelCalcReference"/> value
            </summary>
            <returns>True if this instance class contains a reference, else false</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.IsError">
            <summary>
            Returns whether this class instance contains an error value
            </summary>
            <returns>True if this class instance contains an error, else false</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.IsNull">
            <summary>
            Returns whether this class instance contains a null value
            </summary>
            <returns>True if this instance class contains a null value, else false</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.IsDBNull">
            <summary>
            Returns whether this class instance contains a DBNull value
            </summary>
            <returns>True if this instance class contains a null value, else false</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.IsString">
            <summary>
            Returns whether this class instance contains a string value
            </summary>
            <returns>True if this instance class contains a string, else false</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.IsBoolean">
            <summary>
            Returns whether this class instance contains a boolean value
            </summary>
            <returns>True if this instance class contains a boolean, else false</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.IsDateTime">
            <summary>
            Returns whether this class instance contains a DateTime value
            </summary>
            <returns>True if this instance class contains a DateTime, else false</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.Value">
            <summary>
            Return the underlying value
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.IsArray">
            <summary>
            Returns whether this class instance contains an array value
            </summary>
            <returns>True if this instance class contains an array, else false</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.IsArrayGroup">
            <summary>
            Returns whether this class instance contains a group of array values
            </summary>
            <returns>True if this instance class contains an array group, else false</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.ExcelCalcValue.Workbook">
            <summary>
            Gets the workbook associated with the formula being solved.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcFormulaTokenType">
            <summary>
            Identifies formula token types in the <b>UltraCalcFormulaToken</b> class
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcFormulaTokenType.Value">
            <summary>
            Indicates a value token containing an IUltraCalcReference.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcFormulaTokenType.Function">
            <summary>
            Indicates a function token containing an IUltraCalcFunction. 
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction">
            <summary>
            Enumeration of operator functions.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.Add">
            <summary>
            Operator used to add two values ("+")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.Subtract">
            <summary>
            Operator used to subtract two values ("-")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.Multiply">
            <summary>
            Operator used to multiply two values ("*")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.Divide">
            <summary>
            Operator used to divide two values ("/")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.Equal">
            <summary>
            Operator used to compare two objects for equality ("=")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.NotEqual">
            <summary>
            Operator used to compare if two values are different ("&gt;&lt;" or "!=")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.GreaterThanOrEqual">
            <summary>
            Operator used to determine if one value is greater than or equal to a second value. ("&gt;=")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.GreaterThan">
            <summary>
            Operator used to determine if one value is greater than a second value. ("&gt;")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.LessThanOrEqual">
            <summary>
            Operator used to determine if one value is less than or equal to a second value. ("&lt;=")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.LessThan">
            <summary>
            Operator used to determine if one value is less than a second value. ("&lt;")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.Concatenate">
            <summary>
            Operator used to concatenate 2 strings ("&amp;")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.Exponent">
            <summary>
            Operator used to raise a value to a specified power ("^")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly two operands/arguments.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.Percent">
            <summary>
            Operator used to convert a value to a percentage ("%")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly one operand/argument.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.UnaryMinus">
            <summary>
            Negative unary operator ("-")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly one operand/argument.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CalcEngine.UltraCalcOperatorFunction.UnaryPlus">
            <summary>
            Positive unary operator ("+")
            </summary>
            <remarks>
            <p class="note"><b>Note:</b> This operator must take exactly one operand/argument.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.RefBase">
            <summary>
            This abstract base class is used to implement the <b>IUltraCalcReference</b> interface for an
            object with a complex hierarchy of referencable elements.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.RefBase.#ctor">
            <summary>
            Initializes a new <see cref="T:Infragistics.Excel.CalcEngine.RefBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.RefBase.CreateReference(System.String)">
            <summary>
            Create a new reference relative to this reference.
            </summary>
            <param name="inReference">The reference string.</param>
            <returns>The new reference.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.RefBase.ContainsReference(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Returns true if this reference contains inReference
            </summary>
            <param name="inReference">The contained candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.RefBase.IsSubsetReference(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Returns true if inReference is a proper subset of this reference
            </summary>
            <param name="inReference">The subset candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.RefBase.ToString">
            <summary>
            Returns a string representation of the reference based on the reference type and absolute name.
            </summary>
            <returns>A string representation of the reference based on the reference type and absolute name.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.RefBase.GetHashCode">
            <summary>
            Overridden. Default implementation returns the hash code of the normalized absolute name.
            These objects are going to be added to data structure that make use of GetHashCode and 
            Equals methods. What this means is that the normalized absolute name must not change 
            throughout the lifetime of this instance. If it does change then the overriding class 
            must override this method and return a hash code based on some other immutable property 
            of the instance.
            </summary>
            <returns>A hash code of the normalized absolute name.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.RefBase.Equals(System.Object)">
            <summary>
            Overriden. Default implementation returns true if the normalized absolute names of this
            reference and the passed in reference match. These objects are going to be added to data 
            structure that make use of GetHashCode and Equals methods. What this means is that the 
            normalized absolute name must not change throughout the lifetime of this instance. If it 
            does change then the overriding class must override this method and return a hash code 
            based on some other immutable property of the instance.
            </summary>
            <param name="obj">The reference to compare with this instance.</param>
            <returns>True if the normalized absolute names of this reference and the passed in reference match</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.RefBase.Context">
            <summary>
            Returns a context for the Reference.
            </summary>
            <remarks><p class="body">Returns a meaningful object context for the reference. This could be an UltraGridCell, UltraGridColumn, NamedReference, Control, etc.</p></remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.RefBase.AbsoluteName">
            <summary>
            The fully qualified unique name for the referenced element.  Read Only.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.RefBase.NormalizedAbsoluteName">
            <summary>
            Returns the normalized absolute name. UltraCalcEngine makes use of normalized
            absolute names of references to compare two references and search for references.
            This property should return the absolute name with case insensitive parts of
            the absolute names converted to lower case.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.RefBase.ElementName">
            <summary>
            The unqualified name of this referenced element.  Used to construct the fully qualified name by the
            <b>AbsoluteName</b> method. Read Only.
            </summary>
            <seealso cref="P:Infragistics.Excel.CalcEngine.RefBase.AbsoluteName"/>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.RefBase.Value">
            <summary>
            The <b>UltraCalcValue</b>, if any, associated with this Reference.  If this reference 
            does not contain a Value then a <b>UltraCalcErrorValue</b> is returned.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.RefBase.Formula">
            <summary>
            The <b>IUltraCalcFormula</b>, if any, associated with this Reference.  If this reference 
            can not contain a formula then null is returned.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.RefBase.References">
            <summary>
            Return a collection of references if this Reference is enumerable.  An exception is
            thrown if this reference is not enumerable.
            </summary>
            <returns>A Reference collection.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.RefBase.IsEnumerable">
            <summary>
            Returns true if this reference is enumerable.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CalcEngine.UCReference">
            <summary>
            Implements the IUltraCalcReference and provides methods to connect and disconnect from an underlying calculation object reference
            </summary>
            <remarks>
            <p class="body">
            UCReference wraps an internal IUltraCalcReference class instance that points to the underlying object.  That is, each method simply passes 
            the IUltraCalcReference request to the underlying reference if the object is connected, else it returns, or throws, an appropriate error.  
            UCReference has storage for the reference string and its underlying reference object.  
            <p></p>
            There are two additional methods on UCReference: Connect and Disconnect.  
            <p></p>
            Connect will attempt to obtain a reference to the object it refers to given a base reference and it's reference string by calling the base 
            reference's CreateReference method passing it the reference string.  If its successful, it will store the newly created reference and use 
            it to dispatch IUltraCalcReference requests against it.
            <p></p>
            Disconnect will simply free the internal reference object after which its IUltraCalcReference methods will deal with a disconnected state.
            <p></p>
            Virtually all references can be in a disconnected state at some point in their lifetime, therefore the CalcEngine uses UCReference instances to
            connect to all references.  That is, the UltraCalcFormulaCompiler.Compile method creates UCRefernces for the all references in the formula string.  The CalcEngine exposes 
            a <b>TopoChange</b> event that objects used to notify it of topological changes.  The TopoChange event passes a reference to the CalcEngine
            that describes the object that changed (e.g. column, row, grid, etc) along with a Create / Delete action argument.  
            <p></p>
            On Delete events, the CalcEngine will track down all formulas whose LHS is contained by the disconnected reference and delete them.  
            This will clean up the recalc chain and ancestor map of any references including sub-references under the deleted reference.  That is, 
            column formulas will be deleted when the event's deleted reference is an entire grid, or cell references that are on the recalc chain when 
            the deleted reference is a column.  The ContainsReference on the reference passed with the TopoChange event determines whether the event
            affects a given reference.  Secondly, all formulas who reference the deleted reference will be recalculated.
            <p></p>
            On Create events, the CalcEngine will track down all references contained by the created reference and call the Connect method passing in the 
            their formula's BaseReference.  This will cause the CalcReference to reconnect to the underlying reference.  Secondly, each re-connected 
            reference's ancestor's will be recalculated.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UCReference.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UCReference.#ctor(System.String)">
            <summary>
            Reference name constructor
            </summary>
            <param name="referenceName">Name of reference entered into formula used to create the underlying object reference</param>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UCReference.CreateReference(System.String)">
            <summary>
            Create a new reference relative to this reference.
            </summary>
            <param name="reference">The reference string.</param>
            <returns>The new reference.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UCReference.ContainsReference(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Returns true if this reference contains inReference
            </summary>
            <param name="reference">The contained candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UCReference.IsSubsetReference(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Returns true if inReference is a proper subset of this reference
            </summary>
            <param name="reference">The subset candidate.</param>
            <returns>true if inReference is contained by this reference.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UCReference.Connect(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Associates the <see cref="T:Infragistics.Excel.CalcEngine.UCReference"/> with the specified <see cref="T:Infragistics.Excel.CalcEngine.IExcelCalcReference"/>
            </summary>
            <param name="reference">New underlying reference for the instance</param>
            <returns>Returns true if the operation caused the UCReference to change so that it represents a different reference than before.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UCReference.Disconnect">
            <summary>
            Disconnects the <see cref="T:Infragistics.Excel.CalcEngine.UCReference"/> from the underlying <see cref="T:Infragistics.Excel.CalcEngine.IExcelCalcReference"/>
            </summary>
            <returns>Returns true if the operation caused the UCReference to change so that it represents a different reference than before.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UCReference.Reconnect(Infragistics.Excel.CalcEngine.IExcelCalcReference)">
            <summary>
            Disconnects from the previous reference and connects to the specified <see cref="T:Infragistics.Excel.CalcEngine.IExcelCalcReference"/>
            </summary>
            <param name="reference">New reference that should be the underlying reference for this instance</param>
            <returns>Returns true if the operation caused the UCReference to change so that it represents a different reference than before.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UCReference.GetHashCode">
            <summary>
            Overridden. Default implementation returns the hash code of the normalized absolute name.
            These objects are going to be added to data structure that make use of GetHashCode and 
            Equals methods. What this means is that the normalized absolute name must not change 
            throughout the lifetime of this instance. If it does change then the overriding class 
            must override this method and return a hash code based on some other immutable property 
            of the instance.
            </summary>
            <returns>A hash code of the normalized absolute name.</returns>
        </member>
        <member name="M:Infragistics.Excel.CalcEngine.UCReference.Equals(System.Object)">
            <summary>
            Overriden. Default implementation returns true if the normalized absolute names of this
            reference and the passed in reference match. These objects are going to be added to data 
            structure that make use of GetHashCode and Equals methods. What this means is that the 
            normalized absolute name must not change throughout the lifetime of this instance. If it 
            does change then the overriding class must override this method and return a hash code 
            based on some other immutable property of the instance.
            </summary>
            <param name="obj">The object to test for equality.</param>
            <returns>True if the normalized absolute names of this instance and the passed in reference match.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCReference.Context">
            <summary>
            Returns a context for the Reference.
            </summary>
            <remarks><p class="body">Returns a meaningful object context for the reference. This could be an UltraGridCell, UltraGridColumn, NamedReference, Control, etc.</p></remarks>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCReference.AbsoluteName">
            <summary>
            Returns the absolute name for the reference
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCReference.NormalizedAbsoluteName">
            <summary>
            Returns the normalized absolute name. UltraCalcEngine makes use normalized
            absolute names of references to compare two references and search for references.
            This property should return the absolute name with case insensitive parts of
            the absolute names converted to lower case.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCReference.ElementName">
            <summary>
            The unqualified name of this referenced element.  Used to construct the fully qualified name by the
            <b>AbsoluteName</b> method. Read Only.
            </summary>
            <seealso cref="P:Infragistics.Excel.CalcEngine.UCReference.AbsoluteName"/>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCReference.Value">
            <summary>
            The <b>UltraCalcValue</b>, if any, associated with this Reference.  If this reference 
            does not contain a Value then a <b>UltraCalcErrorValue</b> is returned.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCReference.Formula">
            <summary>
            The <b>IUltraCalcFormula</b>, if any, associated with this Reference.  If this reference 
            can not contain a formula then null is returned.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCReference.References">
            <summary>
            Return a collection of references if this Reference is enumerable.  An exception is
            thrown if this reference is not enumerable.
            </summary>
            <returns>A Reference collection.</returns>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCReference.IsEnumerable">
            <summary>
            Returns true if this reference is enumerable.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCReference.Reference">
            <summary>
            Returns the underlying reference or this instance if the object is not connected.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCReference.RootName">
            <summary>
            Returns the root name for the reference
            </summary>
        </member>
        <member name="P:Infragistics.Excel.CalcEngine.UCReference.IsConnected">
            <summary>
            Indicates if the UCReference is currently connected to an underlying <see cref="T:Infragistics.Excel.CalcEngine.IExcelCalcReference"/>
            </summary>
        </member>
        <member name="T:Infragistics.Excel.IPackageFactory">
            <summary>
            Factory class used to create an IPackage given a stream and a FileMode
            </summary>
        </member>
        <member name="M:Infragistics.Excel.IPackageFactory.Open(System.IO.Stream,System.IO.FileMode)">
            <summary>
            Opens an IPackage with a given IO stream and file mode.
            </summary>
            <param name="stream">The IO stream on which to open the IPackage.</param>
            <param name="packageMode">The file mode in which to open the IPackage.</param>
            <returns>The opened IPackage.</returns>
        </member>
        <member name="T:Infragistics.Excel.IPackage">
            <summary>
            Represents a container that can store multiple data objects.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.IPackage.CreatePart(System.Uri,System.String)">
            <summary>
            Creates a new uncompressed part with a given URI and content type.
            </summary>
            <param name="partUri">The uniform resource identifier (URI) of the new part.</param>
            <param name="contentType">The content type of the data stream.</param>
            <returns>The new created part.</returns>
        </member>
        <member name="M:Infragistics.Excel.IPackage.CreateRelationship(System.Uri,Infragistics.Excel.RelationshipTargetMode,System.String,System.String)">
            <summary>
            Creates a package-level relationship to a part with a given URI, target mode, relationship type, and identifier (ID).
            </summary>
            <param name="targetUri">The uniform resource identifier (URI) of the target part.</param>
            <param name="targetMode">Indicates if the target part is System.IO.Packaging.TargetMode.Internal or System.IO.Packaging.TargetMode.External to the package.</param>
            <param name="relationshipType">A URI that uniquely defines the role of the relationship.</param>
            <param name="id">A unique XML identifier.</param>
            <returns>The package-level relationship to the specified part.</returns>
        </member>
        <member name="M:Infragistics.Excel.IPackage.GetRelationships">
            <summary>
            Returns a collection of all the package-level relationships.
            </summary>
            <returns>A collection of all the package-level relationships that are contained in the package.</returns>
        </member>
        <member name="M:Infragistics.Excel.IPackage.GetPart(System.Uri)">
            <summary>
            Returns the part with a given URI.
            </summary>
            <param name="partUri">The uniform resource identifier (URI) of the part to return.</param>
            <returns>The part with the specified partUri.</returns>        
        </member>
        <member name="M:Infragistics.Excel.IPackage.GetParts">
            <summary>
            Returns a collection of all the parts in the package.
            </summary>
            <returns>A collection of all the System.IO.Packaging.PackagePart elements that are contained in the package.</returns>
        </member>
        <member name="M:Infragistics.Excel.IPackage.PartExists(System.Uri)">
            <summary>
            Indicates whether a part with a given URI is in the package.
            </summary>
            <param name="partUri">The System.Uri of the part to check for.</param>
            <returns>true if a part with the specified partUri is in the package; otherwise, false.</returns>
        </member>
        <member name="T:Infragistics.Excel.IPackagePart">
            <summary>
            Provides a base class for parts stored in a System.IO.Packaging.Package. This class is abstract.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.IPackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Returns the part content stream opened with a specified System.IO.FileMode and System.IO.FileAccess.
            </summary>
            <param name="mode">The I/O mode in which to open the content stream.</param>
            <param name="access">The access permissions to use in opening the content stream.</param>
            <returns>The content stream for the part.</returns>
        </member>
        <member name="M:Infragistics.Excel.IPackagePart.CreateRelationship(System.Uri,Infragistics.Excel.RelationshipTargetMode,System.String,System.String)">
            <summary>
            Creates a part-level relationship between this IPackagePart to a specified target IPackagePart or external resource.
            </summary>
            <param name="targetUri">The URI of the target part.</param>
            <param name="targetMode">One of the enumeration values. For example, RelationshipTargetMode.Internal if the target part is inside the IPackage; or RelationshipTargetMode.External if the target is a resource outside the IPackage.</param>
            <param name="relationshipType">The role of the relationship.</param>
            <param name="id">A unique ID for the relationship.</param>
            <returns>The part-level relationship between this IPackagePart to the target IPackagePart or external resource.</returns>
        </member>
        <member name="M:Infragistics.Excel.IPackagePart.GetRelationships">
            <summary>
            Returns a collection of all the relationships that are owned by this part.
            </summary>
            <returns>A collection of all the relationships that are owned by the part.</returns>
        </member>
        <member name="M:Infragistics.Excel.IPackagePart.GetRelationship(System.String)">
            <summary>
            Returns the relationship that has a specified IPackageRelationship.Id.
            </summary>
            <param name="id">The IPackageRelationship.Id of the relationship to return.</param>
            <returns>The relationship that matches the specified id.</returns>
        </member>
        <member name="P:Infragistics.Excel.IPackagePart.Package">
            <summary>
            Gets the parent Package of the part.
            </summary>        
        </member>
        <member name="P:Infragistics.Excel.IPackagePart.Uri">
            <summary>
            Gets the URI of the part.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.IPackagePart.ContentType">
            <summary>
             Gets the MIME type of the content stream.        
            </summary>
        </member>
        <member name="T:Infragistics.Excel.IPackageRelationship">
            <summary>
            Represents an association between a source IPackage or IPackagePart, and a target object which can be a IPackagePart or external resource.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.IPackageRelationship.SourceUri">
            <summary>
            Gets the URI of the package or part that owns the relationship.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.IPackageRelationship.TargetUri">
            <summary>
            Gets the URI of the target resource of the relationship.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.IPackageRelationship.Id">
            <summary>
            Gets a string that identifies the relationship.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.IPackageRelationship.RelationshipType">
            <summary>
            Gets the qualified type name of the relationship.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.IPackageRelationship.TargetMode">
            <summary>
            Gets a value that indicates whether the target of the relationship is RelationshipTargetMode.Internal or RelationshipTargetMode.External to the IPackage.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.RelationshipTargetMode">
            <summary>
            Specifies whether the target of an IPackageRelationship is inside or outside the IPackage.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.RelationshipTargetMode.Internal">
            <summary>
            The relationship references a part that is inside the package.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.RelationshipTargetMode.External">
            <summary>
            The relationship references a resource that is external to the package.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.NamedReferenceBase">
            <summary>
            Abstract base class for a named reference defined in the workbook.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.NamedReferenceBase.Name">
            <summary>
            Gets or sets the name of the reference.
            </summary>
            <remarks>
            <p class="body">
            See the overview on <see cref="P:Infragistics.Excel.NamedReferenceBase.Scope"/> for details on how to access a named reference by name in formulas.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value assigned is longer than 255 characters.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value assigned is not a valid named reference. The name must begin with a letter, underscore (_), or a backslash (\).
            All other characters in the name must be letters, numbers, periods, underscores (_), or backslashes (\).
            The name cannot be a an A1 cell reference (1 to 3 letters followed by 1 to 6 numbers). In addition, the name
            cannot be 'r', 'R', 'c', or 'C' or start with a row or column reference in R1C1 cell reference mode 
            ('R' followed by 1 to 6 numbers or 'C' followed by 1 to 6 numbers).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is the name of another named reference with the same Scope. 
            Names are compared case-insensitively.
            </exception>
            <value>The name of the reference.</value>
        </member>
        <member name="P:Infragistics.Excel.NamedReferenceBase.Scope">
            <summary>
            Gets the scope of the named reference.
            </summary>
            <remarks>
            <p class="body">
            This can either be the workbook which the named reference belongs to or one of the worksheets 
            in the workbook.
            </p>
            <p class="body">
            The scope determines how formulas need to preface a name in order to use the named reference.
            </p>
            <p class="body">
            If the scope is the workbook, formulas in any cell in the workbook can reference the named reference
            by specifying just the name or the workbook's file name, an exclamation point, and the name:
            <list type="bullet">
            <item>=MyWorkbookName</item>
            <item>='C:\MyWorkbook.xls'!MyWorkbookName</item>
            </list>
            When cells in other workbook's want to reference the named reference, they must use the second format
            by first specifying the file name when the workbook-scoped named reference exists.
            </p>
            <p class="body">
            If the scope is a worksheet, formulas in cells of the worksheet can reference the named reference
            by specifying just the name. In addition, they can fully qualify the named reference with the worksheet name
            and, optionally, the workbook file name:
            <list type="bullet">
            <item>=MyWorksheetName</item>
            <item>=Sheet1!MyWorksheetName</item>
            <item>='C:\[MyWorkbook.xls]Sheet1'!MyWorksheetName</item>
            </list>
            Formulas in cells of other worksheets in the same workbook can use the named reference as well, but they must 
            specify the worksheet name and, optionally, the workbook file name:
            <list type="bullet">
            <item>=Sheet2!OtherWorksheetName</item>
            <item>='C:\[MyWorkbook.xls]Sheet2'!OtherWorksheetName</item>
            </list>
            Formulas in cells of other workbooks can also used the named reference, but they must specify the workbook file
            name, worksheet name, and named reference name.
            </p>
            </remarks>
            <value>The scope of the named reference.</value>
        </member>
        <member name="T:Infragistics.Excel.ArrayFormula">
            <summary>
            Represents an array formula for a group of cells.
            </summary>
            <remarks>
            <p class="body">
            Array formulas are similar to regular formula in that they have the same grammar. However, array formulas must be set 
            on a single region of cells only. When the array formula is applied to a region of cells, each cell's 
            <see cref="P:Infragistics.Excel.WorksheetCell.Formula">Formula</see> property will be the array formula. The 
            <see cref="P:Infragistics.Excel.WorksheetCell.Formula">Value</see> of each cell cannot be changed unless <see cref="M:Infragistics.Excel.ArrayFormula.ClearCellRange"/> is 
            called on the array formula or another value is applied to a region of cells which completely contains the array 
            formula's region.
            </p>
            <p class="body">
            Because the array formula stores the region of the cells to which it is applied in the <see cref="P:Infragistics.Excel.ArrayFormula.CellRange"/> property, 
            the array formula can only be applied to one region of cells.
            </p>
            <p class="body">
            Array formulas are created through Microsoft Excel by selecting a region of cells, entering a formula for
            that range, and pressing Ctrl+Shift+Enter. This causes the formula of each cell in the region to appear as follows:
            {=Formula}.
            </p>
            <p class="body">
            See the Microsoft Excel documentation for more information on array formulas.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Excel.Formula">
            <summary>
            Represents a formula for a cell or group of cells.
            </summary>
            <remarks>
            <p class="body">
            Formulas provide a way to show dynamic values in a cell. The value could be based any number of factors, such as 
            the values of other cells and the time of day.  Those alternate cells can even exist in different workbook files
            on the user's machine or on the internet.
            </p>
            <p class="body">
            See Microsoft Excel help for more information on formulas.
            </p>
            <p class="body">
            Use one of the Parse or TryParse overloads to create a new formula.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.Formula.ToString">
            <summary>
            Converts the formula to a string representation, similar to the string with which it was created. 
            This uses the <see cref="T:Infragistics.Excel.CellReferenceMode"/> with which the formula was created to create cell
            reference strings.
            </summary>
            <returns>The string representing the formula.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)">
            <summary>
            Applies the formula to the specified cell.
            </summary>
            <remarks>
            <p class="body">
            This method, or one of the other ApplyTo overrides must be used to set the value of a cell to a formula.
            </p>
            <p class="body">
            After this method returns, the <see cref="P:Infragistics.Excel.WorksheetCell.Formula"/> of the specified cell will return the formula.
            </p>
            </remarks>
            <param name="cell">The cell to apply the formula to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cell"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="cell"/> is part of an array formula or data table which is not confined to just the cell.
            </exception>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.Value"/>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion)"/>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion[])"/>
            <seealso cref="M:Infragistics.Excel.WorksheetCell.ApplyFormula(System.String)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetRegion.ApplyFormula(System.String)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetRegion.ApplyArrayFormula(System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion)">
            <summary>
            Applies the formula to the specified region of cells.
            </summary>
            <remarks>
            <p class="body">
            This method, or one of the other ApplyTo overrides must be used to set the value of a cell to a formula.
            </p>
            <p class="body">
            After this method returns, the <see cref="P:Infragistics.Excel.WorksheetCell.Formula"/> of all cells in the specified region will
            return the formula.
            </p>
            </remarks>
            <param name="region">The region of cells to apply the formula to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="region"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="region"/> contains an array formula or data table which extends outside the region.
            </exception>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)"/>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion[])"/>
            <seealso cref="M:Infragistics.Excel.WorksheetCell.ApplyFormula(System.String)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetRegion.ApplyFormula(System.String)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetRegion.ApplyArrayFormula(System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion[])">
            <summary>
            Applies the formula to all specified regions of cells.
            </summary>
            <remarks>
            <p class="body">
            This method, or one of the other ApplyTo overrides must be used to set the value of a cell to a formula.
            </p>
            <p class="body">
            After this method returns, the <see cref="P:Infragistics.Excel.WorksheetCell.Formula"/> of all cells in all specified regions will
            return the formula.
            </p>
            </remarks>
            <param name="regions">The regions of cells to apply the formula to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="regions"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="regions"/> has a length of 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            Not all regions specified are from the same worksheet.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            One or more regions specified contain array formulas or data tables which extend outside the region.
            </exception>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)"/>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetCell.ApplyFormula(System.String)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetRegion.ApplyFormula(System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.Formula.ToString(Infragistics.Excel.CellReferenceMode)">
            <summary>
            Converts the formula to a string representation, similar to the string with which it was created.
            </summary>
            <param name="cellReferenceMode">The cell reference mode used to create cell reference strings.</param>
            <returns>The string representing the formula.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.ToString(Infragistics.Excel.CellReferenceMode,System.Globalization.CultureInfo)">
            <summary>
            Converts the formula to a string representation, similar to the string with which it was created.
            </summary>
            <param name="cellReferenceMode">The cell reference mode used to create cell reference strings.</param>
            <param name="culture">The culture used to generate the formula string.</param>
            <returns>The string representing the formula.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.Equals(Infragistics.Excel.Formula,Infragistics.Excel.Formula,Infragistics.Excel.CellReferenceMode)">
            <summary>
            Determines whether two <see cref="T:Infragistics.Excel.Formula"/> instances are equal using the specified cell reference mode.
            </summary>
            <remarks>
            This essentially performs a case-insensitive string comparison, ignoring the white space in the formula.
            </remarks>
            <param name="formulaA">The first Formula to compare.</param>
            <param name="formulaB">The second Formula to compare.</param>
            <param name="cellReferenceMode">The cell reference mode to use when comparing the two formulas.</param>
            <returns>True if the formulas are both null or both equivalent; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.Parse(System.String,Infragistics.Excel.CellReferenceMode)">
            <summary>
            Parses the specified formula value and returns the formula which was created from it.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <returns>A <see cref="T:Infragistics.Excel.Formula"/> instance which represents the formula specified.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.Parse(System.String,Infragistics.Excel.CellReferenceMode,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified formula value and returns the formula which was created from it.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="culture">The culture used to parse the formula.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <returns>A <see cref="T:Infragistics.Excel.Formula"/> instance which represents the formula specified.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.Parse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorkbookFormat)">
            <summary>
            Parses the specified formula value and returns the formula which was created from it.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="fileFormat">The file format to use when parsing the formula. This will be used to determine certain limits which are format dependant.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="fileFormat"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <returns>A <see cref="T:Infragistics.Excel.Formula"/> instance which represents the formula specified.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.Parse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorkbookFormat,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified formula value and returns the formula which was created from it.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="fileFormat">The file format to use when parsing the formula. This will be used to determine certain limits which are format dependant.</param>
            <param name="culture">The culture used to parse the formula.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="fileFormat"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <returns>A <see cref="T:Infragistics.Excel.Formula"/> instance which represents the formula specified.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.Formula@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="formula">
            When this method returns, contains the formula which was parsed from <paramref name="value"/>,
            if the conversion succeeded, or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,System.Globalization.CultureInfo,Infragistics.Excel.Formula@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="culture">The culture used to parse the formula.</param>
            <param name="formula">
            When this method returns, contains the formula which was parsed from <paramref name="value"/>,
            if the conversion succeeded, or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.Formula@,Infragistics.Excel.FormulaParseException@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="formula">
            When this method returns, contains the formula which was parsed from <paramref name="value"/>
            if the conversion succeeded or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <param name="exception">
            When this method returns, contains the error information if the conversion failed or null if the 
            conversion succeeded. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,System.Globalization.CultureInfo,Infragistics.Excel.Formula@,Infragistics.Excel.FormulaParseException@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="culture">The culture used to parse the formula.</param>
            <param name="formula">
            When this method returns, contains the formula which was parsed from <paramref name="value"/>
            if the conversion succeeded or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <param name="exception">
            When this method returns, contains the error information if the conversion failed or null if the 
            conversion succeeded. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorkbookFormat,Infragistics.Excel.Formula@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="fileFormat">The file format to use when parsing the formula. This will be used to determine certain limits which are format dependant.</param>
            <param name="formula">
            When this method returns, contains the formula which was parsed from <paramref name="value"/>,
            if the conversion succeeded, or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="fileFormat"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorkbookFormat,System.Globalization.CultureInfo,Infragistics.Excel.Formula@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="fileFormat">The file format to use when parsing the formula. This will be used to determine certain limits which are format dependant.</param>
            <param name="culture">The culture used to parse the formula.</param>
            <param name="formula">
            When this method returns, contains the formula which was parsed from <paramref name="value"/>,
            if the conversion succeeded, or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="fileFormat"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorkbookFormat,Infragistics.Excel.Formula@,Infragistics.Excel.FormulaParseException@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="fileFormat">The file format to use when parsing the formula. This will be used to determine certain limits which are format dependant.</param>
            <param name="formula">
            When this method returns, contains the formula which was parsed from <paramref name="value"/>
            if the conversion succeeded or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <param name="exception">
            When this method returns, contains the error information if the conversion failed or null if the 
            conversion succeeded. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="fileFormat"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorkbookFormat,System.Globalization.CultureInfo,Infragistics.Excel.Formula@,Infragistics.Excel.FormulaParseException@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="fileFormat">The file format to use when parsing the formula. This will be used to determine certain limits which are format dependant.</param>
            <param name="culture">The culture used to parse the formula.</param>
            <param name="formula">
            When this method returns, contains the formula which was parsed from <paramref name="value"/>
            if the conversion succeeded or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <param name="exception">
            When this method returns, contains the error information if the conversion failed or null if the 
            conversion succeeded. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="fileFormat"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.ApplyTo(Infragistics.Excel.WorksheetRegion[])">
            <summary>
            Applies the formula to all specified regions of cells.
            </summary>
            <remarks>
            <p class="body">
            This method, or one of the other ApplyTo overrides must be used to set the value of a cell to a formula.
            </p>
            <p class="body">
            After this method returns, the <see cref="P:Infragistics.Excel.WorksheetCell.Formula"/> of all cells in all specified regions will
            return the array formula.
            </p>
            </remarks>
            <param name="regions">The regions of cells to apply the formula to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="regions"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The length <paramref name="regions"/> is anything other than one.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The array formula is already applied to a cell region.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            One or more regions specified contain array formulas or data tables which extend outside the region.
            </exception>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)"/>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetRegion.ApplyArrayFormula(System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.ClearCellRange">
            <summary>
            Removes this array formula as the formula for the cells to which it was applied.
            </summary>
            <remarks>
            <p class="body">
            After this method returns, the <see cref="P:Infragistics.Excel.ArrayFormula.CellRange"/> will be null.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.Parse(System.String,Infragistics.Excel.CellReferenceMode)">
            <summary>
            Parses the specified formula value and returns the array formula which was created from it.
            </summary>
            <param name="value">The string which defines the array formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the array formula.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <returns>An <see cref="T:Infragistics.Excel.ArrayFormula"/> instance which represents the array formula value specified.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.Parse(System.String,Infragistics.Excel.CellReferenceMode,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified formula value and returns the array formula which was created from it.
            </summary>
            <param name="value">The string which defines the array formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the array formula.</param>
            <param name="culture">The culture used to parse the formula.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <returns>An <see cref="T:Infragistics.Excel.ArrayFormula"/> instance which represents the array formula value specified.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.Parse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorkbookFormat)">
            <summary>
            Parses the specified formula value and returns the array formula which was created from it.
            </summary>
            <param name="value">The string which defines the array formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the array formula.</param>
            <param name="fileFormat">The file format to use when parsing the array formula. This will be used to determine certain limits which are format dependant.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="fileFormat"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <returns>An <see cref="T:Infragistics.Excel.ArrayFormula"/> instance which represents the array formula value specified.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.Parse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorkbookFormat,System.Globalization.CultureInfo)">
            <summary>
            Parses the specified formula value and returns the array formula which was created from it.
            </summary>
            <param name="value">The string which defines the array formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the array formula.</param>
            <param name="fileFormat">The file format to use when parsing the array formula. This will be used to determine certain limits which are format dependant.</param>
            <param name="culture">The culture used to parse the formula.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="fileFormat"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <returns>An <see cref="T:Infragistics.Excel.ArrayFormula"/> instance which represents the array formula value specified.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.ArrayFormula@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the array formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the array formula.</param>
            <param name="formula">
            When this method returns, contains the array formula which was parsed from <paramref name="value"/>,
            if the conversion succeeded, or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,System.Globalization.CultureInfo,Infragistics.Excel.ArrayFormula@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the array formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the array formula.</param>
            <param name="culture">The culture used to parse the formula.</param>
            <param name="formula">
            When this method returns, contains the array formula which was parsed from <paramref name="value"/>,
            if the conversion succeeded, or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.ArrayFormula@,Infragistics.Excel.FormulaParseException@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the array formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the array formula.</param>
            <param name="formula">
            When this method returns, contains the array formula which was parsed from <paramref name="value"/>
            if the conversion succeeded or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <param name="exception">
            When this method returns, contains the error information if the conversion failed or null if the 
            conversion succeeded. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,System.Globalization.CultureInfo,Infragistics.Excel.ArrayFormula@,Infragistics.Excel.FormulaParseException@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the array formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the array formula.</param>
            <param name="culture">The culture used to parse the formula.</param>
            <param name="formula">
            When this method returns, contains the array formula which was parsed from <paramref name="value"/>
            if the conversion succeeded or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <param name="exception">
            When this method returns, contains the error information if the conversion failed or null if the 
            conversion succeeded. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorkbookFormat,Infragistics.Excel.ArrayFormula@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the array formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the array formula.</param>
            <param name="fileFormat">The file format to use when parsing the formula. This will be used to determine certain limits which are format dependant.</param>
            <param name="formula">
            When this method returns, contains the array formula which was parsed from <paramref name="value"/>,
            if the conversion succeeded, or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="fileFormat"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorkbookFormat,System.Globalization.CultureInfo,Infragistics.Excel.ArrayFormula@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the array formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the array formula.</param>
            <param name="fileFormat">The file format to use when parsing the formula. This will be used to determine certain limits which are format dependant.</param>
            <param name="culture">The culture used to parse the formula.</param>
            <param name="formula">
            When this method returns, contains the array formula which was parsed from <paramref name="value"/>,
            if the conversion succeeded, or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="fileFormat"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorkbookFormat,Infragistics.Excel.ArrayFormula@,Infragistics.Excel.FormulaParseException@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the array formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the array formula.</param>
            <param name="fileFormat">The file format to use when parsing the formula. This will be used to determine certain limits which are format dependant.</param>
            <param name="formula">
            When this method returns, contains the array formula which was parsed from <paramref name="value"/>
            if the conversion succeeded or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <param name="exception">
            When this method returns, contains the error information if the conversion failed or null if the 
            conversion succeeded. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="fileFormat"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorkbookFormat,System.Globalization.CultureInfo,Infragistics.Excel.ArrayFormula@,Infragistics.Excel.FormulaParseException@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the array formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the array formula.</param>
            <param name="fileFormat">The file format to use when parsing the formula. This will be used to determine certain limits which are format dependant.</param>
            <param name="culture">The culture used to parse the formula.</param>
            <param name="formula">
            When this method returns, contains the array formula which was parsed from <paramref name="value"/>
            if the conversion succeeded or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <param name="exception">
            When this method returns, contains the error information if the conversion failed or null if the 
            conversion succeeded. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="fileFormat"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="P:Infragistics.Excel.ArrayFormula.CellRange">
            <summary>
            Gets the cells to which the array formula is applied.
            </summary>
            <remarks>
            <p class="body">
            If this is null, the formula has not yet been applied.
            </p>
            </remarks>
            <value>The cells to which the array formula is applied.</value>
        </member>
        <member name="T:Infragistics.Shared.AssemblyVersion">
            <summary>
            Contains version information for the Infragistics assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.MajorMinor">
            <summary>
            Major.Minor number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Build">
            <summary>
            Build number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Revision">
            <summary>
            Revision number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Version">
            <summary>
            Assembly version number
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.ToolBoxBitmapFolder">
            <summary>
            Location of the resources for toolbox bitmaps. 
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.CompanyName">
            <summary>
            Assembly company name
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.EndCopyrightYear">
            <summary>
            End year of assembly copyright
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.SatelliteContractVersion">
            <summary>
            The assembly version number for the satellite assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Configuration">
            <summary>
            The current build configuration for the assembly.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.BIFF8Writer">
            <summary>
            BIFF8Writer provides static methods for exporting abstract workbook object to concrete Excel file.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> The BIFF8Writer class is no longer needed.  Use one of the Save overloads on <see cref="T:Infragistics.Excel.Workbook"/> instead.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.BIFF8Writer.WriteWorkbookToFile(Infragistics.Excel.Workbook,System.String)">
            <summary>
            Writes existing workbook object to a file in BIFF8 format.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> The <see cref="M:Infragistics.Excel.Workbook.Save(System.String)"/> method should be used instead to write the workbook to a file.
            </p>
            </remarks>
            <param name="workbook">Workbook to export.</param>
            <param name="fileName">Filename of resulting excel file. If path is not included, file is created in default program folder.</param>
        </member>
        <member name="M:Infragistics.Excel.BIFF8Writer.WriteWorkbookToStream(Infragistics.Excel.Workbook,System.IO.Stream)">
            <summary>
            Writes existing workbook object to a stream.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> The <see cref="M:Infragistics.Excel.Workbook.Save(System.IO.Stream)"/> method should be used instead to write the workbook to a stream.
            </p>
            </remarks>
            <param name="workbook">Workbook to export.</param>
            <param name="outStream">Output file stream.</param>
        </member>
        <member name="M:Infragistics.Excel.BIFF8Writer.WriteWorkbookToStreamEx(Infragistics.Excel.Workbook,System.IO.Stream)">
            <summary>
            Writes existing workbook object to a stream in BIFF8 format.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> The <see cref="M:Infragistics.Excel.Workbook.Save(System.IO.Stream)"/> method should be used instead to write the workbook to a stream.
            </p>
            </remarks>
            <param name="workbook">Workbook to export.</param>
            <param name="outStream">An output stream to generate the BIFF8 content into.</param>
        </member>
        <member name="T:Infragistics.Excel.CustomView">
            <summary>
            Represents a custom view in Microsoft Excel.
            </summary>
            <remarks>
            <p class="body">
            Custom views provide a way to save display options and optionally print options for the workbook and each worksheet in the workbook.
            These options can be different from the options currently set on the workbook and worksheets.
            </p>
            <p class="body">
            Multiple custom views can be saved with a workbook, and the options from a custom view can be applied to its associated workbook by 
            calling the <see cref="M:Infragistics.Excel.CustomView.Apply"/> method on it.
            </p>
            </remarks>
            <seealso cref="P:Workbook.CustomViews"/>
        </member>
        <member name="M:Infragistics.Excel.CustomView.Apply">
            <summary>
            Applies all options from the custom view to the associated workbook and its worksheets.
            </summary>
            <remarks>
            <p class="body">
            There is no state of the workbook indicating the custom view currently applied, so applying a custom view
            simply copies over all options saved with it to the workbook and its worksheet. If an applied custom view
            is then changed, those changes will not be updated on the workbook or worksheets. Instead, the custom view will need
            to be applied again for those changes to be reflected on the workbook or worksheet.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The custom view has previously been removed from its associated workbook.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.CustomView.GetDisplayOptions(Infragistics.Excel.Worksheet)">
            <summary>
            Gets the display options associated with the specified worksheet.
            </summary>
            <remarks>
            <p class="body">
            Setting properties on the returned <see cref="T:Infragistics.Excel.DisplayOptions"/> instance will not change the actual
            display of the worksheet. After setting properties, the <see cref="M:Infragistics.Excel.CustomView.Apply"/> method of the 
            <see cref="T:Infragistics.Excel.CustomView"/> will apply them to the worksheet.
            </p>
            </remarks>
            <param name="worksheet">The worksheet whose associated display options are to be retrieved.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <returns>
            Null if the worksheet does not belong to the workbook associated with this custom view; 
            otherwise, the display options associated with the worksheet.
            </returns>
            <seealso cref="P:Infragistics.Excel.Worksheet.DisplayOptions"/>
        </member>
        <member name="M:Infragistics.Excel.CustomView.GetHiddenColumns(Infragistics.Excel.Worksheet)">
            <summary>
            Gets the hidden columns associated with the specified worksheet.
            </summary>
            <remarks>
            <p class="body">
            Adding columns on the returned <see cref="T:Infragistics.Excel.HiddenColumnCollection"/> instance will not actually hide 
            columns in the worksheet. After modifying the hidden columns in this collection, the <see cref="M:Infragistics.Excel.CustomView.Apply"/> 
            method of the <see cref="T:Infragistics.Excel.CustomView"/> will hide or unhide the columns.
            </p>
            </remarks>
            <param name="worksheet">The worksheet whose associated hidden columns are to be retrieved.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <returns>
            Null if <see cref="P:Infragistics.Excel.CustomView.SaveHiddenRowsAndColumns"/> is False or if the worksheet does not belong to the workbook 
            associated with this custom view; otherwise, the collection of hidden columns associated with the worksheet.
            </returns>
            <seealso cref="P:Infragistics.Excel.RowColumnBase.Hidden"/>
            <seealso cref="P:Infragistics.Excel.CustomView.SaveHiddenRowsAndColumns"/>
        </member>
        <member name="M:Infragistics.Excel.CustomView.GetHiddenRows(Infragistics.Excel.Worksheet)">
            <summary>
            Gets the hidden rows associated with the specified worksheet.
            </summary>
            <remarks>
            <p class="body">
            Adding rows on the returned <see cref="T:Infragistics.Excel.HiddenRowCollection"/> instance will not actually hide 
            rows in the worksheet. After modifying the hidden rows in this collection, the <see cref="M:Infragistics.Excel.CustomView.Apply"/> 
            method of the <see cref="T:Infragistics.Excel.CustomView"/> will hide or unhide the rows.
            </p>
            </remarks>
            <param name="worksheet">The worksheet whose associated hidden rows are to be retrieved.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <returns>
            Null if <see cref="P:Infragistics.Excel.CustomView.SaveHiddenRowsAndColumns"/> is False or if the worksheet does not belong to the workbook 
            associated with this custom view; otherwise, the collection of hidden rows associated with the worksheet.
            </returns>
            <seealso cref="P:Infragistics.Excel.RowColumnBase.Hidden"/>
            <seealso cref="P:Infragistics.Excel.CustomView.SaveHiddenRowsAndColumns"/>
        </member>
        <member name="M:Infragistics.Excel.CustomView.GetPrintOptions(Infragistics.Excel.Worksheet)">
            <summary>
            Gets the print options associated with the specified worksheet.
            </summary>
            <remarks>
            <p class="body">
            Setting properties on the returned <see cref="T:Infragistics.Excel.PrintOptions"/> instance will not change the actual
            print settings of the worksheet. After setting properties, the <see cref="M:Infragistics.Excel.CustomView.Apply"/> method of the 
            <see cref="T:Infragistics.Excel.CustomView"/> will apply them to the worksheet.
            </p>
            </remarks>
            <param name="worksheet">The worksheet whose associated print options are to be retrieved.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <returns>
            Null if <see cref="P:Infragistics.Excel.CustomView.SavePrintOptions"/> is False or if the worksheet does not belong to the workbook associated
            with this custom view; otherwise, the print options associated with the worksheet.
            </returns>
            <seealso cref="P:Infragistics.Excel.Worksheet.PrintOptions"/>
            <seealso cref="P:Infragistics.Excel.CustomView.SavePrintOptions"/>
        </member>
        <member name="P:Infragistics.Excel.CustomView.Name">
            <summary>
            Gets or sets the name of the custom view.
            </summary>
            <remarks>
            <p class="body">
            The name of the custom view is displayed in the custom views dialog of Microsoft Excel and must be 
            case-insensitively unique to other custom views in the workbook.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is a null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value assigned is the name of another custom view in this custom view's associated workbook (custom view 
            names are compared case-insensitively).
            </exception>
            <value>The name of the custom view.</value>
        </member>
        <member name="P:Infragistics.Excel.CustomView.SaveHiddenRowsAndColumns">
            <summary>
            Gets the value indicating whether hidden row and column settings are saved with the custom view.
            </summary>
            <remarks>
            <p class="body">
            If the value is False, the return value of <see cref="M:Infragistics.Excel.CustomView.GetHiddenColumns(Infragistics.Excel.Worksheet)"/> and <see cref="M:Infragistics.Excel.CustomView.GetHiddenRows(Infragistics.Excel.Worksheet)"/>
            will always be null, regardless of the worksheet specified.
            </p>
            </remarks>
            <value>The value indicating whether hidden row and column settings are saved with the custom view.</value>
            <seealso cref="M:Infragistics.Excel.CustomView.GetHiddenColumns(Infragistics.Excel.Worksheet)"/>
            <seealso cref="M:Infragistics.Excel.CustomView.GetHiddenRows(Infragistics.Excel.Worksheet)"/>
            <seealso cref="T:Infragistics.Excel.HiddenColumnCollection"/>
            <seealso cref="T:Infragistics.Excel.HiddenRowCollection"/>
        </member>
        <member name="P:Infragistics.Excel.CustomView.SavePrintOptions">
            <summary>
            Gets the value indicating whether print options are saved with the custom view.
            </summary>
            <remarks>
            <p class="body">
            If the value is False, the return value of <see cref="M:Infragistics.Excel.CustomView.GetPrintOptions(Infragistics.Excel.Worksheet)"/> will always be null, 
            regardless of the worksheet specified.
            </p>
            </remarks>
            <value>The value indicating whether print options are saved with the custom view.</value>
            <seealso cref="M:Infragistics.Excel.CustomView.GetPrintOptions(Infragistics.Excel.Worksheet)"/>
            <seealso cref="T:Infragistics.Excel.PrintOptions"/>
        </member>
        <member name="P:Infragistics.Excel.CustomView.WindowOptions">
            <summary>
            Gets the window options for the workbook associated with the custom view.
            </summary>
            <remarks>
            <p class="body">
            Setting properties on the returned <see cref="P:Infragistics.Excel.CustomView.WindowOptions"/> instance will not change the actual
            window options of the associated workbook. After setting properties, the <see cref="M:Infragistics.Excel.CustomView.Apply"/> method 
            of the <see cref="T:Infragistics.Excel.CustomView"/> will apply them to the workbook.
            </p>
            </remarks>
            <value>The window options for the workbook associated with the custom view..</value>
            <seealso cref="T:Workbook.WindowOptions"/>
        </member>
        <member name="T:Infragistics.Excel.CustomViewDisplayOptions">
            <summary>
            Class which exposes the worksheet display options which can only be controlled through the custom view.
            </summary>
            <seealso cref="M:Infragistics.Excel.CustomView.GetDisplayOptions(Infragistics.Excel.Worksheet)"/>
            <seealso cref="T:Infragistics.Excel.WorksheetDisplayOptions"/>
        </member>
        <member name="T:Infragistics.Excel.DisplayOptions">
            <summary>
            Abstract base class which exposes the various display options available for a worksheet which can be 
            saved with both a worksheet and a custom view.
            </summary>
            <remarks>
            <p class="body">
            This class provides a way to control how a worksheet is displayed when it is viewed in Microsoft Excel.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.Excel.CustomViewDisplayOptions"/>
            <seealso cref="T:Infragistics.Excel.WorksheetDisplayOptions"/>
        </member>
        <member name="M:Infragistics.Excel.DisplayOptions.Reset">
            <summary>
            Resets the display options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.FrozenPaneSettings">
            <summary>
            Gets the settings which control the frozen panes in the worksheet.
            </summary>
            <remarks>
            <p class="body">
            For these settings to be saved in the workbook file, <see cref="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen"/> must be True.
            </p>
            <p class="note">
            <B>Note:</B> Frozen and unfrozen panes cannot be used simultaneously, so depending on whether the panes are 
            frozen or unfrozen, these settings may not be used.
            </p>
            </remarks>
            <value>The settings which control the frozen panes in the worksheet..</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen"/>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.UnfrozenPaneSettings"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.GridlineColor">
            <summary>
            Gets or sets the color of the gridlines on the worksheet.
            </summary>
            <remarks>
            <p class="body">
            If the workbook is using a standard palette, the color set may be changed if it is not in the palette.
            In this case, the closest color in the standard palette will be used.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The workbook is using a custom palette and setting this color would cause the custom palette to use 
            too many colors.
            </exception>
            <value>The color of the gridlines on the worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen">
            <summary>
            Gets or sets the value which indicates if the panes in the worksheet are frozen.
            </summary>
            <remarks>
            <p class="body">
            Depending on the value of this property, either the <see cref="P:Infragistics.Excel.DisplayOptions.FrozenPaneSettings"/> or the
            <see cref="P:Infragistics.Excel.DisplayOptions.UnfrozenPaneSettings"/> will be used for the worksheet. The unused settings are 
            ignored and are not saved with the workbook stream.
            </p>
            </remarks>
            <value>The value which indicates if the panes in the worksheet are frozen.</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.FrozenPaneSettings"/>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.UnfrozenPaneSettings"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.ShowFormulasInCells">
            <summary>
            Gets or sets the value which indicates whether formulas are shown in cells.
            </summary>
            <remarks>
            <p class="body">
            If this value is True, the formula string will be displayed in the cell. If the value is
            False, the result of the formula will be displayed in the cell.
            </p>
            </remarks>
            <value>The value which indicates whether formulas are shown in cells.</value>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.ShowGridlines">
            <summary>
            Gets or sets the value which indicates whether gridlines are shown between cells.
            </summary>
            <value>The value which indicates whether gridlines are shown between cells.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.PrintGridlines"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.ShowOutlineSymbols">
            <summary>
            Gets or sets the value which indicates whether outline symbols are shown for outlined columns and rows.
            </summary>
            <remarks>
            <p class="body">
            If the outline symbols are displayed, they provide a visual representation of the outline levels or rows 
            and columns in Microsoft Excel.  In addition, the outline symbols include the expansion indicators which
            allow for the expanding and collapsing of outline groups.
            </p>
            </remarks>
            <value>The value which indicates whether outline symbols are shown for outlined columns and rows.</value>
            <seealso cref="P:Infragistics.Excel.RowColumnBase.OutlineLevel"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.ShowRowAndColumnHeaders">
            <summary>
            Gets or sets the value which indicates whether to display row and column headers.
            </summary>
            <remarks>
            <p class="body">
            The row and column headers show the identifier of the row or column. They also allow the user to easily select
            all cells in a row or column by clicking them.
            </p>
            </remarks>
            <value>The value which indicates whether to display row and column headers.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.PrintRowAndColumnHeaders"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.ShowRulerInPageLayoutView">
            <summary>
            Gets or sets the value which indicates whether to show rulers in the page layout view.
            </summary>
            <remarks>
            <p class="body">
            When this value is True, one ruler will display above the column headers of the active page
            in page layout view. Another ruler will also display before the row headers of the active page.
            </p>
            <p class="note">
            <b>Note:</b> This property will only affect the worksheet view if the <see cref="P:Infragistics.Excel.DisplayOptions.View"/> is 
            PageLayout.
            </p>
            <p class="note">
            <b>Note:</b> The <see cref="T:Infragistics.Excel.WorksheetView"/> value of PageLayout is only supported in Excel 2007. 
            If a worksheet with that View is viewed in earlier versions of Microsoft Excel, the view will 
            default to Normal view.
            </p>
            </remarks>
            <value>The value which indicates whether to show rulers in the page layout view.</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.View"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.ShowZeroValues">
            <summary>
            Gets or sets the value which indicates whether zero values are shown in cells.
            </summary>
            <remarks>
            <p class="body">
            If this value is True, cells with a value of zero will display their values; otherwise,
            those cells will display as blanks.
            </p>
            </remarks>
            <value>The value which indicates whether zero values are shown in cells.</value>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.UnfrozenPaneSettings">
            <summary>
            Gets the settings which control the unfrozen panes in the worksheet.
            </summary>
            <remarks>
            <p class="body">
            For these settings to be saved in the workbook file, <see cref="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen"/> must be False.
            </p>
            <p class="note">
            <B>Note:</B> Frozen and unfrozen panes cannot be used simultaneously, so depending on whether the panes are 
            frozen or unfrozen, these settings may not be used.
            </p>
            </remarks>
            <value>The settings which control the unfrozen panes in the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen"/>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.FrozenPaneSettings"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.View">
            <summary>
            Gets or sets the current view of the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The view determines the overall display of the worksheet in Microsoft Excel.
            </p>
            <p class="note">
            <b>Note:</b> The <see cref="T:Infragistics.Excel.WorksheetView"/> value of PageLayout is only supported in Excel 2007. 
            If a worksheet with that View is viewed in earlier versions of Microsoft Excel, the view will 
            default to Normal view.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the WorksheetView enumeration.
            </exception>
            <value>The current view of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.CustomViewDisplayOptions.MagnificationInCurrentView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInNormalView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageBreakView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageLayoutView"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.Visibility">
            <summary>
            Gets or sets the visibility of the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The visibility determines whether the worksheet's tab will appear in the tab bar at the
            bottom of Microsoft Excel. 
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.WorksheetVisibility"/> enumeration.
            </exception>
            <value>The visibility of the worksheet.</value>
        </member>
        <member name="M:Infragistics.Excel.CustomViewDisplayOptions.Reset">
            <summary>
            Resets the display options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CustomViewDisplayOptions.MagnificationInCurrentView">
            <summary>
            Gets or sets the magnification level of the worksheet in the current <see cref="P:Infragistics.Excel.DisplayOptions.View"/>.
            </summary>
            <remarks>
            <p class="body">
            Magnifications are stored as percentages of the normal viewing magnification. A value of 100 indicates normal magnification
            whereas a value of 200 indicates a zoom that is twice the normal viewing magnification.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of magnification levels for a worksheet. The level must be between 10 and 400.
            </exception>
            <value>The magnification level of the worksheet in the current View.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInNormalView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageBreakView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageLayoutView"/>
        </member>
        <member name="T:Infragistics.Excel.CustomViewCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Excel.CustomView"/> instances in a workbook.
            </summary>
            <see cref="P:Infragistics.Excel.Workbook.CustomViews"/>
        </member>
        <member name="M:Infragistics.Excel.CustomViewCollection.Add(System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a new custom view to the collection.
            </summary>
            <param name="name">The name to give the newly created custom view.</param>
            <param name="savePrintOptions">
            True to save print options for each worksheet with the custom view; False otherwise.
            </param>
            <param name="saveHiddenRowsAndColumns">
            True to save information about hidden rows and columns for each worksheet with the custom view; False otherwise.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is a null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is the name of another custom view in the collection (custom view names are compared 
            case-insensitively).
            </exception>
            <returns>The newly created <see cref="T:Infragistics.Excel.CustomView"/> instance.</returns>
        </member>
        <member name="M:Infragistics.Excel.CustomViewCollection.Clear">
            <summary>
            Clears all custom views from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CustomViewCollection.Contains(Infragistics.Excel.CustomView)">
            <summary>
            Determines whether a custom view is in this collection.
            </summary>
            <param name="customView">The custom view to locate in the collection.</param>
            <returns>True if the custom view is found; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.CustomViewCollection.Remove(Infragistics.Excel.CustomView)">
            <summary>
            Removes the specified custom view from the collection.
            </summary>
            <param name="customView">The custom view to remove from the collection.</param>
            <returns>
            True if the custom view was successfully removed; False if the custom view was not 
            in the collection.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.CustomViewCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the custom view at the specified index from the collection.
            </summary>
            <param name="index">The zero-based index of the custom view in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.CustomViewCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.CustomViewCollection.Count">
            <summary>
            Gets the number of custom views in the collection.
            </summary>
            <value>The number of custom views in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.CustomViewCollection.Item(System.Int32)">
            <summary>
            Gets the custom view at the specified index.
            </summary>
            <param name="index">The zero-based index of the custom view to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.CustomViewCollection.Count"/>.
            </exception>
            <value>The custom view at the specified index.</value>
        </member>
        <member name="T:Infragistics.Excel.CustomViewWindowOptions">
            <summary>
            Represents the workbook window options which are saved with custom views.
            </summary>
            <remarks>
            <p class="body">
            The properties explicitly defined on this class and not inherited from the base class, 
            <see cref="T:Infragistics.Excel.WindowOptions"/>, are options that can be saved with a custom view, but 
            not with a workbook. Therefore, these properties will not be applied when the 
            <see cref="M:Infragistics.Excel.CustomView.Apply"/> method is called.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Excel.CustomView.WindowOptions"/>
            <seealso cref="T:Infragistics.Excel.WorkbookWindowOptions"/>
        </member>
        <member name="T:Infragistics.Excel.WindowOptions">
            <summary>
            Abstract base class which exposes the various workbook window options available which can be saved with 
            both a workbook and a custom view.
            </summary>
            <remarks>
            <p class="body">
            This class provides a way to control how a workbook is displayed when it is viewed in Microsoft Excel.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.Excel.CustomViewWindowOptions"/>
            <seealso cref="T:Infragistics.Excel.WorkbookWindowOptions"/>
        </member>
        <member name="M:Infragistics.Excel.WindowOptions.Reset">
            <summary>
            Resets the window options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank workbook.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.WindowOptions.ObjectDisplayStyle">
            <summary>
            Gets or sets the way the objects and shapes are displayed in the workbook.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Infragistics.Excel.ObjectDisplayStyle"/> enumeration.
            </exception>
            <value>The way the objects and shapes are displayed in the workbook.</value>
            <seealso cref="T:Infragistics.Excel.WorksheetShape"/>
            <seealso cref="T:Infragistics.Excel.WorksheetImage"/>
            <seealso cref="P:Infragistics.Excel.Worksheet.Shapes"/>
        </member>
        <member name="P:Infragistics.Excel.WindowOptions.ScrollBars">
            <summary>
            Gets or sets the scroll bars shown in the workbook window.
            </summary>
            <remarks>
            <p class="body">
            The vertical scroll bar occupies the entire height of the application if it is visible.
            </p>
            <p class="body">
            The horizontal scroll bar occupies the width of the application not used by the worksheet
            tab bar, if it is visible. Otherwise, it occupies the entire width of the application.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Infragistics.Excel.ScrollBars"/> enumeration.
            </exception>
            <value>The scroll bars shown in the workbook window.</value>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarWidth"/>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarVisible"/>
        </member>
        <member name="P:Infragistics.Excel.WindowOptions.SelectedWorksheet">
            <summary>
            Gets or sets the selected worksheet of the workbook.
            </summary>
            <remarks>
            <p class="body">
            If this is an instance of <see cref="T:Infragistics.Excel.CustomViewWindowOptions"/> and the SelectedWorksheet value is null, the 
            workbook's selected worksheet will not be changed when the associated <see cref="T:Infragistics.Excel.CustomView"/> is applied.
            </p>
            <p class="note">
            <B>Note:</B> If the selected worksheet does not have its <see cref="P:Infragistics.Excel.DisplayOptions.Visibility"/> set to Visible
            when the workbook is saved, another worksheet will be selected.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The assigned value is null and this is an instance of <see cref="T:Infragistics.Excel.WorkbookWindowOptions"/> whose associated 
            <see cref="T:Infragistics.Excel.Workbook"/> has at least one <see cref="T:Infragistics.Excel.Worksheet"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The assigned value does not belong to the workbook associated with this instance of <see cref="T:Infragistics.Excel.WindowOptions"/>.
            </exception>
            <value>The selected worksheet of the workbook.</value>
        </member>
        <member name="P:Infragistics.Excel.WindowOptions.TabBarVisible">
            <summary>
            Gets or sets the value indicating whether the worksheet tab bar is visible.
            </summary>
            <remarks>
            <p class="body">
            If the value is False, the <see cref="P:Infragistics.Excel.WindowOptions.TabBarWidth"/> will not be used, but it will still 
            be serialized with the workbook.
            </p>
            </remarks>
            <value>The value indicating whether the worksheet tab bar is visible.</value>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarWidth"/>
            <seealso cref="P:Infragistics.Excel.WorkbookWindowOptions.FirstVisibleTabIndex"/>
        </member>
        <member name="P:Infragistics.Excel.WindowOptions.TabBarWidth">
            <summary>
            Gets or sets the width of the worksheet tab bar, expressed in 1/1000ths of the application width.
            </summary>
            <remarks>
            <p class="body">
            This value is only used if <see cref="P:Infragistics.Excel.WindowOptions.TabBarVisible"/> is True. Regardless of whether the tab bar is 
            visible, the width value is always saved with the workbook.
            </p>
            <p class="body">
            A value of 1000 indicates the worksheet tab bar occupies the entire width of the application, while
            a value of 0 indicates the worksheet tab bar has no width.
            </p>
            <p class="body">
            All space not occupied by the worksheet tab bar will be used by the horizontal scroll bar, if it is visible.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the valid range of 0 and 1000.
            </exception>
            <value>The width of the worksheet tab bar, expressed in 1/1000ths of the application width.</value>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarVisible"/>
            <seealso cref="P:ScrollBars"/>
            <seealso cref="P:Infragistics.Excel.WorkbookWindowOptions.FirstVisibleTabIndex"/>
        </member>
        <member name="M:Infragistics.Excel.CustomViewWindowOptions.Reset">
            <summary>
            Resets the window options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank workbook.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CustomViewWindowOptions.BoundsInPixels">
            <summary>
            Gets or sets the pixel bounds of the workbook's MDI child window when <see cref="T:Infragistics.Excel.CustomView"/> 
            owning these window options is applied.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> This property will have no affect on the workbook if <see cref="P:Infragistics.Excel.CustomViewWindowOptions.Maximized"/> is True. However, in this case,
            the value of this property will still be saved with the workbook.
            </p>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:Infragistics.Excel.Workbook"/> in the Excel file. It can only be saved
            with a CustomView. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.WorkbookWindowOptions"/> and
            calling <see cref="T:CustomView.Apply"/> on the associated CustomView will not apply this property. Only by 
            applying the custom view through the Microsoft Excel user interface will the setting on this property be applied.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            The left or top of the value assigned is outside the bounds of -32768 and 32767.
            </exception>
            <exception cref="T:System.ArgumentException">
            The width or height of the value assigned is outside the bounds of 0 and 65535.
            </exception>
            <value>
            The pixel bounds of the workbook's MDI child window when CustomView owning these 
            window options is applied.
            </value>
            <seealso cref="M:Infragistics.Excel.CustomView.Apply"/>
        </member>
        <member name="P:Infragistics.Excel.CustomViewWindowOptions.Maximized">
            <summary>
            Gets or sets the value indicating whether the workbook's MDI child window will be maximized
            when the <see cref="T:Infragistics.Excel.CustomView"/> owning these window options is applied.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:Infragistics.Excel.Workbook"/> in the Excel file. It can only be saved
            with a CustomView. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.WorkbookWindowOptions"/> and
            calling <see cref="T:CustomView.Apply"/> on the associated CustomView will not apply this property. Only by 
            applying the custom view through the Microsoft Excel user interface will the setting on this property be applied.
            </p>
            </remarks>
            <value>
            The value indicating whether the workbook's MDI child window will be maximized when the CustomView owning these 
            window options is applied.
            </value>
            <seealso cref="M:Infragistics.Excel.CustomView.Apply"/>
            <seealso cref="P:Infragistics.Excel.WorkbookWindowOptions.Minimized"/>
        </member>
        <member name="P:Infragistics.Excel.CustomViewWindowOptions.ShowFormulaBar">
            <summary>
            Gets or sets the value indicating whether Microsoft Excel will display the formula bar when
            the <see cref="T:Infragistics.Excel.CustomView"/> owning these window options is applied.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:Infragistics.Excel.Workbook"/> in the Excel file. It can only be saved
            with a CustomView. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.WorkbookWindowOptions"/> and
            calling <see cref="M:Infragistics.Excel.CustomView.Apply"/> on the associated CustomView will not apply this property. Only by 
            applying the custom view through the Microsoft Excel user interface will the setting on this property be applied.
            </p>
            </remarks>
            <value>
            The value indicating whether Microsoft Excel will display the formula bar when the CustomView owning these window 
            options is applied.
            </value>
            <seealso cref="M:Infragistics.Excel.CustomView.Apply"/>
        </member>
        <member name="P:Infragistics.Excel.CustomViewWindowOptions.ShowStatusBar">
            <summary>
            Gets or sets the value indicating whether Microsoft Excel will display the status bar when
            the <see cref="T:Infragistics.Excel.CustomView"/> owning these window options is applied.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:Infragistics.Excel.Workbook"/> in the Excel file. It can only be saved
            with a CustomView. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.WorkbookWindowOptions"/> and
            calling <see cref="T:CustomView.Apply"/> on the associated CustomView will not apply this property. Only by 
            applying the custom view through the Microsoft Excel user interface will the setting on this property be applied.
            </p>
            </remarks>
            <value>
            The value indicating whether Microsoft Excel will display the status bar when the CustomView owning these window 
            options is applied.
            </value>
            <seealso cref="M:Infragistics.Excel.CustomView.Apply"/>
        </member>
        <member name="T:Infragistics.Excel.ErrorValue">
            <summary>
            Represents an error value in Microsoft Excel.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.ErrorValue.ToString">
            <summary>
            Gets the string representation of the error value.
            </summary>
            <returns>The string representation of the error value.</returns>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.ArgumentOrFunctionNotAvailable">
            <summary>
            Gets the ErrorValue representing the #N/A error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when a value isn't available for some part of a formula.
            </p>
            </remarks>
            <value>The ErrorValue representing the #N/A error.</value>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.Circularity">
            <summary>
            Gets the ErrorValue representing a circularity error.
            </summary>
            <remarks>
            <p class="body">
            There is no error constant for a circularity in Microsoft Excel and a circularity cannot be the result of a formula in Microsoft Excel.
            However, for run-time purposes, after loading or before saving a workbook, this error value will be used for the result of formulas
            which cause circular references when the owning workbook has <see cref="P:Infragistics.Excel.Workbook.IterativeCalculationsEnabled"/> set to False.
            </p>
            <p class="body">
            In Microsoft Excel, setting a circular reference formula on a cell will show an error dialog the first time the problem occurs. Subsequent
            formulas violating the circular reference restriction will just evaluate to zero. Therefore, when this value is encountered in a cell, it 
            can be treated as a zero for calculation purposes. This error value will be returned though so an actual zero value in a cell can be 
            differentiated from a circularity error.
            </p>
            <p class="note">
            <B>Note:</B> Because there is no circularity error constant in Microsoft Excel, this error value cannot be assigned to a cell manually.
            Attempting to assign this error value to a cell will result in an InvalidOperationException to be thrown. This error value will only be
            valid as the result of a formula which has been applied to a cell.
            </p>
            </remarks>
            <value>The ErrorValue representing a circularity error.</value>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.DivisionByZero">
            <summary>
            Gets the ErrorValue representing the #DIV/0! error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when a number is divided by zero.
            </p>
            </remarks>
            <value>The ErrorValue representing the #DIV/0! error.</value>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.EmptyCellRangeIntersection">
            <summary>
            Gets the ErrorValue representing the #NULL! error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when there is an intersection of two references that do not contain any common cells.
            The intersection operator is a space between two references.
            </p>
            </remarks>
            <value>The ErrorValue representing the #NULL! error.</value>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.InvalidCellReference">
            <summary>
            Gets the ErrorValue representing the #REF! error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when a cell reference or cell range reference is not valid.
            </p>
            </remarks>
            <value>The ErrorValue representing the #REF! error.</value>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.ValueRangeOverflow">
            <summary>
            Gets the ErrorValue representing the #NUM! error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when there are invalid numeric values in a formula.
            </p>
            </remarks>
            <value>The ErrorValue representing the #NUM! error.</value>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.WrongFunctionName">
            <summary>
            Gets the ErrorValue representing the #NAME? error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when text in a formula is not recognized.
            </p>
            </remarks>
            <value>The ErrorValue representing the #NAME? error.</value>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.WrongOperandType">
            <summary>
            Gets the ErrorValue representing the #VALUE! error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when an incorrect argument or operand is used in a function.
            </p>
            </remarks>
            <value>The ErrorValue representing the #VALUE! error.</value>
        </member>
        <member name="T:Infragistics.Excel.FormattedString">
            <summary>
            Represents a string with mixed formatting in a cell, cell comment, or shape.
            </summary>
            <remarks>
            <p class="body">
            The formatting of the string is controlled in a similar fashion as it would be in Microsoft Excel. In Excel, the user
            must select a portion of the text and set the various formatting properties of that selected text. 
            </p>
            <p class="body">
            With the FormattedString, a portion of the string is "selected" by calling either <see cref="M:Infragistics.Excel.FormattedString.GetFont(System.Int32)">GetFont(int)</see> or 
            <see cref="M:Infragistics.Excel.FormattedString.GetFont(System.Int32,System.Int32)">GetFont(int,int)</see>. Formatting properties are then set on the returned 
            <see cref="T:Infragistics.Excel.FormattedStringFont"/> and all characters in the font's selection range are given these properties.
            </p>
            <p class="body">
            Getting the formatting properties of a <see cref="T:Infragistics.Excel.FormattedStringFont"/> will return the formatting of the first 
            character in font's selection range. This is similar to Excel, which will update the formatting interface to 
            reflect the formatting of the first character in a selection range when a cell's text is selected.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Excel.FormattedString"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="unformattedString"/> is null.
            </exception>
            <param name="unformattedString">The string that will be displayed in the cell with the formatting.</param>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:Infragistics.Excel.FormattedString"/>.
            </summary>
            <param name="obj">The value to test for equality to this FormattedString.</param>
            <returns>
            True if the <paramref name="obj"/> is a FormattedString instance and it contains the same unformatted 
            string and formatting as this FormattedString; False otherwise.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.GetHashCode">
            <summary>
            Calculates the has code for this <see cref="T:Infragistics.Excel.FormattedString"/>.
            </summary>
            <returns>A number which can be used in hashing functions.</returns>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.ToString">
            <summary>
            Returns the <see cref="T:System.String"/> that represents this <see cref="T:Infragistics.Excel.FormattedString"/>.
            This is just the unformatted string.
            </summary>
            <remarks>
            <p class="body">
            This will return the same value as <see cref="P:Infragistics.Excel.FormattedString.UnformattedString"/>.
            </p>
            </remarks>
            <returns>The String that represents this FormattedString.</returns>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.Clone">
            <summary>
            Creates a new <see cref="T:Infragistics.Excel.FormattedString"/> that is a copy of this one.
            </summary>
            <remarks>
            <p class="body">
            This should be used if the same formatted string needs to be used in multiple cells.
            The FormattedString class can only exist as the <see cref="P:Infragistics.Excel.WorksheetCell.Value"/>
            of one cell at a time. If the FormattedString is already the value of a cell, and needs
            to be set as the value of another cell, clone the FormattedString and set the returned
            clone as value of the cell.
            </p>
            <p class="body">
            The cloned FormattedString only takes its original configuration for this instance.
            If this instance is cloned and than changed, the clone will not be changed as well; it will
            remain as it was when it was cloned.
            </p>
            </remarks>
            <returns>A new FormattedString that is a copy of this one.</returns>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.GetFont(System.Int32)">
            <summary>
            Gets the font which controls the formatting properties in the string from the specified start index to 
            the end of the string.
            </summary>
            <remarks>
            <p class="body">
            If the start index is greater than or equal to the length of the unformatted string, no exception 
            will be thrown. It will be thrown later when one of the formatting properties of the returned
            <see cref="T:Infragistics.Excel.FormattedStringFont"/> is set.
            </p>
            </remarks>
            <param name="startIndex">The index of the first character the returned font controls.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero.
            </exception>
            <returns>
            A FormattedStringFont instance which controls the formatting of the end portion of the string.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.GetFont(System.Int32,System.Int32)">
            <summary>
            Gets the font which controls the formatting properties in the string from the specified start index for
            the specified number of characters.
            </summary>
            <remarks>
            <p class="body">
            If the start index is greater than or equal to the length of the unformatted string, no exception 
            will be thrown. It will be thrown later when one of the formatting properties of the returned
            <see cref="T:Infragistics.Excel.FormattedStringFont"/> is set.
            </p>
            </remarks>
            <param name="startIndex">The index of the first character the returned font controls.</param>
            <param name="length">The number of characters after the start index controlled by the returned font.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="length"/> is less than one. A zero length string cannot be controlled by a formatting font.
            </exception>
            <returns>
            A FormattedStringFont instance which controls the formatting of a portion of the string.
            </returns>
        </member>
        <member name="P:Infragistics.Excel.FormattedString.UnformattedString">
            <summary>
            Gets or sets the unformatted string.
            </summary>
            <remarks>
            <p class="body">
            If the new unformatted string assigned is shorter than the old unformatted string, all formatting
            outside the range of the new value will be lost.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is a null string.
            </exception>
            <value>The unformatted string.</value>
        </member>
        <member name="T:Infragistics.Excel.FormattedStringFont">
            <summary>
            Controls the formatting of a range of characters in a <see cref="P:Infragistics.Excel.FormattedStringFont.FormattedString"/>.
            </summary>
            <remarks>
            <p class="body">
            The formatting of the string is controlled in a similar fashion as it would be in Microsoft Excel. In Excel, the user
            must select a portion of the text and set the various formatting properties of that selected text. 
            </p>
            <p class="body">
            With the <see cref="P:Infragistics.Excel.FormattedStringFont.FormattedString"/>, a portion of the string is "selected" by calling either 
            <see cref="M:Infragistics.Excel.FormattedString.GetFont(System.Int32)">GetFont(int)</see> or 
            <see cref="M:Infragistics.Excel.FormattedString.GetFont(System.Int32,System.Int32)">GetFont(int,int)</see>. Formatting properties 
            are then set on the returned FormattedStringFont and all characters in the font's selection range are given these 
            properties.
            </p>
            <p class="body">
            Getting the formatting properties of a FormattedStringFont will return the formatting of the first character in font's 
            selection range. This is similar to Excel, which will update the formatting interface to reflect the formatting of the 
            first character in a selection range when a cell's text is selected.
            </p>
            </remarks>
            <seealso cref="T:FormattedString"/>
            <seealso cref="M:FormattedString.GetFont(int)"/>
            <seealso cref="M:FormattedString.GetFont(int,int)"/>
        </member>
        <member name="T:Infragistics.Excel.IWorkbookFont">
            <summary>
            Represents a font for the cell in the related context.
            </summary>
            <remarks>
            <p class="body">
            If a property of a font has a default value, value of the previous font in resolution chain is used. The resolution priority 
            is the following: 
            <list type="number">
            <item>Cell (highest priority)</item>
            <item>Row</item>
            <item>Column</item>
            <item>Default Cell Format (lowest priority)</item>
            </list>
            For example, if a column font is set to blue and bold and a row font is set to italic and not bold, the font in the cell at 
            the intersection of the row and column would have blue, italic text in the saved workbook.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.IWorkbookFont.SetFontFormatting(Infragistics.Excel.IWorkbookFont)">
            <summary>
            Sets all font properties to specific font formatting.
            </summary>
            <param name="source">Source font format.</param>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.Bold">
            <summary>
            Gets or sets the value which indicates whether the font is bold.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <value>The value which indicates whether the font is bold.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.Color">
            <summary>
            Gets or sets the foreground color of the font.
            </summary>
            <value>The foreground color of the font.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.Height">
            <summary>
            Gets or sets the font height in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            A negative value indicates the default font height, in which case the <see cref="P:Infragistics.Excel.Workbook.DefaultFontHeight"/> is used.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is positive and outside the valid font height range of 20 and 8180.
            </exception>
            <value>The font height in twips (1/20th of a point).</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.Italic">
            <summary>
            Gets or sets the value which indicates whether the font is italic.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <value>The value which indicates whether the font is italic.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.Name">
            <summary>
            Gets or sets the font family name.
            </summary>
            <value>The font family name.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.Strikeout">
            <summary>
            Gets or sets the value which indicates whether the font is struck out.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <value>The value which indicates whether the font is struck out.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.SuperscriptSubscriptStyle">
            <summary>
            Gets or sets the value which indicates whether the font is superscript or subscript.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.FontSuperscriptSubscriptStyle"/> enumeration.
            </exception>
            <value>The value which indicates whether the font is superscript or subscript.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.UnderlineStyle">
            <summary>
            Gets or sets the underline style of the font.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.FontUnderlineStyle"/> enumeration.
            </exception>
            <value>The underline style of the font.</value>
        </member>
        <member name="M:Infragistics.Excel.FormattedStringFont.SetFontFormatting(Infragistics.Excel.IWorkbookFont)">
            <summary>
            Sets all properties of this font to the properties of the specified font.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Infragistics.Excel.FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <param name="source">The font whose properties should be copied over to this font.</param>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Bold">
            <summary>
            Gets or sets the value indicating whether the font is bold.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Infragistics.Excel.FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The value indicating whether the font is bold.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Color">
            <summary>
            Gets or sets the fore color of the font.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Infragistics.Excel.FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The fore color of the font.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.FormattedString">
            <summary>
            Gets the formatted string which is controlled by this font.
            </summary>
            <value>The formatted string which is controlled by this font.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Height">
            <summary>
            Gets or sets the height of the font.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is positive and outside the valid font height range of 20 and 8180.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Infragistics.Excel.FormattedString"/> associated with font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The height of the font.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Italic">
            <summary>
            Gets or sets the value indicating whether the font is italic.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Infragistics.Excel.FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The value indicating whether the font is italic.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Length">
            <summary>
            Gets the number of characters covered by this font. Zero indicates the font controls from 
            the <see cref="P:Infragistics.Excel.FormattedStringFont.StartIndex"/> to the end of the string.
            </summary>
            <value>
            The number of characters covered by this font. Zero indicates the font controls from the 
            StartIndex to the end of the string.
            </value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Name">
            <summary>
            Gets or sets the name of the font.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Infragistics.Excel.FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The name of the font.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.StartIndex">
            <summary>
            Gets the index of the first character covered by this font.
            </summary>
            <value>The index of the first character covered by this font.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Strikeout">
            <summary>
            Gets or sets the value indicating whether the font is struck out.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Infragistics.Excel.FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The value indicating whether the font is struck out.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.SuperscriptSubscriptStyle">
            <summary>
            Gets or sets the value indicating whether the font is superscript or subscript.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.FontSuperscriptSubscriptStyle"/> enumeration.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Infragistics.Excel.FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The value indicating whether the font is superscript or subscript.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.UnderlineStyle">
            <summary>
            Gets or sets the underline style of the font.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.FontUnderlineStyle"/> enumeration.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:Infragistics.Excel.FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The underline style of the font.</value>
        </member>
        <member name="T:Infragistics.Excel.HiddenColumnCollection">
            <summary>
            A collection of hidden <see cref="T:Infragistics.Excel.WorksheetColumn"/> instances.
            </summary>
            <remarks>
            <p class="body">
            The columns in this collection do not necessarily have their <see cref="P:Infragistics.Excel.RowColumnBase.Hidden"/> property
            set to True. This collection applies to a <see cref="P:Infragistics.Excel.HiddenColumnCollection.Worksheet"/>, but belongs to a <see cref="T:Infragistics.Excel.CustomView"/>.
            When the CustomView which owns this collection is applied, the columns in this collection will have their
            <see cref="P:Infragistics.Excel.RowColumnBase.Hidden"/> property set to True. All other columns in the associated worksheet will
            be made visible.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Excel.CustomView.GetHiddenColumns(Infragistics.Excel.Worksheet)"/>
        </member>
        <member name="M:Infragistics.Excel.HiddenColumnCollection.Add(Infragistics.Excel.WorksheetColumn)">
            <summary>
            Adds a column to the collection.
            </summary>
            <remarks>
            <p class="body">
            This collection does not allow duplicate values. If the specified column already exists in the collection,
            nothing will happen. This collection also keeps itself sorted, so the column added will not necessarily be
            added at the end of the collection.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="column"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="column"/> does not belong to the same worksheet this collection is associated with.
            </exception>
            <param name="column">The column to be added to the hidden columns collection.</param>
        </member>
        <member name="M:Infragistics.Excel.HiddenColumnCollection.Clear">
            <summary>
            Clears all columns from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.HiddenColumnCollection.Contains(Infragistics.Excel.WorksheetColumn)">
            <summary>
            Determines whether the specified column exists in the collection.
            </summary>
            <param name="column">The column to search for in the collection.</param>
            <returns>
            True if the column exists in the collection; False otherwise or if the specified column is null.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.HiddenColumnCollection.Remove(Infragistics.Excel.WorksheetColumn)">
            <summary>
            Removes the specified column from the collection if it exists.
            </summary>
            <param name="column">The column to removed from the collection.</param>
            <returns>
            True if the column existed in the collection and was removed; False otherwise or if the 
            specified column is null.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.HiddenColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the column at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the column in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.HiddenColumnCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.HiddenColumnCollection.Count">
            <summary>
            Gets the number of columns in the collection.
            </summary>
            <value>The number of columns in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.HiddenColumnCollection.Item(System.Int32)">
            <summary>
            Gets the column at the specified index.
            </summary>
            <param name="index">The zero-based index of the column to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.HiddenColumnCollection.Count"/>.
            </exception>
            <value>The column at the specified index.</value>
        </member>
        <member name="P:Infragistics.Excel.HiddenColumnCollection.Worksheet">
            <summary>
            Gets the worksheet associated with this collection.
            </summary>
            <value>The worksheet associated with this collection.</value>
        </member>
        <member name="T:Infragistics.Excel.HiddenRowCollection">
            <summary>
            A collection of hidden <see cref="T:Infragistics.Excel.WorksheetRow"/> instances.
            </summary>
            <remarks>
            <p class="body">
            The rows in this collection do not necessarily have their <see cref="P:Infragistics.Excel.RowColumnBase.Hidden"/> property
            set to True. This collection applies to a <see cref="P:Infragistics.Excel.HiddenRowCollection.Worksheet"/>, but belongs to a <see cref="T:Infragistics.Excel.CustomView"/>.
            When the CustomView which owns this collection is applied, the rows in this collection will have their
            <see cref="P:Infragistics.Excel.RowColumnBase.Hidden"/> property set to True. All other rows in the associated worksheet will
            be made visible.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Excel.CustomView.GetHiddenRows(Infragistics.Excel.Worksheet)"/>
        </member>
        <member name="M:Infragistics.Excel.HiddenRowCollection.Add(Infragistics.Excel.WorksheetRow)">
            <summary>
            Adds a row to the collection.
            </summary>
            <remarks>
            <p class="body">
            This collection does not allow duplicate values. If the specified row already exists in the collection,
            nothing will happen. This collection also keeps itself sorted, so the row added will not necessarily be
            added at the end of the collection.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="row"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="row"/> does not belong to the same worksheet this collection is associated with.
            </exception>
            <param name="row">The row to be added to the hidden rows collection.</param>
        </member>
        <member name="M:Infragistics.Excel.HiddenRowCollection.Clear">
            <summary>
            Clears all rows from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.HiddenRowCollection.Contains(Infragistics.Excel.WorksheetRow)">
            <summary>
            Determines whether the specified row exists in the collection.
            </summary>
            <param name="row">The row to search for in the collection.</param>
            <returns>
            True if the row exists in the collection; False otherwise or if the specified row is null.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.HiddenRowCollection.Remove(Infragistics.Excel.WorksheetRow)">
            <summary>
            Removes the specified row from the collection if it exists.
            </summary>
            <param name="row">The row to removed from the collection.</param>
            <returns>
            True if the row existed in the collection and was removed; False otherwise or if the 
            specified row is null.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.HiddenRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the row at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the row in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.HiddenRowCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.HiddenRowCollection.Count">
            <summary>
            Gets the number of rows in the collection.
            </summary>
            <value>The number of rows in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.HiddenRowCollection.Item(System.Int32)">
            <summary>
            Gets the row at the specified index.
            </summary>
            <param name="index">The zero-based index of the row to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.HiddenRowCollection.Count"/>.
            </exception>
            <value>The row at the specified index.</value>
        </member>
        <member name="P:Infragistics.Excel.HiddenRowCollection.Worksheet">
            <summary>
            Gets the worksheet associated with this collection.
            </summary>
            <value>The worksheet associated with this collection.</value>
        </member>
        <member name="T:Infragistics.Excel.IWorksheetCellFormat">
            <summary>
            Represents the format for the cell in the related context.
            </summary>
            <remarks>
            <p class="body">
            Cell formatting is associated with each cell, row, and column in a Worksheet. If a property of the cell format has a default 
            value, the value of the previous format in resolution chain is used. The resolution priority is the following: 
            <list type="number">
            <item>Cell (highest priority)</item>
            <item>Row</item>
            <item>Column</item>
            <item>Default Cell Format (lowest priority)</item>
            </list>
            For example, if a row format background color is blue, a column format background color is red, and a cell with the 
            default background color (Color.Empty) is at the intersection of the row and column, it will have a blue color in exported 
            file (as the row has a higher priority than the column). The Resolution process is done internally during exporting process, 
            which means that cell format background color is always default if not explicitly set.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.IWorksheetCellFormat.SetFormatting(Infragistics.Excel.IWorksheetCellFormat)">
            <summary>
            Copies all cell format properties to from the specified cell format.
            </summary>
            <param name="source">The cell format from which to copy the properties.</param>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.Alignment">
            <summary>
            Gets or sets the horizontal alignment of the content in a cell.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.HorizontalCellAlignment"/> enumeration.
            </exception>
            <value>The horizontal alignment of the content in a cell.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.VerticalAlignment"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor">
            <summary>
            Gets or sets the bottom border color.
            </summary>
            <remarks>
            <p class="body">
            If the border color is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/> is set to Default, 
            it will be resolved to Thin.
            </p>
            </remarks>
            <value>The bottom border color.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle">
            <summary>
            Gets or sets the bottom border style.
            </summary>
            <remarks>
            <p class="body">
            If the border style is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/> is default (Color.Empty), 
            it will be resolved to Color.Black.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.CellBorderLineStyle"/> enumeration.
            </exception>
            <value>The bottom border style.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.FillPattern">
            <summary>
            Gets or sets the fill pattern in the cell.
            </summary>
            <remarks>
            <p class="body">
            If fill pattern is set to Solid, the cell is filled using just the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternForegroundColor"/>. For all other patterns, 
            both FillPatternForegroundColor and <see cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternBackgroundColor"/> are used.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.FillPatternStyle"/> enumeration.
            </exception>
            <value>The fill pattern in the cell.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternForegroundColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternBackgroundColor"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternBackgroundColor">
            <summary>
            Gets or sets the background color of the fill pattern.
            </summary>
            <remarks>
            <p class="body">
            If the background color is set to a non-default value and <see cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPattern"/> is set to Default, resolved fill pattern style is 
            Gray50percent.
            </p>
            </remarks>
            <value>The background color of the fill pattern.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPattern"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternForegroundColor"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternForegroundColor">
            <summary>
            Gets or sets the foreground color of the fill pattern.
            </summary>
            <remarks>
            <p class="body">
            If the foreground color is set to a non-default value and <see cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPattern"/> is set to Default, resolved fill pattern style is 
            Solid. There, a solid cell color can easily be applied by setting only the FillPatternForegroundColor.
            </p>
            </remarks>
            <value>The foreground color of the fill pattern.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPattern"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternBackgroundColor"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.Font">
            <summary>
            Gets or sets the default font formatting.
            </summary>
            <remarks>
            <p class="body">
            This font formatting is just the default font used in the cell. This can be overridden by strings on a character by character basis by
            using the <see cref="T:Infragistics.Excel.FormattedString"/> class.
            </p>
            </remarks>
            <value>The default font formatting.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.FormatString">
            <summary>
            Gets or sets the number format string.
            </summary>
            <remarks>
            <p class="body">For more information on excel format strings, consult Microsoft Excel help.</p>
            </remarks>
            <value>The number format string.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.Indent">
            <summary>
            Gets or sets the indent in units of average character widths.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid indent level range of 0 and 15.
            </exception>
            <value>The indent in units of average character widths.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor">
            <summary>
            Gets or sets the left border color.
            </summary>
            <remarks>
            <p class="body">
            If the border color is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/> is set to Default, 
            it will be resolved to Thin.
            </p>
            </remarks>
            <value>The left border color.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle">
            <summary>
            Gets or sets the left border style.
            </summary>
            <remarks>
            <p class="body">
            If the border style is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/> is default (Color.Empty), 
            it will be resolved to Color.Black.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.CellBorderLineStyle"/> enumeration.
            </exception>
            <value>The left border style.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.Locked">
            <summary>
            Gets or sets the valid which indicates whether the cell is locked in protected mode.
            </summary>
            <remarks>
            <p class="body">The Locked valid is used in Excel file only if the associated <see cref="T:Infragistics.Excel.Worksheet"/> or <see cref="T:Infragistics.Excel.Workbook"/> 
            is protected. Otherwise the value is ignored.
            </p>
            </remarks>
            <value>The valid which indicates whether the cell is locked in protected mode.</value>
            <seealso cref="P:Infragistics.Excel.Workbook.Protected"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor">
            <summary>
            Gets or sets the right border color.
            </summary>
            <remarks>
            <p class="body">
            If the border color is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/> is set to Default, 
            it will be resolved to Thin.
            </p>
            </remarks>
            <value>The right border color.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle">
            <summary>
            Gets or sets the right border style.
            </summary>
            <remarks>
            <p class="body">
            If the border style is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/> is default (Color.Empty), 
            it will be resolved to Color.Black.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.CellBorderLineStyle"/> enumeration.
            </exception>
            <value>The right border style.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.Rotation">
            <summary>
            Gets or sets the rotation of the cell content in degrees.
            </summary>
            <remarks>
            <p class="body">
            Cell text rotation, in degrees; 0 � 90 is up 0 � 90 degrees, 91 � 180 is down 1 � 90 degrees, and 255 is vertical.
            </p>
            </remarks>
            <value>The rotation of the cell content in degrees.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.ShrinkToFit">
            <summary>
            Gets or sets the value indicating whether the cell content will shrink to fit the cell.
            </summary>
            <remarks>
            <p class="body">
            If True, the size of the cell font will shrink so all data fits within the cell.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <value>The value indicating whether the cell content will shrink to fit the cell.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor">
            <summary>
            Gets or sets the top border color.
            </summary>
            <remarks>
            <p class="body">
            If the border color is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/> is set to Default, 
            it will be resolved to Thin.
            </p>
            </remarks>
            <value>The top border color.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle">
            <summary>
            Gets or sets the top border style.
            </summary>
            <remarks>
            <p class="body">
            If the border style is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/> is default (Color.Empty), 
            it will be resolved to Color.Black.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.CellBorderLineStyle"/> enumeration.
            </exception>
            <value>The top border style.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the content in a cell.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.VerticalCellAlignment"/> enumeration.
            </exception>
            <value>The vertical alignment of the content in a cell.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.Alignment"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.WrapText">
            <summary>
            Gets or sets the value which indicates whether text will wrap in a cell.
            </summary>
            <remarks>
            <p class="body">
            If True, and the row associated with the cell has a default <see cref="P:Infragistics.Excel.WorksheetRow.Height"/>, the row's
            height will automatically be increased to fit wrapped content.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <value>The value which indicates whether text will wrap in a cell.</value>
        </member>
        <member name="T:Infragistics.Excel.NamedReferenceCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Excel.NamedReference"/> instances in a workbook.
            </summary>
            <seealso cref="T:Infragistics.Excel.NamedReference"/>
            <seealso cref="T:Workbook.NamedReferences"/>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Add(System.String,System.String)">
            <summary>
            Adds a named reference with a scope of the collection's associated <see cref="T:Infragistics.Excel.Workbook"/> to the collection.
            </summary>
            <remarks>
            <p class="body">
            The <see cref="T:Infragistics.Excel.CellReferenceMode"/> of the owning <see cref="P:Infragistics.Excel.NamedReferenceCollection.Workbook"/> will be used to parse the formula.
            </p>
            </remarks>
            <param name="name">The name to give the named reference.</param>
            <param name="formula">The formula to give the named reference.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is longer than 255 characters.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is invalid. The name must begin with a letter, underscore (_), or a backslash (\).
            All other characters in the name must be letters, numbers, periods, underscores (_), or backslashes (\).
            The name cannot be a an A1 cell reference (1 to 3 letters followed by 1 to 6 numbers). In addition, the name
            cannot be 'r', 'R', 'c', or 'C' or start with a row or column reference in R1C1 cell reference mode 
            ('R' followed by 1 to 6 numbers or 'C' followed by 1 to 6 numbers).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="name"/> is used by another named reference which also has a scope of the workbook. 
            Named reference names are compared case-insensitively.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formula"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="formula"/> is not a valid formula. The inner exception will contain the <see cref="T:Infragistics.Excel.FormulaParseException"/>
            describing the reason the formula was not valid.
            </exception>
            <returns>The named reference which was added to the collection.</returns>
            <seealso cref="P:Infragistics.Excel.NamedReferenceBase.Scope"/>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Add(System.String,System.String,Infragistics.Excel.CellReferenceMode)">
            <summary>
            Adds a named reference with a scope of the collection's associated <see cref="T:Infragistics.Excel.Workbook"/> to the collection.
            </summary>
            <param name="name">The name to give the named reference.</param>
            <param name="formula">The formula to give the named reference.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is longer than 255 characters.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is invalid. The name must begin with a letter, underscore (_), or a backslash (\).
            All other characters in the name must be letters, numbers, periods, underscores (_), or backslashes (\).
            The name cannot be a an A1 cell reference (1 to 3 letters followed by 1 to 6 numbers). In addition, the name
            cannot be 'r', 'R', 'c', or 'C' or start with a row or column reference in R1C1 cell reference mode 
            ('R' followed by 1 to 6 numbers or 'C' followed by 1 to 6 numbers).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="name"/> is used by another named reference which also has a scope of the workbook. 
            Named reference names are compared case-insensitively.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formula"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="formula"/> is not a valid formula. The inner exception will contain the <see cref="T:Infragistics.Excel.FormulaParseException"/>
            describing the reason the formula was not valid.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>The named reference which was added to the collection.</returns>
            <seealso cref="P:Infragistics.Excel.NamedReferenceBase.Scope"/>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Add(System.String,System.String,Infragistics.Excel.Worksheet)">
            <summary>
            Adds a named reference with a scope of a worksheet to the collection.
            </summary>
            <remarks>
            <p class="body">
            The <see cref="T:Infragistics.Excel.CellReferenceMode"/> of the owning <see cref="P:Infragistics.Excel.NamedReferenceCollection.Workbook"/> will be used to parse the formula.
            </p>
            </remarks>
            <param name="name">The name to give the named reference.</param>
            <param name="formula">The formula to give the named reference.</param>
            <param name="worksheet">The scope of the named reference.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is longer than 255 characters.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is invalid. The name must begin with a letter, underscore (_), or a backslash (\).
            All other characters in the name must be letters, numbers, periods, underscores (_), or backslashes (\).
            The name cannot be a an A1 cell reference (1 to 3 letters followed by 1 to 6 numbers). In addition, the name
            cannot be 'r', 'R', 'c', or 'C' or start with a row or column reference in R1C1 cell reference mode 
            ('R' followed by 1 to 6 numbers or 'C' followed by 1 to 6 numbers).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="name"/> is used by another named reference which also has a scope of 
            the specified <paramref name="worksheet"/>. Named reference names are compared case-insensitively.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formula"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="formula"/> is not a valid formula. The inner exception will contain the <see cref="T:Infragistics.Excel.FormulaParseException"/>
            describing the reason the formula was not valid.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="worksheet"/> does not belong to the workbook owning this collection.
            </exception>
            <returns>The named reference which was added to the collection.</returns>
            <seealso cref="P:Infragistics.Excel.NamedReferenceBase.Scope"/>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Add(System.String,System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.Worksheet)">
            <summary>
            Adds a named reference with a scope of a worksheet to the collection.
            </summary>
            <param name="name">The name to give the named reference.</param>
            <param name="formula">The formula to give the named reference.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="worksheet">The scope of the named reference.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is longer than 255 characters.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is invalid. The name must begin with a letter, underscore (_), or a backslash (\).
            All other characters in the name must be letters, numbers, periods, underscores (_), or backslashes (\).
            The name cannot be a an A1 cell reference (1 to 3 letters followed by 1 to 6 numbers). In addition, the name
            cannot be 'r', 'R', 'c', or 'C' or start with a row or column reference in R1C1 cell reference mode 
            ('R' followed by 1 to 6 numbers or 'C' followed by 1 to 6 numbers).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="name"/> is used by another named reference which also has a scope of 
            the specified <paramref name="worksheet"/>. Named reference names are compared case-insensitively.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formula"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="formula"/> is not a valid formula. The inner exception will contain the <see cref="T:Infragistics.Excel.FormulaParseException"/>
            describing the reason the formula was not valid.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="worksheet"/> does not belong to the workbook owning this collection.
            </exception>
            <returns>The named reference which was added to the collection.</returns>
            <seealso cref="P:Infragistics.Excel.NamedReferenceBase.Scope"/>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Clear">
            <summary>
            Clears all named references from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Contains(Infragistics.Excel.NamedReference)">
            <summary>
            Determines whether a named reference is in the collection.
            </summary>
            <param name="namedReference">The named reference to locate in the collection.</param>
            <returns>True if the named reference is found; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Find(System.String)">
            <summary>
            Finds a named reference in the collection with a scope of the collection's associated <see cref="T:Infragistics.Excel.Workbook"/>.
            </summary>
            <remarks>
            <p class="body">
            Named reference names are compared case-insensitively.
            </p>
            </remarks>
            <param name="name">The name of the named reference to find.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <returns>The named reference with the specified name or null if the named reference was not found.</returns>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Find(System.String,Infragistics.Excel.Worksheet)">
            <summary>
            Finds a named reference in the collection with a scope of the specified worksheet.
            </summary>
            <remarks>
            <p class="body">
            Named reference names are compared case-insensitively.
            </p>
            </remarks>
            <param name="name">The name of the named reference to find.</param>
            <param name="worksheetScope">The worksheet that the named reference found must have a scope of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheetScope"/> is null.
            </exception>
            <returns>The named reference with the specified name or null if the named reference was not found.</returns>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.FindAll(System.String)">
            <summary>
            Finds all named references in the collection with the specified name.
            </summary>
            <remarks>
            <p class="body">
            Named reference names are compared case-insensitively.
            </p>
            </remarks>
            <param name="name">The name of the named references to find.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <returns>An array of <see cref="T:Infragistics.Excel.NamedReference"/> instances with the specified name.</returns>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Remove(Infragistics.Excel.NamedReference)">
            <summary>
            Removes the specified named reference from the collection.
            </summary>
            <param name="namedReference">The named reference to remove fro the collection.</param>
            <returns>True if the named reference existed in the collection and was removed; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the named reference at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the named reference in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.NamedReferenceCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.NamedReferenceCollection.Count">
            <summary>
            Gets the number of named references in the collection.
            </summary>
            <value>The number of named references in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.NamedReferenceCollection.Item(System.Int32)">
            <summary>
            Gets the named reference at the specified index.
            </summary>
            <param name="index">The zero-based index of the named reference to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.NamedReferenceCollection.Count"/>.
            </exception>
            <value>The named reference at the specified index.</value>
        </member>
        <member name="P:Infragistics.Excel.NamedReferenceCollection.Workbook">
            <summary>
            Gets the workbook associated with this collection.
            </summary>
            <value>The workbook associated with this collection.</value>
        </member>
        <member name="T:Infragistics.Excel.PrintOptions">
            <summary>
            Class which exposes the various print options available for a worksheet which can be saved with both a 
            worksheet and a custom view.
            </summary>
            <remarks>
            <p class="body">
            This class provides a way to control how a worksheet is printed.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Excel.Worksheet.PrintOptions"/>
            <seealso cref="M:Infragistics.Excel.CustomView.GetPrintOptions(Infragistics.Excel.Worksheet)"/>
        </member>
        <member name="M:Infragistics.Excel.PrintOptions.Reset">
            <summary>
            Resets the print options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.BottomMargin">
            <summary>
            Gets or sets the margin at the bottom of each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid margin range of 0 and 100.
            </exception>
            <value>The margin at the bottom of each printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.FooterMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.HeaderMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.LeftMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.RightMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.TopMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.CenterHorizontally">
            <summary>
            Gets or sets the value indicating whether the printed pages should be centered horizontally.
            </summary>
            <value>The value indicating whether the printed pages should be centered horizontally.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.CenterVertically"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.CenterVertically">
            <summary>
            Gets or sets the value indicating whether the printed pages should be centered vertically.
            </summary>
            <value>The value indicating whether the printed pages should be centered vertically.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.CenterHorizontally"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.DraftQuality">
            <summary>
            Gets or sets the value indicating whether the printed pages should be printed using draft quality.
            </summary>
            <value>The value indicating whether the printed pages should be printed using draft quality.</value>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.Footer">
            <summary>
            Gets or sets the footer for each page of the printed worksheet.
            </summary>
            <remarks>
            <p class="body">
            The '&amp;' character in the header and footer is a special character. Depending on what is after it, 
            the formatting of the text can be controlled or dynamic text can be inserted. Below is a list of 
            the available commands:
            <list type="table">
            	<listheader>
            		<term>Section commands</term>
            	</listheader>
            	<item>
            		<term>&amp;L</term>
            		<description>
            			The following text will appear in the left section. The formatting of new sections is 
            			always the default formatting, regardless of the formatting of the previous section.
            		</description>
            	</item>
            	<item>
            		<term>&amp;C</term>
            		<description>
            			The following text will appear in the center section. The formatting of new sections is 
            			always the default formatting, regardless of the formatting of the previous section.
            		</description>
            	</item>
            	<item>
            		<term>&amp;R</term>
            		<description>
            			The following text will appear in the right section. The formatting of new sections is 
            			always the default formatting, regardless of the formatting of the previous section.
            		</description>
            	</item>
            </list>
            <list type="table">
            	<listheader>
            		<term>Replacement commands</term>
            	</listheader>
            	<item>
            		<term>&amp;&amp;</term>
            		<description>Insert the '&amp;' character.</description>
            	</item>
            	<item>
            		<term>&amp;A</term>
            		<description>Insert the current worksheet name.</description>
            	</item>
            	<item>
            		<term>&amp;D</term>
            		<description>Insert the current date.</description>
            	</item>
            	<item>
            		<term>&amp;F</term>
            		<description>Insert the current file name.</description>
            	</item>
            	<item>
            		<term>&amp;G</term>
            		<description>Insert an image (<b>Note:</b> This command is currently not supported).</description>
            	</item>
            	<item>
            		<term>&amp;N</term>
            		<description>Insert the  number of pages the worksheet will need to print.</description>
            	</item>
            	<item>
            		<term>&amp;P</term>
            		<description>Insert the current page number.</description>
            	</item>
            	<item>
            		<term>&amp;T</term>
            		<description>Insert the current time.</description>
            	</item>
            	<item>
            		<term>&amp;Z</term>
            		<description>Insert the current file path (without the file name).</description>
            	</item>
            </list>
            <list type="table">
            	<listheader>
            		<term>Formatting commands</term>
            	</listheader>
            	<item>
            		<term>&amp;B</term>
            		<description>Toggle bold.</description>
            	</item>
            	<item>
            		<term>&amp;E</term>
            		<description>Toggle double underlining.</description>
            	</item>
            	<item>
            		<term>&amp;I</term>
            		<description>Toggle italics.</description>
            	</item>
            	<item>
            		<term>&amp;S</term>
            		<description>Toggle strikethrough.</description>
            	</item>
            	<item>
            		<term>&amp;U</term>
            		<description>Toggle underlining.</description>
            	</item>
            	<item>
            		<term>&amp;X</term>
            		<description>Toggle superscript.</description>
            	</item>
            	<item>
            		<term>&amp;Y</term>
            		<description>Toggle subscript.</description>
            	</item>
            	<item>
            		<term>&amp;&lt;FontSize&gt;</term>
            		<description>
            			Sets a new font size for the following text. The size is expressed as a positive integer. 
            			If a number is to follow this command in the header, it must be separated by a space.
            		</description>
            	</item>
            	<item>
            		<term>&amp;"&lt;FontName&gt;"</term>
            		<description>
            			Sets a new font for the following text. If the font name is not recognized, the default 
            			font will be used.
            		</description>
            	</item>
            	<item>
            		<term>&amp;"&lt;FontName&gt;,&lt;FontStyle&gt;"</term>
            		<description>
            			Sets the new font and font style for the following text. The font style is usually "Regular", 
            			"Bold", "Italic", or "Bold Italic", but	can be other styles depending on the font. The 
            			available font styles can be seen in the font dialog when a font is selected.
            		</description>
            	</item>
            </list>
            </p>
            <p class="body">
            The header or footer string could look like this: &amp;L&amp;"Arial,Bold"&amp;D&amp;CPage &amp;P of 
            &amp;N on &amp;A&amp;R&amp;14&amp;F.
            </p>
            </remarks>
            <value>The footer for each page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.Header"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.FooterMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.FooterMargin">
            <summary>
            Gets or sets the footer margin for each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid margin range of 0 and 100.
            </exception>
            <value>The footer margin for each printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.Footer"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.BottomMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.HeaderMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.LeftMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.RightMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.TopMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.Header">
            <summary>
            Gets or sets the header for each page of the printed worksheet.
            </summary>
            <remarks>
            <p class="body">
            The '&amp;' character in the header and footer is a special character. Depending on what is after it, 
            the formatting of the text can be controlled or dynamic text can be inserted. Below is a list of 
            the available commands:
            <list type="table">
            	<listheader>
            		<term>Section commands</term>
            	</listheader>
            	<item>
            		<term>&amp;L</term>
            		<description>
            			The following text will appear in the left section. The formatting of new sections is 
            			always the default formatting, regardless of the formatting of the previous section.
            		</description>
            	</item>
            	<item>
            		<term>&amp;C</term>
            		<description>
            			The following text will appear in the center section. The formatting of new sections is 
            			always the default formatting, regardless of the formatting of the previous section.
            		</description>
            	</item>
            	<item>
            		<term>&amp;R</term>
            		<description>
            			The following text will appear in the right section. The formatting of new sections is 
            			always the default formatting, regardless of the formatting of the previous section.
            		</description>
            	</item>
            </list>
            <list type="table">
            	<listheader>
            		<term>Replacement commands</term>
            	</listheader>
            	<item>
            		<term>&amp;&amp;</term>
            		<description>Insert the '&amp;' character.</description>
            	</item>
            	<item>
            		<term>&amp;A</term>
            		<description>Insert the current worksheet name.</description>
            	</item>
            	<item>
            		<term>&amp;D</term>
            		<description>Insert the current date.</description>
            	</item>
            	<item>
            		<term>&amp;F</term>
            		<description>Insert the current file name.</description>
            	</item>
            	<item>
            		<term>&amp;G</term>
            		<description>Insert an image (<b>Note:</b> This command is currently not supported).</description>
            	</item>
            	<item>
            		<term>&amp;N</term>
            		<description>Insert the  number of pages the worksheet will need to print.</description>
            	</item>
            	<item>
            		<term>&amp;P</term>
            		<description>Insert the current page number.</description>
            	</item>
            	<item>
            		<term>&amp;T</term>
            		<description>Insert the current time.</description>
            	</item>
            	<item>
            		<term>&amp;Z</term>
            		<description>Insert the current file path (without the file name).</description>
            	</item>
            </list>
            <list type="table">
            	<listheader>
            		<term>Formatting commands</term>
            	</listheader>
            	<item>
            		<term>&amp;B</term>
            		<description>Toggle bold.</description>
            	</item>
            	<item>
            		<term>&amp;E</term>
            		<description>Toggle double underlining.</description>
            	</item>
            	<item>
            		<term>&amp;I</term>
            		<description>Toggle italics.</description>
            	</item>
            	<item>
            		<term>&amp;S</term>
            		<description>Toggle strikethrough.</description>
            	</item>
            	<item>
            		<term>&amp;U</term>
            		<description>Toggle underlining.</description>
            	</item>
            	<item>
            		<term>&amp;X</term>
            		<description>Toggle superscript.</description>
            	</item>
            	<item>
            		<term>&amp;Y</term>
            		<description>Toggle subscript.</description>
            	</item>
            	<item>
            		<term>&amp;&lt;FontSize&gt;</term>
            		<description>
            			Sets a new font size for the following text. The size is expressed as a positive integer. 
            			If a number is to follow this command in the header, it must be separated by a space.
            		</description>
            	</item>
            	<item>
            		<term>&amp;"&lt;FontName&gt;"</term>
            		<description>
            			Sets a new font for the following text. If the font name is not recognized, the default 
            			font will be used.
            		</description>
            	</item>
            	<item>
            		<term>&amp;"&lt;FontName&gt;,&lt;FontStyle&gt;"</term>
            		<description>
            			Sets the new font and font style for the following text. The font style is usually "Regular", 
            			"Bold", "Italic", or "Bold Italic", but	can be other styles depending on the font. The 
            			available font styles can be seen in the font dialog when a font is selected.
            		</description>
            	</item>
            </list>
            </p>
            <p class="body">
            The header or footer string could look like this: &amp;L&amp;"Arial,Bold"&amp;D&amp;CPage &amp;P of 
            &amp;N on &amp;A&amp;R&amp;14&amp;F.
            </p>
            </remarks>
            <value>The header for each page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.Footer"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.HeaderMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.HeaderMargin">
            <summary>
            Gets or sets the header margin for each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid margin range of 0 and 100.
            </exception>
            <value>The header margin for each printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.Header"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.BottomMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.FooterMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.LeftMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.RightMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.TopMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.LeftMargin">
            <summary>
            Gets or sets the margin at the left of each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid margin range of 0 and 100.
            </exception>
            <value>The margin at the left of each printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.BottomMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.FooterMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.HeaderMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.RightMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.TopMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.MaxPagesHorizontally">
            <summary>
            Gets or sets the maximum number of pages allowed in the horizontal direction to print the worksheet.
            </summary>
            <remarks>
            <p class="body">
            A value of zero indicates no maximum is used in the horizontal direction. As many pages as needed will be used.
            </p>
            <p class="note">
            <B>Note:</B> For MaxPagesHorizontally and <see cref="P:Infragistics.Excel.PrintOptions.MaxPagesVertically"/> to affect the way the worksheet is printed,
            <see cref="P:Infragistics.Excel.PrintOptions.ScalingType"/> must be set to a value of FitToPages. However, if the the ScalingType is different 
            and these values aren't used, they will still be saved with the worksheet.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the valid range of 0 and 32767.
            </exception>
            <value>The maximum number of pages allowed in the horizontal direction to print the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.MaxPagesVertically"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.ScalingType"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.MaxPagesVertically">
            <summary>
            Gets or sets the maximum number of pages allowed in the vertical direction to print the worksheet.
            </summary>
            <remarks>
            <p class="body">
            A value of zero indicates no maximum is used in the vertical direction. As many pages as needed will be used.
            </p>
            <p class="note">
            <B>Note:</B> For <see cref="P:Infragistics.Excel.PrintOptions.MaxPagesHorizontally"/> and MaxPagesVertically to affect the way the worksheet is printed,
            <see cref="P:Infragistics.Excel.PrintOptions.ScalingType"/> must be set to a value of FitToPages. However, if the the ScalingType is different 
            and these values aren't used, they will still be saved with the worksheet.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the valid range of 0 and 32767.
            </exception>
            <value>The maximum number of pages allowed in the vertical direction to print the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.MaxPagesHorizontally"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.ScalingType"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.NumberOfCopies">
            <summary>
            Gets or sets the number of copies to print.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of 1 and 65535.
            </exception>
            <value>The number of copies to print.</value>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.Orientation">
            <summary>
            Gets or sets the orientation for each page of the printed worksheet.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Infragistics.Excel.Orientation"/> enumeration.
            </exception>
            <value>The orientation for each page of the printed worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.OrientationResolved">
            <summary>
            Returns the resolved orientation for each page of the printed worksheet.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PageOrder">
            <summary>
            Gets or sets the order in which to print pages for multiple page worksheets.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Infragistics.Excel.PageOrder"/> enumeration.
            </exception>
            <value>The order in which to print pages for multiple page worksheets.</value>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PageNumbering">
            <summary>
            Gets or sets the method with which pages are numbered.
            </summary>
            <remarks>
            <p class="body">
            If this is set to a value of UseStartPageNumber, the first page is numbered using the <see cref="P:Infragistics.Excel.PrintOptions.StartPageNumber"/>.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Infragistics.Excel.PageNumbering"/> enumeration.
            </exception>
            <value>The method with which pages are numbered.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.StartPageNumber"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PaperSize">
            <summary>
            Gets or sets the paper size for each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Infragistics.Excel.PaperSize"/> enumeration.
            </exception>
            <value>The paper size for each printed page of the worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PrintErrors">
            <summary>
            Gets or sets the way error values of cells are printed.
            </summary>
            <remarks>
            <p class="body">
            A cell can have an error value if its <see cref="P:Infragistics.Excel.WorksheetCell.Value"/> is set directly to
            an <see cref="T:Infragistics.Excel.ErrorValue"/> or if it is set to a <see cref="T:Infragistics.Excel.Formula"/> that evaluates to an
            error.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Infragistics.Excel.PrintErrors"/> enumeration.
            </exception>
            <value>The way error values of cells are printed.</value>
            <seealso cref="T:Infragistics.Excel.ErrorValue"/>
            <seealso cref="T:Infragistics.Excel.Formula"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PrintGridlines">
            <summary>
            Gets or sets the value which indicates whether to print the worksheet gridlines.
            </summary>
            <value>The value which indicates whether to print the worksheet gridlines.</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.ShowGridlines"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PrintInBlackAndWhite">
            <summary>
            Gets or sets the value indicating whether the worksheet should be printed in black and white.
            </summary>
            <value>The value indicating whether the worksheet should be printed in black and white.</value>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PrintNotes">
            <summary>
            Gets or sets the way cell comments are printed.
            </summary>
            <remarks>
            <p class="body">
            If this is set to a value of PrintAsDisplayed, the comments will only print if they are displayed on the worksheet.
            If comments are hidden but indicators are shown, neither the indicators nor the comments will print.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Infragistics.Excel.PrintNotes"/> enumeration.
            </exception>
            <value>The way cell notes are printed.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.Comment"/>
            <seealso cref="T:Infragistics.Excel.WorksheetCellComment"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PrintRowAndColumnHeaders">
            <summary>
            Gets or sets the value indicating whether to print row and column headers.
            </summary>
            <remarks>
            <p class="body">
            The row and column headers show the identifier of the row or column.
            </p>
            </remarks>
            <value>The value indicating whether to print row and column headers.</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.ShowRowAndColumnHeaders"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.Resolution">
            <summary>
            Gets or sets the horizontal print resolution in DPI.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the valid range of 0 and 65535.
            </exception>
            <value>The horizontal print resolution in DPI.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.VerticalResolution"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.RightMargin">
            <summary>
            Gets or sets the margin at the right of each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid margin range of 0 and 100.
            </exception>
            <value>The margin at the right of each printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.BottomMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.FooterMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.HeaderMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.LeftMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.TopMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.ScalingFactor">
            <summary>
            Gets or sets the scaling factor to use when printing the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The scaling factor is similar to magnifications in that is it stored as a percentage of the normal scaling. 
            A value of 100 indicates normal scaling whereas a value of 200 indicates the worksheet is scaled to twice its
            normal size.
            </p>
            <p class="note">
            <B>Note:</B> For ScalingFactor to affect the way the worksheet is printed, <see cref="P:Infragistics.Excel.PrintOptions.ScalingType"/> must be 
            set to a value of UseScalingFactor.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of 10 and 400.
            </exception>
            <value>The scaling factor to use when printing the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.ScalingType"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInNormalView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageBreakView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageLayoutView"/>
            <seealso cref="P:Infragistics.Excel.CustomViewDisplayOptions.MagnificationInCurrentView"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.ScalingType">
            <summary>
            Gets or sets the method for scaling the worksheet when it is printed.
            </summary>
            <remarks>
            <p class="body">
            If this is set to a value of UseScalingFactor, <see cref="P:Infragistics.Excel.PrintOptions.ScalingFactor"/> is used to uniformly scale
            the worksheet on the printed pages.
            </p>
            <p class="body">
            If this is set to a value of FitToPages, <see cref="P:Infragistics.Excel.PrintOptions.MaxPagesHorizontally"/> and <see cref="P:Infragistics.Excel.PrintOptions.MaxPagesVertically"/>
            are used to set the maximum number of pages to fit the printed worksheet into in both directions.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Infragistics.Excel.ScalingType"/> enumeration.
            </exception>
            <value>The method for scaling the worksheet when it is printed.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.MaxPagesHorizontally"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.MaxPagesVertically"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.ScalingFactor"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.StartPageNumber">
            <summary>
            Gets or sets the page number for the first printed page of the worksheet.
            </summary>
            <remarks>
            <p class="body">
            For this value to be used, <see cref="P:Infragistics.Excel.PrintOptions.PageNumbering"/> must be set to a value of UseStartPageNumber.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of -32765 and 32767.
            </exception>
            <value>The page number for the first printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.PageNumbering"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.TopMargin">
            <summary>
            Gets or sets the margin at the top of each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid margin range of 0 and 100.
            </exception>
            <value>The margin at the top of each printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.BottomMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.FooterMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.HeaderMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.LeftMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.RightMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.VerticalResolution">
            <summary>
            Gets or sets the vertical print resolution in DPI.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the valid range of 0 and 65535.
            </exception>
            <value>The vertical print resolution in DPI.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.Resolution"/>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.String">
            <summary>System.String</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_CellRef">
            <summary>Represents the ST_CellRef simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_Ref">
            <summary>Represents the ST_Ref simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_Sqref">
            <summary>Represents the ST_Sqref simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_Xstring">
            <summary>Represents the ST_SheetState simple XML type, which is an xml-escaped string.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_RelationshipID">
            <summary>Represents the ST_RelationshipID simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.Short">
            <summary>System.Int16</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.Integer">
            <summary>System.Int32</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.Long">
            <summary>System.Int64</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.Int16">
            <summary>System.Int16</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.Int32">
            <summary>System.Int32</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.Int64">
            <summary>System.Int64</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.Boolean">
            <summary>System.Boolean</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.DateTime">
            <summary>System.DateTime</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.Single">
            <summary>System.Single</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.Float">
            <summary>System.Single</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.Double">
            <summary>System.Double</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.UShort">
            <summary>System.UInt16</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.UInt16">
            <summary>System.UInt16</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.UInt">
            <summary>System.UInt32</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.UInt32">
            <summary>System.UInt32</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ULong">
            <summary>System.UInt64</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.UInt64">
            <summary>System.UInt64</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.Byte">
            <summary>System.Byte</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.SByte">
            <summary>System.SByte</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.Decimal">
            <summary>System.Decimal</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.Object">
            <summary>System.Object</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_VectorBaseType">
            <summary>Represents the ST_VectorBaseType simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_Visibility">
            <summary>Represents the ST_Visibility simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_SheetState">
            <summary>Represents the ST_SheetState simple XML type</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_CalcMode">
            <summary>Represents the ST_CalcMode simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_RefMode">
            <summary>Represents the ST_RefMode simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_FontScheme">
            <summary>Represents the ST_FontScheme simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_UnderlineValues">
            <summary>Represents the ST_UnderlineValues simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_VerticalAlignRun">
            <summary>Represents the ST_VerticalAlignRun simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_BorderStyle">
            <summary>Represents the ST_BorderStyle simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_SheetViewType">
            <summary>Represents the ST_SheetViewType simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_Pane">
            <summary>Represents the ST_Pane simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_GradientType">
            <summary>Represents the ST_GradientType simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_PatternType">
            <summary>Represents the ST_PatternType simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_Objects">
            <summary>Represents the ST_Objects simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_Links">
            <summary>Represents the ST_Links simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_CellType">
            <summary>Represents the ST_CellType simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_HorizontalAlignment">
            <summary>Represents the ST_HorizontalAlignment simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_VerticalAlignment">
            <summary>Represents the ST_VerticalAlignment simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_Orientation">
            <summary>Represents the ST_Orientation simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_PageOrder">
            <summary>Represents the ST_PageOrder simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_CellComments">
            <summary>Represents the ST_CellComments simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_PrintError">
            <summary>Represents the ST_PrintError simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_PaneState">
            <summary>Represents the ST_PaneState simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_Guid">
            <summary>Represents the ST_Guid simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_Comments">
            <summary>Represents the ST_Comments simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_CellFormulaType">
            <summary>Represents the ST_Comments simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_UnsignedIntHex">
            <summary>Represents the ST_UnsignedIntHex simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_SystemColorVal">
            <summary>Represents the ST_SystemColorVal simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_EditAs">
            <summary>Represents the ST_EditAs simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_DrawingElementId">
            <summary>Represents the ST_DrawingElementId simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_Coordinate">
            <summary>Represents the ST_Coordinate simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.DataType.ST_PositiveCoordinate">
            <summary>Represents the ST_PositiveCoordinate simple XML type.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_Visibility.visible">
            <summary>
            WorksheetVisibility.Visible
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_Visibility.hidden">
            <summary>
            WorksheetVisibility.Hidden
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_Visibility.veryHidden">
            <summary>
            WorksheetVisibility.StrongHidden
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_CalcMode.auto">
            <summary>
            CalculationMode.Automatic
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_CalcMode.autoNoTable">
            <summary>
            CalculationMode.AutomaticExceptForDataTables
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_CalcMode.manual">
            <summary>
            CalculationMode.Manual
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_RefMode.A1">
            <summary>
            CellReferenceMode.A1
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_RefMode.R1C1">
            <summary>
            CellReferenceMode.R1C1
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_FontScheme.major">
            <summary>
            This font is the major font for this theme
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_FontScheme.minor">
            <summary>
            This font is the minor font for this theme
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_FontScheme.none">
            <summary>
            This font is not a theme font
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_UnderlineValues._double">
            <summary>
            FontUnderlineStyle.Double
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_UnderlineValues.doubleAccounting">
            <summary>
            FontUnderlineStyle.DoubleAccounting
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_UnderlineValues.none">
            <summary>
            FontUnderlineStyle.None
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_UnderlineValues._single">
            <summary>
            FontUnderlineStyle.Single
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_UnderlineValues.singleAccounting">
            <summary>
            FontUnderlineStyle.SingleAccounting
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_VerticalAlignRun.baseline">
            <summary>
            FontSuperscriptSubscriptStyle.None
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_VerticalAlignRun.subscript">
            <summary>
            FontSuperscriptSubscriptStyle.Subscript
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_VerticalAlignRun.superscript">
            <summary>
            FontSuperscriptSubscriptStyle.Superscript
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle.dashdot">
            <summary>
            CellBorderLineStyle.DashDot
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle.dashdotdot">
            <summary>
            CellBorderLineStyle.DashDotDot
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle.dashed">
            <summary>
            CellBorderLineStyle.Dashed
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle.dotted">
            <summary>
            CellBorderLineStyle.Dotted
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle._double">
            <summary>
            CellBorderLineStyle.Double
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle.hair">
            <summary>
            CellBorderLineStyle.Hair
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle.medium">
            <summary>
            CellBorderLineStyle.Medium
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle.mediumDashDot">
            <summary>
            CellBorderLineStyle.MediumDashDot
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle.mediumDashDotDot">
            <summary>
            CellBorderLineStyle.MediumDashDotDot
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle.mediumDashed">
            <summary>
            CellBorderLineStyle.MediumDashed
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle.none">
            <summary>
            CellBorderLineStyle.None
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle.slantedDashDot">
            <summary>
            CellBorderLineStyle.SlantedDashDot
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle.thick">
            <summary>
            CellBorderLineStyle.Thick
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_BorderStyle.thin">
            <summary>
            CellBorderLineStyle.Thin
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_GradientType.linear">
            <summary>
            the transition from color to the next is along a line
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_GradientType.path">
            <summary>
            the boundary of the transition from one color to the next is a rectangle defined by the 
            top, bottom, left and right attributes on the gradientFill
            </summary>
        </member>
        <member name="T:Infragistics.Excel.Serialization.Excel2007.ST_PatternType">
            <summary>
            Infragistics.Excel.FillPatternStyle
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.none">
            <summary>
            FillPatternStyle.None
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.solid">
            <summary>
            FillPatternStyle.Solid
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.mediumGray">
            <summary>
            FillPatternStyle.Gray50percent
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.darkGray">
            <summary>
            FillPatternStyle.Gray75percent
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.lightGray">
            <summary>
            FillPatternStyle.Gray25percent
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.darkHorizontal">
            <summary>
            FillPatternStyle.HorizontalStripe
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.darkVertical">
            <summary>
            FillPatternStyle.VerticalStripe
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.darkDown">
            <summary>
            FillPatternStyle.DiagonalStripe
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.darkUp">
            <summary>
            FillPatternStyle.ReverseDiagonalStripe
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.darkGrid">
            <summary>
            FillPatternStyle.DiagonalCrosshatch
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.darkTrellis">
            <summary>
            FillPatternStyle.ThickDiagonalCrosshatch
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.lightHorizontal">
            <summary>
            FillPatternStyle.ThinHorizontalStripe
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.lightVertical">
            <summary>
            FillPatternStyle.ThinVerticalStripe
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.lightDown">
            <summary>
            FillPatternStyle.ThinDiagonalStripe
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.lightUp">
            <summary>
            FillPatternStyle.ThinReverseDiagonalStripe
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.lightGrid">
            <summary>
            FillPatternStyle.ThinHorizontalCrosshatch
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.lightTrellis">
            <summary>
            FillPatternStyle.ThinDiagonalCrosshatch
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.gray125">
            <summary>
            FillPatternStyle.Gray12percent
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_PatternType.gray0625">
            <summary>
            FillPatternStyle.Gray6percent
            </summary>
        </member>
        <member name="T:Infragistics.Excel.Serialization.Excel2007.ST_HorizontalAlignment">
            <summary>
            Infragistics.Excel.HorizontalCellAlignment
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_HorizontalAlignment.center">
            <summary>
            HorizontalCellAlignment.Center
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_HorizontalAlignment.centerContinuous">
            <summary>
            HorizontalCellAlignment.CenterAcrossSelection
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_HorizontalAlignment.fill">
            <summary>
            HorizontalCellAlignment.Fill
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_HorizontalAlignment.general">
            <summary>
            HorizontalCellAlignment.General
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_HorizontalAlignment.justify">
            <summary>
            HorizontalCellAlignment.Justify
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_HorizontalAlignment.left">
            <summary>
            HorizontalCellAlignment.Left
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_HorizontalAlignment.right">
            <summary>
            HorizontalCellAlignment.Right
            </summary>
        </member>
        <member name="T:Infragistics.Excel.Serialization.Excel2007.ST_VerticalAlignment">
            <summary>
            Infragistics.Excel.VerticalCellAlignment
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_VerticalAlignment.bottom">
            <summary>
            VerticalCellAlignment.Bottom
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_VerticalAlignment.center">
            <summary>
            VerticalCellAlignment.Center
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_VerticalAlignment.distributed">
            <summary>
            VerticalCellAlignment.Distributed
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_VerticalAlignment.justify">
            <summary>
            VerticalCellAlignment.Justify
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.ST_VerticalAlignment.top">
            <summary>
            VerticalCellAlignment.Top
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.HandledAttributeIdentifier.None">
            <summary>No value</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.HandledAttributeIdentifier.CNvPrElement_Id">
            <summary>WorksheetShape.ShapeId</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.HandledAttributeIdentifier.CNvPrElement_Hidden">
            <summary>WorksheetShape.Visible</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.HandledAttributeIdentifier.ExtElement_Cx">
            <summary>WorksheetShape.GetBoundsInTwips.Width</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.HandledAttributeIdentifier.ExtElement_Cy">
            <summary>WorksheetShape.GetBoundsInTwips.Height</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.HandledAttributeIdentifier.OffElement_X">
            <summary>WorksheetShape.GetBoundsInTwips.Left</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.HandledAttributeIdentifier.OffElement_Y">
            <summary>WorksheetShape.GetBoundsInTwips.Top</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.HandledAttributeIdentifier.ChOffElement_X">
            <summary>Group-specific; represents the horizontal component of the offset for the first child. Always the same as Off.x.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.HandledAttributeIdentifier.ChOffElement_Y">
            <summary>Group-specific; represents the vertical component of the offset for the first child. Always the same as Off.y</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.HandledAttributeIdentifier.ChExtElement_Cx">
            <summary>Group-specific; represents the width of the child extent area. Always the same as Ext.cx.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.HandledAttributeIdentifier.ChExtElement_Cy">
            <summary>Group-specific; represents the height of the child extent area. Always the same as Ext.cy.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.HandledAttributeIdentifier.BlipElement_Embed">
            <summary>WorksheetImage.Image</summary>
        </member>
        <member name="T:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.CouldNotGetPackagePart">
            <summary>
            The IPackage.GetPart method threw an exception.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.Conformant">
            <summary>
            The IPackagePart conforms fully to the ECMA TC45 Open Packaging Conventions.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.NameMissing">
            <summary>
            The package implementer shall require a part name. [M1.1]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.ContentTypeMissing">
            <summary>
            The package implementer shall require a content type and
            the format designer shall specify the content type. [M1.2], [M1.13]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.SegmentEmpty">
            <summary>
            A part name shall not have empty segments. [M1.3]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.NameDoesNotStartWithForwardSlash">
            <summary>
            A part name shall start with a forward slash (“/”) character. [M1.4]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.NameEndsWithForwardSlash">
            <summary>
            A part name shall not have a forward slash as the last character. [M1.5]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.SegmentHasNonPCharCharacters">
            <summary>
            A segment shall not hold any characters other than pchar characters. [M1.6]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.SegmentHasPercentEncodedSlashCharacters">
            <summary>
            A segment shall not contain percent-encoded forward slash (“/”),
            or backward slash (“\”) characters. [M1.7]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.SegmentHasPercentEncodedUnreservedCharacters">
            <summary>
            A segment shall not contain percent-encoded unreserved characters. [M1.8]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.SegmentEndsWithDotCharacter">
            <summary>
            A segment shall not end with a dot (“.”) character. [M1.9]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.SegmentMissingNonDotCharacter">
            <summary>
            A segment shall include at least one non-dot character. [M1.10]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.NameDerivesFromExistingPartName">
            <summary>
            A package implementer shall neither create nor recognize
            a part with a part name derived from another part name by
            appending segments to it. [M1.11]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.DuplicateName">
            <summary>
            Part name equivalence is determined by comparing part names as
            case-insensitive ASCII strings. Packages shall not contain equivalent
            part names and package implementers shall neither create nor recognize
            packages with equivalent part names. [M1.12]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.ContentTypeHasInvalidSyntax">
            <summary>
            IPackage implementers shall only create and only recognize parts with a content type;
            format designers shall specify a content type for each part included in the format.
            Content types for package parts shall fit the definition and syntax for media types
            as specified in RFC 2616, §3.7. [M1.13]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.ContentTypeHasInvalidWhitespace">
            <summary>
            Content types shall not use linear white space either between the type and subtype or
            between an attribute and its value. Content types also shall not have leading or
            trailing white spaces. IPackage implementers shall create only such content types
            and shall require such content types when retrieving a part from a package;
            format designers shall specify only such content types for inclusion in the format. [M1.14]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.ContentTypeHasComments">
            <summary>
            The package implementer shall require a content type that does not include comments
            and the format designer shall specify such a content type. [M1.15]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.ContentTypeHasParameters">
            <summary>
            IPackage implementers and format designers shall not create content types
            with parameters for the package specific parts defined in this Open Packaging
            specification and shall treat the presence of parameters in these content types
            as an error. [M1.22]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.GrowthHintChanged">
            <summary>
            If the package implementer specifies a growth hint, it is set when a
            part is created and the package implementer shall not change the growth
            hint after the part has been created. [M1.16]
            </summary>
            <remarks><p class="body">The PackageConformanceManager does not verify this convention.</p></remarks>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.XmlEncodingUnsupported">
            <summary>
            XML content shall be encoded using either UTF-8 or UTF-16.
            If any part includes an encoding declaration, as defined in
            §4.3.3 of the XML 1.0 specification, that declaration shall
            not name any encoding other than UTF-8 or UTF-16. IPackage
            implementers shall enforce this requirement upon creation
            and retrieval of the XML content. [M1.17]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.XmlContentInvalidForSchema">
            <summary>
            XML content shall be valid against the corresponding XSD schema defined
            in this Open Packaging specification. In particular, the XML content shall
            not contain elements or attributes drawn from namespaces that are not explicitly
            defined in the corresponding XSD unless the XSD allows elements or attributes drawn
            from any namespace to be present in particular locations in the XML markup. IPackage
            implementers  shall enforce this requirement upon creation and retrieval of the
            XML content. [M1.20]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.XmlContentDrawsOnUndefinedNamespace">
            <summary>
            XML content shall not contain elements or attributes drawn from “xml” or “xsi”
            namespaces unless they are explicitly defined in the XSD schema or by other means
            described in this Open Packaging specification. IPackage implementers shall enforce
            this requirement upon creation and retrieval of the XML content. [M1.21]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.RelationshipTargetsOtherRelationship">
            <summary>
            The Relationships part shall not have relationships to any other part. IPackage
            implementers shall enforce this requirement upon the attempt to create such a
            relationship and shall treat any such relationship as invalid. [M1.25]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.RelationshipIdInvalid">
            <summary>
            The package implementer shall require that every Relationship element
            has an Id attribute, the value of which is unique within the Relationships
            part, and that the Id type is xsd:ID, the value of which conforms to the naming
            restrictions for xsd:IDas described in the W3C Recommendation “XML Schema Part 2:
            Datatypes.” [M1.26]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.RelationshipTypeInvalid">
            <summary>
            The package implementer shall require the Type attribute to be a URI
            that defines the role of the relationship and the format designer shall
            specify such a Type. [M1.27]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.RelationshipTargetInvalid">
            <summary>
            The package implementer shall require the Target attribute to be a URI
            reference pointing to a target resource. The URI reference shall be a URI
            or a relative reference. [M1.28]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.RelationshipTargetNotRelativeReference">
            <summary>
            When set to Internal, the Target attribute shall be a relative reference and
            that reference is interpreted relative to the “parent” part. For package
            relationships, the package implementer shallresolve relative references in
            the Target attribute against the pack URI that identifies the entire package
            resource. [M1.29]
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason.RelationshipNameInvalid">
            <summary>
            The package implementer shall name relationship parts according to the special
            relationships part naming convention and require that parts with names that
            conform to this naming convention have the content type for a Relationships
            part. [M1.30]
            </summary>
        </member>
        <member name="T:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceExceptionReason">
            <summary>
            Constants which define the reason that a <see cref="T:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceException">OpenPackagingNonConformanceException</see> was thrown.
            </summary>
            <seealso cref="T:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceException">OpenPackagingNonConformanceException class</seealso>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceExceptionReason.None">
            <summary>
            Undefined; used for variable initialization.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceExceptionReason.CorePropertiesRelationshipAlreadyProcessed">
            <summary>
            The IPackagePart in a IPackage is determined to be the core properties relationship
            for the package, after one has already been processed.
            </summary>
            <remarks>
            <p class="body">
            As stipulated in Annex H, Part 4 of
            'Office Open XML Part 2 - Open Packaging Conventions':<br></br>
            
            "The format designer shall specify and the format producer shall create at most
            <b>one</b> core properties relationship for a package. A format consumer shall
            consider more than one core properties relationship for a package to be an error."
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceExceptionReason.UsesMarkupCompatibilityNamespace">
            <summary>
            The IPackagePart in a IPackage is determined to be the core properties 
            relationship for the package, and that IPackagePart is found to contain
            references to the Markup Compatibility namespace.
            </summary>
            <remarks>
            <p class="body">
            As stipulated in Annex H, Part 4 of
            'Office Open XML Part 2 - Open Packaging Conventions':<br></br>
            
            "The format designer shall not specify and the format producer shall not
            create Core Properties that use the Markup Compatibility namespace as defined
            in Annex F, “Standard Namespaces and Content Types”. A format consumer shall
            consider the use of the Markup Compatibility namespace to be an error."
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceExceptionReason.ContainsDublinCoreRefinements">
            <summary>
            The IPackagePart in a IPackage is determined to be  the core properties
            relationship for the package, and that IPackagePart is found to contain
            refinements to Dublin Core elements other than the 'dcterms:created' and
            'dcterms:modified' elements.
            </summary>
            <remarks>
            <p class="body">
            As stipulated in Annex H, Part 4 of
            'Office Open XML Part 2 - Open Packaging Conventions':<br></br>
            
            "Producers shall not create a document element that contains refinements to
            the Dublin Core elements, except for the two specified in the schema: dcterms:created
            and dcterms:modified. Consumers shall consider a document element that violates this
            constraint to be an error."
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceExceptionReason.ContainsXmlLanguageAttribute">
            <summary>
            The IPackagePart in a IPackage is determined to be  the core properties
            relationship for the package, and that IPackagePart is found to contain
            an element which contains the xml:lang attribute.
            </summary>
            <remarks>
            <p class="body">
            As stipulated in Annex H, Part 4 of
            'Office Open XML Part 2 - Open Packaging Conventions':<br></br>
            
            "Producers shall not create a document element that contains the xml:lang
            attribute. Consumers shall consider a document element that violates this
            constraint to be an error."
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceExceptionReason.XsiTypeAttributeInvalid">
            <summary>
            The IPackagePart in a IPackage is determined to be  the core properties
            relationship for the package, and that IPackagePart is found to contain
            an element which contains the xsi:type attribute, with the exception
            of the 'dcterms:created' and 'dcterms:modified' elements, for which the
            attribute is required, and is expected to hold the value 'dcterms:W3CDTF'.
            </summary>
            <remarks>
            <p class="body">
            As stipulated in Annex H, Part 4 of
            'Office Open XML Part 2 - Open Packaging Conventions':<br></br>
            
            "Producers shall not create a document element that contains the xsi:type
            attribute, except for a 'dcterms:created' or 'dcterms:modified' element where
            the xsi:type attribute shall be present and shall hold the value dcterms:W3CDTF,
            where dcterms is the namespace prefix of the Dublin Core namespace. Consumers
            shall consider a document element that violates this constraint to be an error."
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceExceptionReason.XmlContainsDocumentTypeDefinition">
            <summary>
            A loaded IPackagePart is found to contain a DTD (Document Type Definition) declaration.
            </summary>
            <remarks>
            <p class="body">
            As stipulated in section 8.1.4, paragraph 2 of
            'Office Open XML Part 2 - Open Packaging Conventions':<br></br>
            
            "The XML 1.0 specification allows for the usage of Document Type Definitions (DTDs),
            which enable Denial of Service attacks, typically through the use of an internal entity
            expansion technique. As mitigation for this potential threat, DTD declarations shall not
            be used in the XML markup defined in this Open Packaging specification. IPackage implementers
            shall enforce this requirement upon creation and retrieval of the XML content and shall treat
            the presence of DTD declarations as an error."
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceExceptionReason.DuplicatePartName">
            <summary>
            A loaded IPackagePart has the same name as an existing one.
            </summary>
            <remarks>
            <p class="body">
            As stipulated in section 8.1.1.2 of
            'Office Open XML Part 2 - Open Packaging Conventions':<br></br>
            
            "Part name equivalence is determined by comparing part names as case-insensitive
            ASCII strings. Packages shall not contain equivalent part names and package
            implementers shall neither create nor recognize packages with equivalent part
            names."
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.Serialization.WorkbookSerializationManager.WriteWorkbookGlobals(System.Boolean)">
            <summary>
            Writes the global records that define the workbook data (not the worksheets).
            </summary>
            <param name="hasShapes">True if any workshete in the workbookhas shapes; False otherwise</param>
        </member>
        <member name="T:Infragistics.Excel.Serialization.Excel2007.FillInfo">
            <summary>
            Class used to represent the Fill element
            </summary>
        </member>
        <member name="T:Infragistics.Excel.Serialization.Excel2007.FormatInfo">
            <summary>
            This class is used the represent the Format (xf) elements
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedContentTypes.DrawingsPart.SpreadsheetDrawingNamespace">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedContentTypes.DrawingsPart.SpreadsheetDrawingNamespacePrefix">
            <summary>xdr</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedContentTypes.DrawingsPart.MainNamespace">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/main</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedContentTypes.DrawingsPart.MainNamespacePrefix">
            <summary>a</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XmlElementBase.GuidRegexPattern">
            <summary>{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}}</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XmlElementBase.DrawingMLNamespace">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/main</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.AbsoluteAnchorElement.QualifiedName">
            <summary>
            http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/absoluteAnchor
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.IConsumedElementValueProvider.ConsumedValues">
            <summary>
            Returns a dictionary which contains the name of an attribute that
            needs to be handled.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.BlipElement.LocalName">
            <summary>blip</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.BlipElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/blip</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.BlipElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.BlipElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.BlipElement.Infragistics#Excel#Serialization#Excel2007#IConsumedElementValueProvider#ConsumedValues">
            <summary>
            cNvPr.id = Infragistics.Excel.WorksheetShape.ShapeId
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.BlipFillElement.LocalName">
            <summary>blipFill</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.BlipFillElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/blipFill</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.BlipFillElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.BlipFillElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ExtentElementBase.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ExtentElementBase.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ExtentElementBase.Infragistics#Excel#Serialization#Excel2007#IConsumedElementValueProvider#ConsumedValues">
            <summary>
            ext.cx, ext.cy = Infragistics.Excel.WorksheetShape.GetBoundsInTwips
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ChExtElement.LocalName">
            <summary>chExt</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ChExtElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/main/chExt</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ChExtElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.OffsetElementBase.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.OffsetElementBase.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.OffsetElementBase.Infragistics#Excel#Serialization#Excel2007#IConsumedElementValueProvider#ConsumedValues">
            <summary>
            off.x, off.y = Infragistics.Excel.WorksheetShape.GetBoundsInTwips
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ChOffElement.LocalName">
            <summary>off</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ChOffElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/main/chOff</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ChOffElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ClientDataElement.LocalName">
            <summary>clientData</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ClientDataElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/clientData</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ClientDataElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ClientDataElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvCxnSpPrElement.LocalName">
            <summary>cNvCxnSpPr</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvCxnSpPrElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/cNvCxnSpPr</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvCxnSpPrElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvCxnSpPrElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvGrpSpPrElement.LocalName">
            <summary>cNvGrpSpPr</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvGrpSpPrElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/cNvGrpSpPr</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvGrpSpPrElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvGrpSpPrElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvPicPrElement.LocalName">
            <summary>cNvPicPr</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvPicPrElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/cNvPicPr</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvPicPrElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvPicPrElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvPrElement.LocalName">
            <summary>cNvPr</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvPrElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/cNvPr</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvPrElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvPrElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CNvPrElement.Infragistics#Excel#Serialization#Excel2007#IConsumedElementValueProvider#ConsumedValues">
            <summary>
            cNvPr.id = Infragistics.Excel.WorksheetShape.ShapeId
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ColElement.QualifiedName">
            <summary>
            http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/col
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ColOffElement.QualifiedName">
            <summary>
            http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/colOff
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CxnSpElement.LocalName">
            <summary>cxnSp</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CxnSpElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/cxnSp</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CxnSpElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CxnSpElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CxnSpLocksElement.LocalName">
            <summary>cxnSpLocks</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CxnSpLocksElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/cxnSpLocks</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CxnSpLocksElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.CxnSpLocksElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.DrawingMLRowElement.QualifiedName">
            <summary>
            http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/row
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.EndCxnElement.LocalName">
            <summary>endCxn</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.EndCxnElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/endCxn</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.EndCxnElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.EndCxnElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ExtElement.LocalName">
            <summary>ext</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ExtElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/main/ext</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ExtElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.PicLocksElement.LocalName">
            <summary>picLocks</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.PicLocksElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/main/picLocks</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.PicLocksElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.PicLocksElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.PrstGeomElement.LocalName">
            <summary>prstGeom</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.PrstGeomElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/main/prstGeom</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.PrstGeomElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.PrstGeomElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.RElement.LocalName">
            <summary>r</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.RElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/main/r</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.RElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.RElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.RPrElement.LocalName">
            <summary>rPr</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.RPrElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/main/rPr</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.RPrElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.RPrElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.SolidFillElement.LocalName">
            <summary>solidFill</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.SolidFillElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/main/solidFill</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.SolidFillElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.SolidFillElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.SpElement.LocalName">
            <summary>sp</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.SpElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/sp</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.SpElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.SpElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.SpPrElement.LocalName">
            <summary>spPr</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.SpPrElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/spPr</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.SpPrElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.SpPrElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.TElement.LocalName">
            <summary>t</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.TElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/main/t</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.TElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.TElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.TxBodyElement.LocalName">
            <summary>txBody</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.TxBodyElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/txBody</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.TxBodyElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.TxBodyElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.FromElement.QualifiedName">
            <summary>
            http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/from
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.GraphicFrameElement.LocalName">
            <summary>graphicFrame</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.GraphicFrameElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/graphicFrame</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.GraphicFrameElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.GraphicFrameElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.GrpSpElement.QualifiedName">
            <summary>
            http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/col
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.GrpSpLocksElement.LocalName">
            <summary>grpSpLocks</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.GrpSpLocksElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/grpSpLocks</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.GrpSpLocksElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.GrpSpLocksElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.GrpSpPrElement.LocalName">
            <summary>grpSpPr</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.GrpSpPrElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/grpSpPr</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.GrpSpPrElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.GrpSpPrElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.NvCxnSpElement.LocalName">
            <summary>nvCxnSp</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.NvCxnSpElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/nvCxnSp</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.NvCxnSpElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.NvCxnSpElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.NvGrpSpPrElement.QualifiedName">
            <summary>
            http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/col
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.NvPicPrElement.LocalName">
            <summary>nvPicPr</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.NvPicPrElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/nvPicPr</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.NvPicPrElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.NvPicPrElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.OffElement.LocalName">
            <summary>off</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.OffElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/main/off</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.OffElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.OneCellAnchorElement.QualifiedName">
            <summary>
            http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/oneCellAnchor
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.PicElement.LocalName">
            <summary>pic</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.PicElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/pic</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.PicElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.PicElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.RowOffElement.QualifiedName">
            <summary>
            http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/row
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.StCxnElement.LocalName">
            <summary>stCxn</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.StCxnElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/stCxn</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.StCxnElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.StCxnElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.ToElement.QualifiedName">
            <summary>
            http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/to
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.TwoCellAnchorElement.QualifiedName">
            <summary>
            http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/twoCellAnchor
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.WsDrElement.QualifiedName">
            <summary>
            http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing/wsDr
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.XfrmElement.LocalName">
            <summary>xfrm</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.XfrmElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/drawingml/2006/main/xfrm</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.XfrmElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.SharedElements.Drawing.XfrmElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="T:Infragistics.Excel.Serialization.Excel2007.StyleInfo">
            <summary>
            This class is used the represent the ceell style elements
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.CellRef.FromString(System.String)">
            <summary>
            Returns a CellRef instance from the specified string.
            </summary>
            <param name="value">A string implied to be conformant with the ST_CellRef simple XML data type.</param>
            <returns>A CellRef instance or null if none could be parsed.</returns>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.CellRef.ToString">
            <summary>
            Returns the absolute A1 representation of this instance.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.XLSXElementBase.ElementName">
            <summary>
            Returns the name of this <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.XLSXElementBase"/> instance.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.AlignmentElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.AuthorElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.AuthorsElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.ColorElement.SaveColorElement(Infragistics.Excel.Serialization.Excel2007.ColorInfo,Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>
            Handles the writing of the Color attributes based on the provided ColorInfo object
            </summary>
            <param name="colorInfo">The ColorInfo object for the owning element (ColorElement, BgColorElement, FgColorElement)</param>
            <param name="manager">The owning Excel2007WorkbookSerializationManager</param>
            <param name="element">The owning XML element</param>
            <param name="value">The value parameter from the Save() method, passed in case its needed in the future</param>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.ColorElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.BgColorElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.BoldElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.BookViewsElement.LocalName">
            <summary>
            "bookViews"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.BookViewsElement.QualifiedName">
            <summary>
            "http://schemas.openxmlformats.org/spreadsheetml/2006/main/bookViews"
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.BookViewsElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.BorderElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.BordersElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.BottomElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CalculationPropertiesElement.LocalName">
            <summary>
            "calcPr"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CalculationPropertiesElement.QualifiedName">
            <summary>
            "http://schemas.openxmlformats.org/spreadsheetml/2006/main/calcPr"
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CalculationPropertiesElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CellElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CellStyleElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CellStylesElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CellStyleXfsElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CellXfsElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.ColorsElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CellValueElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CommentElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CommentListElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CommentsElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CommentTextElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomSheetViewElement.LocalName">
            <summary>customSheetView</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomSheetViewElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/spreadsheetml/2006/main/customSheetView</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomSheetViewElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomSheetViewElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomSheetViewsElement.LocalName">
            <summary>customSheetViews</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomSheetViewsElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/spreadsheetml/2006/main/customSheetViews</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomSheetViewsElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomSheetViewsElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomWorkbookViewElement.LocalName">
            <summary>customWorkbookView</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomWorkbookViewElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/spreadsheetml/2006/main/customWorkbookView</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomWorkbookViewElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomWorkbookViewElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomWorkbookViewsElement.LocalName">
            <summary>customWorkbookViews</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomWorkbookViewsElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/spreadsheetml/2006/main/customWorkbookViews</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomWorkbookViewsElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.CustomWorkbookViewsElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.DataValidationsElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.DefinedNameElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.DiagonalElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.DrawingElement.LocalName">
            <summary>drawing</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.DrawingElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/spreadsheetml/2006/main/drawing</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.DrawingElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.DrawingElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.DxfElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.DxfsElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.ExternalCellElement.LocalName">
            <summary>cell</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.ExternalCellElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/spreadsheetml/2006/main/cell</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.ExternalCellElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.ExternalCellElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.FamilyElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.FgColorElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.FileVersionElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.FillElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.FillsElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.FontNameElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.FontSizeElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.FormulaElement.LocalName">
            <summary>formula</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.FormulaElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/spreadsheetml/2006/main/formula</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.FormulaElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.FormulaElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.GradientFillElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.HorizontalElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.IndexedColorsElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.ItalicElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.LeftElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.LegacyDrawingElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.NameElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.NumFmtElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.NumFmtsElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.OutlinePrElement.LocalName">
            <summary>outlinePr</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.OutlinePrElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/spreadsheetml/2006/main/outlinePr</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.OutlinePrElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.OutlinePrElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.PageSetUpPrElement.LocalName">
            <summary>pageSetUpPr</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.PageSetUpPrElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/spreadsheetml/2006/main/pageSetUpPr</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.PageSetUpPrElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.PageSetUpPrElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.PatternFillElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.RgbColorElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.RichTextRunElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.RichTextRunPropertiesElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.ProtectionElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.RightElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.SchemeElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.SharedStringTableElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.SheetPrElement.LocalName">
            <summary>sheetPr</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.SheetPrElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/spreadsheetml/2006/main/sheetPr</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.SheetPrElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.SheetPrElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.FontElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.FontsElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.StopElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.StrikeThroughElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.StringItemElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.StyleSheetElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.TableStyleElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.TableStylesElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.TabColorElement.LocalName">
            <summary>tabColor</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.TabColorElement.QualifiedName">
            <summary>http://schemas.openxmlformats.org/spreadsheetml/2006/main/tabColor</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.TabColorElement.Load(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String,System.Boolean@)">
            <summary>Loads the data for this element from the specified manager.</summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.TabColorElement.Save(Infragistics.Excel.Serialization.Excel2007.Excel2007WorkbookSerializationManager,Infragistics.Excel.Serialization.Excel2007.ExcelXmlElement,System.String@)">
            <summary>Saves the data for this element to the specified manager.</summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.TextElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.TopElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.UnderlineElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.VertAlignElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.VerticalElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.WorkbookElement.LocalName">
            <summary>
            "workbook"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.WorkbookElement.QualifiedName">
            <summary>
            "http://schemas.openxmlformats.org/spreadsheetml/2006/main/workbook"
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.WorkbookElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.WorkbookViewElement.LocalName">
            <summary>
            "workbookview"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.WorkbookViewElement.QualifiedName">
            <summary>
            "http://schemas.openxmlformats.org/spreadsheetml/2006/main/workbookView"
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.WorkbookViewElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.XLSX.Elements.XfElement.Type">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType">XLSXElementType</see> constant which identifies this element.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.workbook">
            <summary>
            Represents the [workbook] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.bookViews">
            <summary>
            Represents the [workbook->bookViews] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.workbookView">
            <summary>
            Represents the [workbook->bookViews->workbookView] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.fileVersion">
            <summary>
            Represents the [workbook->fileVersion] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.sheet">
            <summary>
            Represents the [sheet] (Worksheet) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.c">
            <summary>
            Represents the [c] (cell) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.calcChain">
            <summary>
            Represents the [calcChain] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.sst">
            <summary>
            Represents the [sst] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.styleSheet">
            <summary>
            Represents the [styleSheet] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.externalLink">
            <summary>
            Represents the [externalLink] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.calcPr">
            <summary>
            Represents the [workbook->calcPr] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.fonts">
            <summary>
            Represents the [styleSheet->fonts] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.font">
            <summary>
            Represents the [styleSheet->fonts->font] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.b">
            <summary>
            Represents the [styleSheet->fonts->font->b] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.color">
            <summary>
            Represents the [styleSheet->fonts->font->color] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.i">
            <summary>
            Represents the [styleSheet->fonts->font->i] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.name">
            <summary>
            Represents the [styleSheet->fonts->font->name] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.outline">
            <summary>
            Represents the [styleSheet->fonts->font->outline] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.strike">
            <summary>
            Represents the [styleSheet->fonts->font->strike] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.sz">
            <summary>
            Represents the [styleSheet->fonts->font->sz] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.u">
            <summary>
            Represents the [styleSheet->fonts->font->u] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.vertAlign">
            <summary>
            Represents the [styleSheet->fonts->font->vertAlign] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.borders">
            <summary>
            Represents the [styleSheet->borders] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.border">
            <summary>
            Represents the [styleSheet->borders->border] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.left">
            <summary>
            Represents the [styleSheet->borders->border->left] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.right">
            <summary>
            Represents the [styleSheet->borders->border->right] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.top">
            <summary>
            Represents the [styleSheet->borders->border->top] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.bottom">
            <summary>
            Represents the [styleSheet->borders->border->bottom] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.diagonal">
            <summary>
            Represents the [styleSheet->borders->border->diagonal] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.horizontal">
            <summary>
            Represents the [styleSheet->borders->border->horizontal] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.vertical">
            <summary>
            Represents the [styleSheet->borders->border->vertical] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.family">
            <summary>
            Represents the [styleSheet->fonts->font->family] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.scheme">
            <summary>
            Represents the [styleSheet->fonts->font->scheme] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.fills">
            <summary>
            Represents the [styleSheet->fills] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.fill">
            <summary>
            Represents the [styleSheet->fills->fill] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.gradientFill">
            <summary>
            Represents the [styleSheet->fills->fill->gradientFill] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.patternFill">
            <summary>
            Represents the [styleSheet->fills->fill->patternFill] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.bgColor">
            <summary>
            Represents the [styleSheet->fills->fill->patternFill->bgColor] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.fgColor">
            <summary>
            Represents the [styleSheet->fills->fill->patternFill->fgColor] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.stop">
            <summary>
            Represents the [styleSheet->fills->fill->gradientFill->stop] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.cellStyles">
            <summary>
            Represents the [styleSheet->cellStyles] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.cellStyleXfs">
            <summary>
            Represents the [styleSheet->cellStyleXfs] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.cellXfs">
            <summary>
            Represents the [styleSheet->cellXfs] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.dxfs">
            <summary>
            Represents the [styleSheet->dxfs] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.dxf">
            <summary>
            Represents the [styleSheet->dxfs->dxf] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.xf">
            <summary>
            Represents the [styleSheet->cellStyleXfs->xf] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.protection">
            <summary>
            Represents the [styleSheet->cellStyleXfs->xf->protection] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.alignment">
            <summary>
            Represents the [styleSheet->cellStyleXfs->xf->alignment] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.cellStyle">
            <summary>
            Represents the [styleSheet->cellStyles->cellStyle] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.numFmt">
            <summary>
            Represents the [styleSheet->numFmts->numFmt] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.numFmts">
            <summary>
            Represents the [styleSheet->numFmts] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.colors">
            <summary>
            Represents the [styleSheet->colors] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.indexedColors">
            <summary>
            Represents the [styleSheet->colors->indexedColors] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.mruColors">
            <summary>
            Represents the [styleSheet->colors->mruColors] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.rgbColor">
            <summary>
            Represents the [styleSheet->colors->indexedColors->rgbColor] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.tableStyles">
            <summary>
            Represents the [styleSheet->tableStyles] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.tableStyle">
            <summary>
            Represents the [styleSheet->tableStyles->tableStyle] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.worksheet">
            <summary>
            Represents the [worksheet] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.sheets">
            <summary>
            Represents the [workbook->sheets] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.sheetViews">
            <summary>
            Represents the [worksheet->sheetViews] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.sheetView">
            <summary>
            Represents the [worksheet->sheetViews->sheetView] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.pageMargins">
            <summary>
            Represents the pageMargins element of [chartsheet], [customSheetView], [dialogsheet], or [worksheet] SpreadsheetML elements.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.printOptions">
            <summary>
            Represents the printOptions of [customSheetView], [dialogsheet], or [worksheet] SpreadsheetML elements.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.selection">
            <summary>
            Represents the [worksheet->sheewView->selection] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.dimension">
            <summary>
            Represents the [worksheet->dimension] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.sheetFormatPr">
            <summary>
            Represents the [worksheet->sheetFormatPr] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.workbookPr">
            <summary>
            Represents the [workbook->workbookPr] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.sheetData">
            <summary>
            Represents the [worksheet->sheetData] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.row">
            <summary>
            Represents the [worksheet->sheetData->row] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.v">
            <summary>
            Represents the v (CellValue) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.si">
            <summary>
            Represents the (si) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.t">
            <summary>
            Represents the (t) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.r">
            <summary>
            Represents the [sst->si->r] SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.rPr">
            <summary>
            Represents the (rPr) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.rFont">
            <summary>
            Represents the (rFont) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.pageSetup">
            <summary>
            Represents the (pageSetup) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.col">
            <summary>
            Represents the (col) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.cols">
            <summary>
            Represents the (cols) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.pane">
            <summary>
            Represents the (pane) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.headerFooter">
            <summary>
            Represents the (headerFooter) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.oddHeader">
            <summary>
            Represents the (oddHeader) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.oddFooter">
            <summary>
            Represents the (oddFooter) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.customSheetViews">
            <summary>
            Represents the (customSheetViews) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.customSheetView">
            <summary>
            Represents the (customSheetView) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.customWorkbookViews">
            <summary>
            Represents the (customWorkbookViews) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.customWorkbookView">
            <summary>
            Represents the (customWorkbookView) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.sheetPr">
            <summary>
            Represents the (sheetPr) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.outlinePr">
            <summary>
            Represents the (outlinePr) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.pageSetUpPr">
            <summary>
            Represents the (pageSetUpPr) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.tabColor">
            <summary>
            Represents the (tabColor) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.mergeCell">
            <summary>
            Represents the (mergeCell) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.mergeCells">
            <summary>
            Represents the (mergeCells) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.picture">
            <summary>
            Represents the (picture) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.sheetCalcPr">
            <summary>
            Represents the (picture) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.f">
            <summary>
            Represents the (f) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.brk">
            <summary>
            Represents the brk (Break) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.colBreaks">
            <summary>
            Represents the colBreaks (Vertical Page Breaks) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.definedName">
            <summary>
            Represents the (definedName) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.definedNames">
            <summary>
            Represents the (definedNames) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.externalReferences">
            <summary>
            Represents the (externalReferences) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.externalReference">
            <summary>
            Represents the (externalReference) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.externalBook">
            <summary>
            Represents the (externalBook) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.sheetNames">
            <summary>
            Represents the (sheetNames) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.sheetName">
            <summary>
            Represents the (sheetName) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.sheetDataSet">
            <summary>
            Represents the (sheetDataSet) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.cell">
            <summary>
            Represents the (cell) Spreadsheet ML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.drawing">
            <summary>
            Represents the (drawing) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.comments">
            <summary>
            Represents the (comments) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.authors">
            <summary>
            Represents the (authors) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.author">
            <summary>
            Represents the (author) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.commentList">
            <summary>
            Represents the (commentList) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.comment">
            <summary>
            Represents the (comment) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.text">
            <summary>
            Represents the (text) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.legacyDrawing">
            <summary>
            Represents the (legacyDrawing) SpreadsheetML element
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.XLSX.XLSXElementType.dataValidations">
            <summary>
            Represents the (dataValidations) SpreadsheetML element
            </summary>
        </member>
        <member name="T:Infragistics.Excel.Serialization.Excel2007.StopInfo">
            <summary>
            Class used to represent gradient stops by the GradientFillElement
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.PackageConformanceManager.IsPartConformant(System.String)">
            <summary>
            Returns whether the specified IPackagePart is fully conformant
            to the ECMA TC45 Open Packaging Conventions.
            </summary>
            <param name="packagePartPath">A string representing the absolute target to the IPackagePart to test.</param>
            <returns>A boolean indicating whether the specified IPackagePart is ECMA TC45-conformant.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packagePartPath"/> is null or empty.</exception>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.PackageConformanceManager.IsPartConformant(System.Uri)">
            <summary>
            Returns whether the specified IPackagePart is fully conformant
            to the ECMA TC45 Open Packaging Conventions.
            </summary>
            <param name="packagePartUri">The URI of the IPackagePart to test.</param>
            <returns>A boolean indicating whether the specified IPackagePart is ECMA TC45-conformant.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packagePartUri"/> is null.</exception>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.PackageConformanceManager.IsPartConformant(Infragistics.Excel.IPackagePart)">
            <summary>
            Returns whether the specified IPackagePart is fully conformant
            to the ECMA TC45 Open Packaging Conventions.
            </summary>
            <param name="packagePart">The IPackagePart to test.</param>
            <returns>A boolean indicating whether the specified IPackagePart is ECMA TC45-conformant.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="packagePart"/> is null.</exception>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.PackageConformanceManager.VerifyPackageConformance(Infragistics.Excel.IPackage)">
            <summary>
            Verifies that the specified IPackage conforms to the Open Packing Conventions
            established by ECMA TC45. Throws an exception if the reason for non-conformance
            warrants treating the whole package as invalid.
            </summary>
            <param name="package">The IPackage to verify</param>
            <returns>True if all PackageParts passed all conformance tests, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="package"/> is null.</exception>
            <exception cref="T:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceException">
            Thrown if a part was determined to be non-conformant, and the degree of
            non-conformance is such that the entire package should be considered invalid.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.PackageConformanceManager.VerifyPackageConformance(Infragistics.Excel.IPackage,System.Collections.Generic.Dictionary{System.String,Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason},System.Collections.Generic.Dictionary{System.String,Infragistics.Excel.IPackagePart},Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceException@)">
            <summary>
            Verifies that the specified IPackage conforms to the Open Packing Conventions
            established by ECMA TC45.
            </summary>
            <param name="package">The IPackage to verify</param>
            <param name="nonConformantParts">A dictionary to which the non-conformant parts are added.</param>
            <param name="conformantParts">A dictionary to which the conformant parts are added.</param>
            <param name="exception">[out] Upon return, contains a reference to the PackageNonConformanceException-derived exception that describes the reason the package was determined to be non-conformant, or null if the package was at least partially conformant.</param>
            <returns>True if all PackageParts passed all conformance tests, false otherwise</returns>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.PackageConformanceManager.VerifyPackageConformance(Infragistics.Excel.IPackage,System.Collections.Generic.Dictionary{System.String,Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason},System.Collections.Generic.Dictionary{System.String,Infragistics.Excel.IPackagePart},System.Boolean,Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceException@)">
            <summary>
            Verifies that the specified IPackage conforms to the Open Packing Conventions
            established by ECMA TC45.
            </summary>
            <param name="package">The IPackage to verify</param>
            <param name="nonConformantParts">A dictionary to which the non-conformant parts are added.</param>
            <param name="conformantParts">A dictionary to which the conformant parts are added.</param>
            <param name="verifyXMLContent">A boolean specifying whether or not to verify the contents of the markup against the rules defined in Part 2 of the 'Office Open XML - Open Packaging Conventions' document (see final draft, <a href="http://www.ecma-international.org">ECMA</a> document TC45).</param>
            <param name="exception">[out] Upon return, contains a reference to the PackageNonConformanceException-derived exception that describes the reason the package was determined to be non-conformant, or null if the package was at least partially conformant.</param>
            <returns>True if all PackageParts passed all conformance tests, false otherwise</returns>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.PackageConformanceManager.MakeExempt(System.Collections.Generic.List{Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason})">
            <summary>
            Marks each member of the specified OpenPackagingNonConformanceReason list as
            exempt from conformance verification.
            </summary>
            <param name="reasons">A generic list of the OpenPackagingNonConformanceReason constants to mark as exempt.</param>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.PackageConformanceManager.MakeExempt(Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceReason)">
            <summary>
            Marks the specified OpenPackagingNonConformanceReason as exempt from
            conformance verification.
            </summary>
            <param name="reason">The OpenPackagingNonConformanceReason to mark as exempt.</param>
        </member>
        <member name="T:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceException">
            <summary>
            Thrown when a SpreadsheetMLpackage is found to be non-conformant.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceException.IPackagePart">
            <summary>
            Returns the <a href="http://msdn.microsoft.com/en-us/library/system.io.packaging.packagepart.aspx">IPackagePart</a>
            instance which caused the exception to be thrown, or null (Nothing in VB) if the exception was not caused by
            a IPackagePart.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceException.Reason">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceExceptionReason">reason</see> the exception was thrown.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.WorksheetShapeGroup">
            <summary>
            Represents a group of shapes in a worksheet.  This group is also a shape which can be 
            positioned and contained within another group or on a worksheet.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.WorksheetShape">
            <summary>
            Abstract base class for all shapes (atomic or compound) in a worksheet.
            </summary>
            <remarks>
            <p class="body">
            Atomic shapes are singular shape entities, such as an image, a polygon, or text.
            Compound shapes are groupings of shapes, and are represented by <see cref="T:Infragistics.Excel.WorksheetShapeGroup"/>
            instances.
            </p>
            <p class="body">
            Currently, not all shape information is customizable (such as shape rotation).  However,
            for round-tripping purposes, when a shape is loaded from an Excel file, this 
            information in maintained with the shape.  See <see cref="M:Infragistics.Excel.WorksheetShape.ClearUnknownData"/> for more
            information about unsupported data.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShape.ClearUnknownData">
            <summary>
            Clears the cached unknown shape data which was read in from a parsed excel file.
            </summary>
            <remarks>
            <p class="body">
            This method will only be needed until all shape information is supported and customizable.
            After all shape data can be controlled, this method will become obsolete. Currently, all
            unsupported data will be stored with the shape for round-tripping purposes.  For example, 
            if an Excel file with complex and unsupported shapes is loaded into a 
            <see cref="T:Infragistics.Excel.Workbook"/> instance, some cell values are changed, and it is saved to
            the same file, the complex shapes will still exist in the workbook.  However, if a
            loaded shape needs to be modified before it is saved back, this method
            allows for that unsupported data to be removed while all supported data is maintained.
            </p>
            <p class="note">
            <B>Note:</B> This method only clears unsupported data.  In future versions of the product, 
            as more shape data is supported, this method will have different effects on the shape, 
            until eventually all data is supported and this method will have no effect on the shape.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            This method is called on an <see cref="T:Infragistics.Excel.UnknownShape"/> instance.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShape.GetBoundsInTwips">
            <summary>
            Gets the bounds of the shape in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            The bounds returned by this method are only valid with the current configuration of the worksheet.
            If any rows or columns before or within the shape are resized, these bounds will no longer reflect the 
            position of the shape.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/> or <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/> are null, in which case the shape has no bounds.
            </exception>
            <returns>The bounds of the shape on its worksheet.</returns>
            <seealso cref="M:Infragistics.Excel.WorksheetShape.SetBoundsInTwips(Infragistics.Excel.Worksheet,System.Drawing.Rectangle)"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShape.SetBoundsInTwips(Infragistics.Excel.Worksheet,System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the shape in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            The shape will only be positioned at the specified bounds while the worksheet remains in the current configuration.
            Depending on the <see cref="P:Infragistics.Excel.WorksheetShape.PositioningMode"/> of the shape, it may change bounds if any rows or columns before or within the shape are resized.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <param name="worksheet">The worksheet on which the shape should be placed.</param>
            <param name="bounds">The new bounds where the shape should be placed.</param> 
        </member>
        <member name="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell">
            <summary>
            Gets or sets the cell where the bottom-right corner of the shape resides.
            </summary>
            <remarks>
            <p class="body">
            This anchor cell, along with the <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/>, determines where the shape will be
            positioned on the worksheet.  In addition, the <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerPosition"/> and 
            <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerPosition"/> properties allow for finer control of the shape's position.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            The value assigned is a cell whose worksheet is not the same as this shape's worksheet.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is null and this shape already exists on a worksheet or group.
            </exception>
            <value>The cell where the bottom-right corner of the shape resides.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerPosition"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerPosition"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShape.BottomRightCornerPosition">
            <summary>
            Gets or sets the position in the <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/> of the shape's bottom-right corner,
            expressed in percentages.
            </summary>
            <remarks>
            <p class="body">
            These percentages are expressed as distance across the associated dimension of the cell, starting at the 
            top-left corner of the cell.  For example, (0.0, 0.0) represents the top-left corner of the cell, whereas
            (100.0, 100.0) represents the bottom-right corner of the cell.  (50.0, 10.0) would represent the location 
            in the cell which is centered horizontally, and a tenth of the way down from the top.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Either coordinate of the value assigned is outside the range of 0.0 to 100.0.
            </exception>
            <value>The position in the bottom-right corner cell of the shape's bottom-right corner.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerPosition"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShape.PositioningMode">
            <summary>
            Gets or sets the way shapes will be repositioned in excel when cells before or within the shape are resized.
            </summary>
            <remarks>
            <p class="body">
            This value will not be saved for shapes contained in a <see cref="T:Infragistics.Excel.WorksheetShapeGroup"/>, which inherit their
            positioning mode from their parent group.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ShapePositioningMode"/> enumeration.
            </exception>
            <value>The way shapes will be repositioned in excel when cells before or within the shape are resized.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell">
            <summary>
            Gets or sets the cell where the top-left corner of the shape resides.
            </summary>
            <remarks>
            <p class="body">
            This anchor cell, along with the <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/>, determines where the shape will be
            positioned on the worksheet.  In addition, the <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerPosition"/> and 
            <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerPosition"/> properties allow for finer control of the shape's position.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            The value assigned is a cell whose worksheet is not the same as this shape's worksheet.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is null and this shape already exists on a worksheet or group.
            </exception>
            <value>The cell where the top-left corner of the shape resides.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerPosition"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerPosition"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShape.TopLeftCornerPosition">
            <summary>
            Gets or sets the position in the <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/> of the shape's top-left corner,
            expressed in percentages.
            </summary>
            <remarks>
            <p class="body">
            These percentages are expressed as distance across the associated dimension of the cell, starting at the 
            top-left corner of the cell.  For example, (0.0, 0.0) represents the top-left corner of the cell, whereas
            (100.0, 100.0) represents the bottom-right corner of the cell.  (50.0, 10.0) would represent the location 
            in the cell which is centered horizontally, and a tenth of the way down from the top.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Either coordinate of the value assigned is outside the range of 0.0 to 100.0.
            </exception>
            <value>The position in the top-left corner cell of the shape's top-left corner.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerPosition"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShape.Visible">
            <summary>
            Gets or sets the value indicating whether the shape is visible on the worksheet.
            </summary>
            <value>The value indicating whether the shape is visible on the worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShape.Worksheet">
            <summary>
            Gets the worksheet on which the shape resides.
            </summary>
            <value>The worksheet on which the shape resides.</value>
            // MD 9/2/08 - Cell Comments
        </member>
        <member name="M:Infragistics.Excel.WorksheetShapeGroup.#ctor">
            <summary>
            Creates a new <see cref="T:Infragistics.Excel.WorksheetShapeGroup"/> instance.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShapeGroup.Shapes">
            <summary>
            Gets the collection of shapes contained in the group.
            </summary>
            <value>The collection of shapes contained in the group.</value>
        </member>
        <member name="T:Infragistics.Excel.DocumentProperties">
            <summary>
            Class which exposes the document level properties for a Microsoft Excel file.
            </summary>
            <remarks>
            <p class="body">
            The properties exposed by this class can be changed on a Microsoft Excel file by right-clicking it
            in Windows Explorer and editing the properties on the Summary tab.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Author">
            <summary>
            Gets or sets the author of the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the author of the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Category">
            <summary>
            Gets or sets the category of the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the category of the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Comments">
            <summary>
            Gets or sets the comments associated with the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the comments associated with the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Company">
            <summary>
            Gets or sets the company to which the document belongs.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the company to which the document belongs.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Keywords">
            <summary>
            Gets or sets the keywords which describe the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the keywords which describe the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Manager">
            <summary>
            Gets or sets the manager associated with the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the manager associated with the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Status">
            <summary>
            Gets or sets the current status of the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string representing the current status of the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Subject">
            <summary>
            Gets or sets the subject of the contents of the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the subject of the contents of the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Title">
            <summary>
            Gets or sets the title of the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the title of the document.</value>
        </member>
        <member name="T:Infragistics.Excel.CalculationMode">
            <summary>
            Represents the the ways formulas are recalculated when their referenced values change.
            </summary>
            <seealso cref="P:Infragistics.Excel.Workbook.CalculationMode"/>
        </member>
        <member name="F:Infragistics.Excel.CalculationMode.Manual">
            <summary>
            Formulas must be recalculated manually, by pressing a button in the Microsoft Excel interface.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalculationMode.Automatic">
            <summary>
            Formulas and data tables are automatically recalculated when the values in referenced cells change.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalculationMode.AutomaticExceptForDataTables">
            <summary>
            Only formulas are automatically recalculated when the values in referenced cells change.
            Data tables must be recalculated manually.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CellBorderLineStyle">
            <summary>
            Represents the different cell border line styles.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Default">
            <summary>
            Use the default border line style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Thin">
            <summary>
            Thin border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Medium">
            <summary>
            Medium border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Dashed">
            <summary>
            Dashed border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Dotted">
            <summary>
            Dotted border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Thick">
            <summary>
            Thick border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Double">
            <summary>
            Double-line border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Hair">
            <summary>
            Dotted border with small dots.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.MediumDashed">
            <summary>
            Dotted border with big dots.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.DashDot">
            <summary>
            Dash-dot border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.MediumDashDot">
            <summary>
            Medium dash-dot border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.DashDotDot">
            <summary>
            Dash-dot-dot border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.MediumDashDotDot">
            <summary>
            Medium dash-dot-dot border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.SlantedDashDot">
            <summary>
            Slanted dash-dot border.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CellReferenceMode">
            <summary>
            Represents the various ways cells can be referenced in a formula.
            </summary>
            <remarks>
            <p class="body">
            Setting this on the <see cref="P:Infragistics.Excel.Workbook.CellReferenceMode"/> will also affect the row and column labels.
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CellReferenceMode.A1">
            <summary>
            Cells are referenced by first specifying characters representing the column and a one-based number 
            specifying the row (R54 or CA56). The dollar sign ($) can preface one or both identifiers to make them 
            absolute references ($A$7). Without the dollar sign, references still use absolute row and column addresses,
            although shifting a formula to a new cell will perform a similar shift on all relative references.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellReferenceMode.R1C1">
            <summary>
            Cells are referenced in the following format R&lt;RowIndex&gt;C&lt;ColumnIndex&gt; (R34C5 or R2C345). 
            These indices are one-based and represent absolute references. To create a relative reference in R1C1 mode, a relative
            index must be placed inside square brackets following the R and/or C ( R[-1]C[5] or R9C[-3] ).  An R by itself 
            also represents a relative reference and is equivalent to R[0]. Similarly, C is equivalent to C[0], which means a 
            formula of =RC always references the cell which contains the formula.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.DateSystem">
            <summary>
            Represents the various ways a date can be stored internally.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.DateSystem.From1900">
            <summary>
            Dates are stored as time elapsed since 1900.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.DateSystem.From1904">
            <summary>
            Dates are stored as time elapsed since 1904 (used mainly on Apple computers).
            </summary>
        </member>
        <member name="T:Infragistics.Excel.ExcelDefaultableBoolean">
            <summary>
            Enumeration for a boolean type property that allows for a
            default setting. This is used in property override situations.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ExcelDefaultableBoolean.Default">
            <summary>
            Use the current default.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ExcelDefaultableBoolean.True">
            <summary>
            True.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ExcelDefaultableBoolean.False">
            <summary>
            False.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.FillPatternStyle">
            <summary>
            Enumeration for fill pattern styles. Default value is used in property override situations.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Default">
            <summary>
            Use the current default.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.None">
            <summary>
            No fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Solid">
            <summary>
            Solid fill pattern with fill pattern foreground color. 
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Gray50percent">
            <summary>
            "50% gray" fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Gray75percent">
            <summary>
            "75% gray" fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Gray25percent">
            <summary>
            "25% gray" fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.HorizontalStripe">
            <summary>
            Horizontal stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.VerticalStripe">
            <summary>
            Vertical stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ReverseDiagonalStripe">
            <summary>
            Reverse diagonal stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.DiagonalStripe">
            <summary>
            Diagonal stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.DiagonalCrosshatch">
            <summary>
            Diagonal crosshatch fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThickDiagonalCrosshatch">
            <summary>
            Thick diagonal crosshatch fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThinHorizontalStripe">
            <summary>
            Thin horizontal stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThinVerticalStripe">
            <summary>
            Thin vertical stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThinReverseDiagonalStripe">
            <summary>
            Thin reverse diagonal stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThinDiagonalStripe">
            <summary>
            Thin diagonal stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThinHorizontalCrosshatch">
            <summary>
            Thin horizontal crosshatch fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThinDiagonalCrosshatch">
            <summary>
            Thin diagonal crosshatch fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Gray12percent">
            <summary>
            "12.5% gray" fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Gray6percent">
            <summary>
            "6.25% gray" fill pattern.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.FontSuperscriptSubscriptStyle">
            <summary>
            Enumeration for font superscript or subscript style. Default value is used in property override situations.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontSuperscriptSubscriptStyle.Default">
            <summary>
            Use the current default.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontSuperscriptSubscriptStyle.None">
            <summary>
            No superscript or subscript style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontSuperscriptSubscriptStyle.Superscript">
            <summary>
            Superscript style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontSuperscriptSubscriptStyle.Subscript">
            <summary>
            Subscript style.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.FontUnderlineStyle">
            <summary>
            Enumeration for font underline styles. Default value is used in property override situations.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontUnderlineStyle.Default">
            <summary>
            Use the current default.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontUnderlineStyle.None">
            <summary>
            No underline style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontUnderlineStyle.Single">
            <summary>
            Single underline style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontUnderlineStyle.Double">
            <summary>
            Double underline style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontUnderlineStyle.SingleAccounting">
            <summary>
            Single accounting underline style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontUnderlineStyle.DoubleAccounting">
            <summary>
            Double accounting underline style.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.HorizontalCellAlignment">
            <summary>
            Enumeration for horizontal alignment styles. Default value is used in property override situations.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.Default">
            <summary>
            Use the current default.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.General">
            <summary>
            Alignment depends on underlying data type.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.Center">
            <summary>
            Centered alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.Fill">
            <summary>
            Repeat cell value to fill whole cell.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.Justify">
            <summary>
            Justify alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.CenterAcrossSelection">
            <summary>
            Centers the contents of the left-most cell in a center across selection group. All other cells in the center across selection group must be empty. The cells are not merged, and the data may appear to be in a cell other than the left-most cell.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.Distributed">
            <summary>
            Distributed alignment.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.ObjectDisplayStyle">
            <summary>
            Represents the various way objects and shapes are displayed in the workbook.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ObjectDisplayStyle.ShowAll">
            <summary>
            All object are be shown.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ObjectDisplayStyle.ShowPlaceholders">
            <summary>
            Placeholders are shown in place of objects.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ObjectDisplayStyle.HideAll">
            <summary>
            No objects or shapes are shown.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.Orientation">
            <summary>
            Represents the page orientations available when a worksheet is printed.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Orientation.Landscape">
            <summary>
            The page is printed with the larger dimension horizontal.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Orientation.Portrait">
            <summary>
            The page is printed with the larger dimension vertical.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Orientation.Default">
            <summary>
            The page is printed with the default setting.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.PageOrder">
            <summary>
            Represents the ways to order the pages of multiple page worksheets.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PageOrder.DownThenOver">
            <summary>
            The first page to print is the top-left page. The next pages printed are below the first page.  
            When there are no more pages below, the page to the right of the top-left page is printed, then the pages 
            below it, and so on.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PageOrder.OverThenDown">
            <summary>
            The first page to print is the top-left page. The next pages printed are right of the first page.  
            When there are no more pages to the right, the page below the top-left page is printed, then the pages 
            to the right of it, and so on.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.PageNumbering">
            <summary>
            Represents the way pages are numbered when printed.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PageNumbering.Automatic">
            <summary>
            Pages are automatically numbered based on the style of the worksheet.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PageNumbering.UseStartPageNumber">
            <summary>
            The starting page number specified is used for the first page, additional
            pages receive a page number that it one greater than the previous page.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.PaneLocation">
            <summary>
            Represents the locations of the various panes which could exist in a multi-pane
            view of a worksheet.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaneLocation.BottomRight">
            <summary>
            The bottom-right pane of the worksheet. This location is only valid if the worksheet
            is split both horizontally and veritcally.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaneLocation.TopRight">
            <summary>
            The top-right pane of the worksheet. This location is only valid if the worksheet
            is split vertically. If the worksheet is only has left and right panes, this is the 
            location of the right pane.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaneLocation.BottomLeft">
            <summary>
            The bottom-left pane of the worksheet. This location is only valid is the worksheet
            is split horizontally. If the worksheet only has top and bottom panes, this is the 
            location of the bottom pane.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaneLocation.TopLeft">
            <summary>
            This top-left pane of the worksheet. This location is always valid. If the worksheet
            does not have any pane splits, this is the only pane. If the worksheet only has top
            and bottom panes, this is the location of the top pane. If the worksheet only has
            left and right panes, this is the location of the left pane.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.PaperSize">
            <summary>
            Represents the various paper sizes available for printing.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Letter">
            <summary>
            Letter 8 1/2\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LetterSmall">
            <summary>
            Letter small 8 1/2\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Tabloid">
            <summary>
            Tabloid 11\" x 17\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Ledger">
            <summary>
            Ledger 17\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Legal">
            <summary>
            Legal 8 1/2\" x 14\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Statement">
            <summary>
            Statement 5 1/2\" x 8 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Executive">
            <summary>
            Executive 7 1/4\" x 10 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A3">
            <summary>
            A3 297mm x 420mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A4">
            <summary>
            A4 210mm x 297mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A4Small">
            <summary>
            A4 small 210mm x 297mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A5">
            <summary>
            A5 148mm x 210mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B4JIS">
            <summary>
            B4 (JIS) 257mm x 364mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B5JIS">
            <summary>
            B5 (JIS) 182mm x 257mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Folio">
            <summary>
            Folio 8 1/2\" x 13\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Quarto">
            <summary>
            Quarto 215mm x 275mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size10x14">
            <summary>
            10x14 10\" x 14\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size11x17">
            <summary>
            11x17 11\" x 17\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Note">
            <summary>
            Note 8 1/2\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Envelope9">
            <summary>
            Envelope #9 3 7/8\" x 8 7/8\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Envelope10">
            <summary>
            Envelope #10 4 1/8\" x 9 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Envelope11">
            <summary>
            Envelope #11 4 1/2\" x 10 3/8\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Envelope12">
            <summary>
            Envelope #12 4 3/4\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Envelope14">
            <summary>
            Envelope #14 5\" x 11 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.C">
            <summary>
            C 17\" x 22\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.D">
            <summary>
            D 22\" x 34\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.E">
            <summary>
            E 34\" x 44\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeDL">
            <summary>
            Envelope DL 110mm x 220mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeC5">
            <summary>
            Envelope C5 162mm x 229mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeC3">
            <summary>
            Envelope C3 324mm x 458mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeC4">
            <summary>
            Envelope C4 229mm x 324mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeC6">
            <summary>
            Envelope C6 114mm x 162mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeC6C5">
            <summary>
            Envelope C6/C5 114mm x 229mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B4ISO_1">
            <summary>
            B4 (ISO) 250mm x 353mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B5ISO">
            <summary>
            B5 (ISO) 176mm x 250mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B6ISO">
            <summary>
            B6 (ISO) 125mm x 176mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeItaly">
            <summary>
            Envelope Italy 110mm x 230mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeMonarch">
            <summary>
            Envelope Monarch 3 7/8\" x 7 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size634Envelope">
            <summary>
            6 3/4 Envelope 3 5/8\" x 6 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.USStandardFanfold">
            <summary>
            US Standard Fanfold 14 7/8\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.GermanStandardFanfold">
            <summary>
            German Std. Fanfold 8 1/2\" x 12\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.GermanLegalFanfold">
            <summary>
            German Legal Fanfold 8 1/2\" x 13\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B4ISO_2">
            <summary>
            B4 (ISO) 250mm x 353mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.JapanesePostcard">
            <summary>
            Japanese Postcard 100mm x 148mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size9x11">
            <summary>
            9x11 9\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size10x11">
            <summary>
            10x11 10\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size15x11">
            <summary>
            15x11 15\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeInvite">
            <summary>
            Envelope Invite 220mm x 220mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LetterExtra">
            <summary>
            Letter Extra 9 1/2\" x 12\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LegalExtra">
            <summary>
            Legal Extra 9 1/2\" x 15\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.TabloidExtra">
            <summary>
            Tabloid Extra 11 11/16\" x 18\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A4Extra">
            <summary>
            A4 Extra 235mm x 322mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LetterTransverse">
            <summary>
            Letter Transverse 8 1/2\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A4Transverse">
            <summary>
            A4 Transverse 210mm x 297mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LetterExtraTransverse">
            <summary>
            Letter Extra Transv. 9 1/2\" x 12\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.SuperAA4">
            <summary>
            Super A/A4 227mm x 356mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.SuperBA3">
            <summary>
            Super B/A3 305mm x 487mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LetterPlus">
            <summary>
            Letter Plus 8 1/2\" x 12 11/16\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A4Plus">
            <summary>
            A4 Plus 210mm x 330mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A5Transverse">
            <summary>
            A5 Transverse 148mm x 210mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B5JISTransverse">
            <summary>
            B5 (JIS) Transverse 182mm x 257mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A3Extra">
            <summary>
            A3 Extra 322mm x 445mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A5Extra">
            <summary>
            A5 Extra 174mm x 235mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B5ISOExtra">
            <summary>
            B5 (ISO) Extra 201mm x 276mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A2">
            <summary>
            A2 420mm x 594mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A3Transverse">
            <summary>
            A3 Transverse 297mm x 420mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A3ExtraTransverse">
            <summary>
            A3 Extra Transverse 322mm x 445mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.DblJapanesePostcard">
            <summary>
            Dbl. Japanese Postcard 200mm x 148mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A6">
            <summary>
            A6 105mm x 148mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LetterRotated">
            <summary>
            Letter Rotated 11\" x 8 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A3Rotated">
            <summary>
            A3 Rotated 420mm x 297mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A4Rotated">
            <summary>
            A4 Rotated 297mm x 210mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A5Rotated">
            <summary>
            A5 Rotated 210mm x 148mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B4JISRotated">
            <summary>
            B4 (JIS) Rotated 364mm x 257mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B5JISRotated">
            <summary>
            B5 (JIS) Rotated 257mm x 182mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.JapanesePostcardRotated">
            <summary>
            Japanese Postcard Rot. 148mm x 100mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.DblJapanesePostcardRotated">
            <summary>
            Dbl. Jap. Postcard Rot. 148mm x 200mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A6Rotated">
            <summary>
            A6 Rotated 148mm x 105mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B6JIS">
            <summary>
            B6 (JIS) 128mm x 182mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B6JISRotated">
            <summary>
            B6 (JIS) Rotated 182mm x 128mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size12x11">
            <summary>
            12x11 12\" x 11\"
            </summary>
        </member>
        <member name="T:Infragistics.Excel.Precision">
            <summary>
            Represents the types of precision which can be used when obtaining the value of a cell.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Precision.UseDisplayValues">
            <summary>
            The display value of the cell is used. If the cell's actual value is 10.005, but it is using currency formatting,
            it will display as $10.01.  When this cell is used in calculations, its displayed value of 10.01 will be used.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Precision.UseRealCellValues">
            <summary>
            The actual value of the cell is used. If the cell's actual value is 10.005, but it is using currency formatting,
            it will display as $10.01.  When this cell is used in calculations, its stored value of 10.005 will be used, 
            even though the display shows a slightly different value.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.PrintErrors">
            <summary>
            Represents the various ways to print cell errors in a worksheet.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintErrors.PrintAsDisplayed">
            <summary>
            Errors are printed just as they are displayed on the worksheet.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintErrors.DontPrint">
            <summary>
            Errors are not prints, as though the cells containing them have no value.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintErrors.PrintAsDashes">
            <summary>
            Errors are printed as two dashes "--".
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintErrors.PrintAsNA">
            <summary>
            Errors are prints as "#N/A".
            </summary>
        </member>
        <member name="T:Infragistics.Excel.PrintNotes">
            <summary>
            Represents the various ways to print cell notes.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintNotes.DontPrint">
            <summary>
            Cell notes are not printed.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintNotes.PrintAsDisplayed">
            <summary>
            Cell notes are printed as they are shown on the worksheet. With this option, cell
            notes will only appear in the printed worksheet if they are displayed on the worksheet
            in Microsoft Excel. If the notes just show indicators in Excel, the indicators and notes 
            will not be printed. 
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintNotes.PrintAtEndOfSheet">
            <summary>
            Cell notes are printed on the last page, after the entire worksheet has printed.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.ScalingType">
            <summary>
            Represents the ways to scale a worksheet when it is printed.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ScalingType.UseScalingFactor">
            <summary>
            The scaling factor is used to scale the worksheet when printing.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ScalingType.FitToPages">
            <summary>
            The page maximums are used to determine how many pages the worksheet can be printed on.
            Less pages can be used if there is not enough printable content in the worksheet.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.ScrollBars">
            <summary>
            Represents the various scroll bar configurations available for the workbook.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ScrollBars.None">
            <summary>
            No scroll bars are shown in Microsoft Excel.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ScrollBars.Horizontal">
            <summary>
            Only the horizontal scroll bar is shown in Microsoft Excel.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ScrollBars.Vertical">
            <summary>
            Only the vertical scroll bar is shown in Microsoft Excel.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ScrollBars.Both">
            <summary>
            Both scroll bars are shown in Microsoft Excel.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.ShapePositioningMode">
            <summary>
            Represents the ways shapes will be repositioned when rows and columns are resized.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ShapePositioningMode.MoveAndSizeWithCells">
            <summary>
            Shapes will move and size with the cells. If columns before (or rows above) the shape are expanded,
            the shape will shift left. If columns within a shape are expanded, the shape will be widened.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ShapePositioningMode.MoveWithCells">
            <summary>
            Shapes will move but not size with the cells. If columns before (or rows above) the shape are
            expanded, the shape will shift left. If columns within a shape are expanded, the shape will not
            be widened.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ShapePositioningMode.DontMoveOrSizeWithCells">
            <summary>
            Shapes will not move or size with the cells. The shape will remain in its absolute pixel position of
            the worksheet, regardless the rows and columns resized before or inside it.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.VerticalCellAlignment">
            <summary>
            Enumeration for vertical alignment styles. Default value is used in property override situations.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.VerticalCellAlignment.Default">
            <summary>
            Use the current default.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.VerticalCellAlignment.Top">
            <summary>
            Top alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.VerticalCellAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.VerticalCellAlignment.Bottom">
            <summary>
            Bottom alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.VerticalCellAlignment.Justify">
            <summary>
            Justify alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.VerticalCellAlignment.Distributed">
            <summary>
            Distributed alignment.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.WorkbookFormat">
            <summary>
            Represents the various file formats in which a workbook can be saved.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorkbookFormat.Excel97To2003">
            <summary>
            The Excel 97-2003 BIFF8 file format.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorkbookFormat.Excel2007">
            <summary>
            The Excel 2007 XML file format.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorkbookFormat.Excel2007MacroEnabled">
            <summary>
            The Excel 2007 Macro-Enabled XML file format.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.WorkbookPaletteMode">
            <summary>
            Enum specifying what palette to use when exporting. 
            </summary>
            <remarks>
            <p class="body">Determines whether a custom palette will be created or whether to use the standard Excel palette of colors when exporting.</p>
            <p class="body">A custom palette will make the exported Excel Workbook appear with exactly the same colors as the object on the screen. However, using a custom palette can cause problems when copying and pasting from one Excel Workbook to another. Since the two workbooks are unlikely to share exactly the same palette, colors may change.</p>
            <p class="body">Using the standard Excel palette means that the colors in the Excel Workbook will not exactly match those on the screen. For each color used by the item on-screen, the closest matching color in the standard palette will be used in Excel. Copy and Paste using a Workbook creating using the Standard palette will not result in any color changes - unless the pasting is done onto a Workbook with a custom palette.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.WorkbookPaletteMode.CustomPalette">
            <summary>
            Use a custom palette based on the actual colors.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorkbookPaletteMode.StandardPalette">
            <summary>
            Use the standard Excel palette by matching the nearest color. 
            </summary>
        </member>
        <member name="T:Infragistics.Excel.WorksheetView">
            <summary>
            Represents the various views for a worksheet.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorksheetView.Normal">
            <summary>
            The worksheet is displayed in the normal view.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorksheetView.PageLayout">
            <summary>
            The worksheet is displayed as it will appear when printed. This view displays where
            printed pages will begin and end as well as any headers or footers for the workbook.
            This value is only supported in Excel 2007 and defaults to Normal in earlier version.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorksheetView.PageBreakPreview">
            <summary>
            This view shows a preview of where pages will break when the worksheet is printed.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.WorksheetVisibility">
            <summary>
            Represents the various visibilities of a worksheet.
            </summary>
            <remarks>
            <p class="body">
            The worksheet visibility indicates how the worksheet will be displayed in the tab bar at 
            the bottom of the workbook window in Microsoft Excel.
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.WorksheetVisibility.Visible">
            <summary>
            The worksheet tab is present in the tab bar.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorksheetVisibility.Hidden">
            <summary>
            The worksheet tab is not present in the tab bar. The worksheet can be made visible
            from the Unhide dialog in Microsoft Excel.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorksheetVisibility.StrongHidden">
            <summary>
            The worksheet tab is not present in the tab bar. The worksheet can only be made visible
            again through a Visual Basic procedure in Microsoft Excel. The worksheet can not be made 
            visible through the user interface.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CommentDisplayStyle">
            <summary>
            Defines options for displaying comments in the user interface.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CommentDisplayStyle.None">
            <summary>
            Indicates that comments not be shown in the user interface.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CommentDisplayStyle.Indicator">
            <summary>
            Indicates that only the comment indicator be shown in the user interface.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CommentDisplayStyle.IndicatorAndComment">
            <summary>
            Indicates that both the comment indicator and comment text be show in the user interface.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.WorksheetShapeSerializationManager.OnShapeCreated(Infragistics.Excel.WorksheetShape,Infragistics.Excel.Serialization.ContextStack)">
            <summary>
            Called when the corresponding DrawingML element
            ('sp', 'pic', or 'grpSp') is loaded for the specified shape.
            </summary>
            <param name="shape">The WorksheetShape-derived instance that was created.</param>
            <param name="contextStack">The ContextStack instance onto which the shape will be pushed.</param>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.WorksheetShapeSerializationManager.OnShapeCreated(Infragistics.Excel.WorksheetShape,Infragistics.Excel.Serialization.ContextStack,Infragistics.Excel.Serialization.Excel2007.ShapeAttributes)">
            <summary>
            Called when the corresponding DrawingML element
            ('sp', 'pic', or 'grpSp') is loaded for the specified shape.
            </summary>
            <param name="shape">The WorksheetShape-derived instance that was created.</param>
            <param name="contextStack">The ContextStack instance onto which the shape will be pushed.</param>
            <param name="shapeAttributes">A ShapeAttributes instance which contains the attributes specific to the 'sp' element, which corresponds to our UnknownShape class.</param>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.WorksheetShapeSerializationManager.ConsumeShape(Infragistics.Excel.Serialization.ContextStack,System.Type)">
            <summary>
            Pulls a generic list containing WorksheetShape instances off the
            ContextStack, removes the first item from that list and returns it.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.WorksheetShapeSerializationManager.PeekCurrentShape(Infragistics.Excel.Serialization.ContextStack)">
            <summary>
            Pulls a generic list containing WorksheetShape instances off the
            ContextStack, removes the first item from that list and returns it.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.WorksheetShapeSerializationManager.GetCurrentShapeHelper(Infragistics.Excel.Serialization.ContextStack,System.Type,System.Boolean)">
            <summary>
            Pulls a generic list containing WorksheetShape instances off the
            ContextStack, and returns the first item from that list.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Serialization.Excel2007.WorksheetShapeSerializationManager.OnBeforeShapeSaved(Infragistics.Excel.WorksheetShape,System.Boolean)">
            <summary>
            Called immediately before the corresponding DrawingML element
            is created for the specified shape.
            </summary>
            <param name="shape">The WorksheetShape-derived instance about to be serialized.</param>
            <param name="isRootShape">Specifies whether the shape belongs to the worksheet's Shapes collection.</param>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.WorksheetShapeSerializationManager.Elements">
            <summary>
            Represents the immediate children of the 'sp', 'pic' and 'grpSp' DrawingML elements.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.WorksheetShapeSerializationManager.CellAnchor">
            <summary>
            Wraps the element and attributes values of the 'twoCellAnchor'
            DrawingML element and its descendants ('to', 'from', 'off', 'ext', etc.)
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.WorksheetShapeSerializationManager.ClientData">
            <summary>
            Wraps the element and attributes values of the 'clientData'
            DrawingML element.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.WorksheetShapeSerializationManager.Transform">
            <summary>
            Wraps the element and attributes values of the 'xfrm'
            DrawingML element and its descendants.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.Serialization.Excel2007.WorksheetShapeSerializationManager.ShapeAttributes">
            <summary>
            Wraps the attribute values of the 'sp' DrawingML element.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.Transform.Extent.cx">
            <summary>Width</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.Transform.Extent.cy">
            <summary>Height</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.Transform.Offset.x">
            <summary>Horizontal coordinate</summary>
        </member>
        <member name="F:Infragistics.Excel.Serialization.Excel2007.Transform.Offset.y">
            <summary>Vertical coordinate</summary>
        </member>
        <member name="T:Infragistics.Excel.WorksheetCellComment">
            <summary>
            Represents a comment for a cell.
            </summary>
            <remarks>
            <p class="body">
            Comments cannot be added to a worksheet's or a shape group's shapes collection. Instead, they must be set directly on the cell 
            with the cell's <see cref="P:Infragistics.Excel.WorksheetCell.Comment"/> property.
            </p>
            <p class="body">
            It is not required that the anchors of this shape be initialized before setting it as the comment of a cell. If the 
            <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/> and <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/> anchors are both null when
            the comment is applied to a cell, default anchor cells will be used based on the cell.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Excel.WorksheetShapeWithText">
            <summary>
            Abstract base class for all shapes that can display text.
            </summary>
            <remarks>
            <p class="body">
            Primitive shapes, such as polygons, and cell comments can display regular text or text with mixed formatting and are derived from this class.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.Excel.WorksheetCellComment"/>
            <seealso cref="T:Infragistics.Excel.UnknownShape"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShapeWithText.Text">
            <summary>
            Gets or sets the formatted text of the comment.
            </summary>
            <remarks>
            <p class="body">
            Getting the value of this property will always return a non-null value. If null is set on the property, it will subsequently 
            return an empty formatted string.
            </p>
            </remarks>
            <value>The formatted text of the comment.</value>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCellComment.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Excel.WorksheetCellComment"/> class.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCellComment.Worksheet">
            <summary>
            Gets the worksheet on which the shape resides.
            </summary>
            <value>The worksheet on which the shape resides.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCellComment.Author">
            <summary>
            Gets or sets the author of the comment.
            </summary>
            <remarks>
            <p class="body">
            This information is not displayed in the Microsoft Excel UI and is for informational purposes only.
            </p>
            </remarks>
            <value>The author of the comment.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCellComment.Cell">
            <summary>
            Gets the cell to which the comment is applied.
            </summary>
            <value>The cell to which the comment is applied.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.Comment"/>
        </member>
        <member name="T:Infragistics.Excel.WorkbookStyle">
            <summary>
            Represents a complex format which can be easily applied to a cell in Microsoft Excel.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.WorkbookStyle.Name">
            <summary>
            Gets the name of the workbook style.
            </summary>
            <value>The name of the workbook style.</value>
        </member>
        <member name="P:Infragistics.Excel.WorkbookStyle.StyleFormat">
            <summary>
            Gets the cell format which applies to the workbook style.
            </summary>
            <value>The cell format which applies to the workbook style.</value>
        </member>
        <member name="T:Infragistics.Excel.FormulaParseException">
            <summary>
            The exception thrown when a formula parse error occurs.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.FormulaParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.FormulaParseException"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.FormulaParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.FormulaParseException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Infragistics.Excel.FormulaParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.FormulaParseException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of this exception.</param>
        </member>
        <member name="M:Infragistics.Excel.FormulaParseException.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.FormulaParseException"/> class with a specified error message 
            and information which helps determine the location of the parse error in the formula.
            </summary>
            <param name="charIndexOfError">The character index in the <paramref name="formulaValue"/> parameter where the parse error occurred.</param>
            <param name="formulaValue">The formula which had the error being parsed.</param>
            <param name="message">The message that describes the error.</param>
            <param name="portionWithError">The portion of the formula which had the error being parsed.</param>
        </member>
        <member name="M:Infragistics.Excel.FormulaParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.FormulaParseException"/> class with the serialized data.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is null.
            </exception>
            <param name="info">The serialized object data.</param>
            <param name="context">The context information about the source serialized stream.</param>
        </member>
        <member name="M:Infragistics.Excel.FormulaParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with this object's data.
            </summary>
            <param name="info">The serialized object data.</param>
            <param name="context">The context information about the destination serialized stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is null.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.FormulaParseException.CharIndexOfError">
            <summary>
            Gets the character index in the <see cref="P:Infragistics.Excel.FormulaParseException.FormulaValue"/> at which the parse error occurred.
            </summary>
            <value>The character index in the FormulaValue at which the parse error occurred.</value>
        </member>
        <member name="P:Infragistics.Excel.FormulaParseException.FormulaValue">
            <summary>
            Gets the formula string which had the error being parsed.
            </summary>
            <value>The formula string which had the error being parsed.</value>
        </member>
        <member name="P:Infragistics.Excel.FormulaParseException.Message">
            <summary>
            Gets the error message and the portion of the formula with the error.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.FormulaParseException.PortionWithError">
            <summary>
            Gets the portion of the formula which contains the error.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.FrozenPaneSettings">
            <summary>
            Class which controls the way frozen panes are arranged and used for a worksheet.
            </summary>
            <remarks>
            <p class="note">
            <B>Note:</B> Frozen and unfrozen panes cannot be used simultaneously, so depending whether the panes are 
            frozen or unfrozen, these settings may not be used or saved.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen"/>
            <seealso cref="T:Infragistics.Excel.UnfrozenPaneSettings"/>
        </member>
        <member name="T:Infragistics.Excel.PaneSettingsBase">
            <summary>
            Abstract base class for classes which control pane settings.
            </summary>
            <seealso cref="T:Infragistics.Excel.FrozenPaneSettings"/>
            <seealso cref="T:Infragistics.Excel.UnfrozenPaneSettings"/>
        </member>
        <member name="M:Infragistics.Excel.PaneSettingsBase.Reset">
            <summary>
            Resets the pane settings to their defaults.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.PaneSettingsBase.FirstColumnInRightPane">
            <summary>
            Gets or sets the first visible column in the right pane(s) of the worksheet. 
            </summary>
            <remarks>
            <p class="body">
            This affects the scroll position for the right pane(s) of the worksheet and 
            is only used if the worksheet is split vertically.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid column range (0 to one less than <see cref="F:Infragistics.Excel.Workbook.MaxExcelColumnCount"/> or 
            <see cref="F:Infragistics.Excel.Workbook.MaxExcel2007ColumnCount"/>, depending on the workbook's 
            <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>).
            </exception>
            <value>The zero-based index of the first visible column in the right pane(s).</value>
        </member>
        <member name="P:Infragistics.Excel.PaneSettingsBase.FirstRowInBottomPane">
            <summary>
            Gets or sets the first visible row in the bottom pane(s) of the worksheet. 
            </summary>
            <remarks>
            <p class="body">
            This affects the scroll position for the bottom pane(s) of the worksheet and 
            is only used if the worksheet is split horizontally.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid row range (0 to one less than <see cref="F:Infragistics.Excel.Workbook.MaxExcelRowCount"/> or 
            <see cref="F:Infragistics.Excel.Workbook.MaxExcel2007RowCount"/>, depending on the workbook's 
            <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>).
            </exception>
            <value>The zero-based index of the first visible row in the bottom pane(s).</value>
        </member>
        <member name="M:Infragistics.Excel.FrozenPaneSettings.Reset">
            <summary>
            Resets the frozen pane settings to their defaults.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.FrozenPaneSettings.FrozenColumns">
            <summary>
            Gets or sets the number of columns frozen at the left of the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The frozen columns will always remain in view, regardless of the horizontal scroll position of 
            the worksheet.
            </p>
            <p class="note">
            <B>Note:</B> If the number of frozen columns specified is more than the amount of visible columns 
            in the worksheet, the worksheet may not scroll correctly.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is not a valid column count (0 to <see cref="F:Infragistics.Excel.Workbook.MaxExcelColumnCount"/> or 
            <see cref="F:Infragistics.Excel.Workbook.MaxExcel2007ColumnCount"/>, depending on the workbook's 
            <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>).
            </exception>
            <value>The number of columns frozen at the left of the worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.FrozenPaneSettings.FrozenRows">
            <summary>
            Gets or sets the number of rows frozen at the top of the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The frozen rows will always remain in view, regardless of the vertical scroll position of 
            the worksheet.
            </p>
            <p class="note">
            <B>Note:</B> If the number of frozen rows specified is more than the amount of visible rows 
            in the worksheet, the worksheet may not scroll correctly.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is not a valid row count (0 to <see cref="F:Infragistics.Excel.Workbook.MaxExcelRowCount"/> or 
            <see cref="F:Infragistics.Excel.Workbook.MaxExcel2007RowCount"/>, depending on the workbook's 
            <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>).
            </exception>
            <value>The number of rows frozen at the top of the worksheet.</value>
        </member>
        <member name="T:Infragistics.Excel.NamedReference">
            <summary>
            Represents a named reference defined in the workbook.
            </summary>
            <remarks>
            <p class="body">
            Named references allow for names to be used in formulas instead of complex formulas or cell references.
            For example, instead of using the formula =SUM(E1:E20), a named reference with a name of 'Sales' can be 
            defined to point to the range of E1:E20 (the named reference's formula would be defined like this: 
            =Sheet1!$E$1:$E$20). Then the original formula could be expressed as =SUM(Sales).
            </p>
            <p class="body">
            Each named reference has an associated scope, which can either be the <see cref="T:Infragistics.Excel.Workbook"/> 
            to which the named reference belongs or one of the <see cref="T:Infragistics.Excel.Worksheet"/> instances in the Workbook. The scope 
            determines how the name must be referenced in formulas for different cells. A scope of the workbook means
            the named reference must be accessed by a formula in any cell of the workbook by specifying only the name.
            A scope of the worksheet means formulas used in other worksheets must reference the name by first 
            specifying the worksheet scope, such as =SUM( Sheet2!Sales ). If the formula is in the same worksheet as 
            the scope of the named reference, the formula can reference the name with or without the worksheet name.
            </p>
            <p class="body">
            Named references from external workbooks must always be referenced with the scope first. If the named 
            reference's scope is the external workbook, the name is accessed by specifying the workbook file name
            followed by the name, such as in the following formula: ='C:\ExternalWorkbook.xls'!SalesTax. If the named
            reference has a scope of a worksheet in the workbook, it is referenced by specifying the file name, 
            worksheet, and name: ='C:\[ExternalWorkbook.xls]Sheet1'!SalesTax.
            </p>
            <p class="body">
            Named references with different scopes can have the same names, but if two named references have the same
            scope, they must have case-insensitively unique names.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.NamedReference.ToString">
            <summary>
            Gets the string representation of the named reference.
            </summary>
            <returns>The string representation of the named reference.</returns>
        </member>
        <member name="M:Infragistics.Excel.NamedReference.SetFormula(System.String)">
            <summary>
            Sets the formula for a named reference.
            </summary>
            <remarks>
            <p class="body">
            The formula will be parsed using the <see cref="T:Infragistics.Excel.CellReferenceMode"/> of the <see cref="T:Infragistics.Excel.Workbook"/> 
            to which the NamedReference is applied. If the NamedReference has been removed from its collection, the A1 reference mode 
            will be used to parse the formula.
            </p>
            </remarks>
            <param name="formula">The string containing the formula value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formula"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="formula"/> is not a valid formula. The inner exception will contain the <see cref="T:Infragistics.Excel.FormulaParseException"/>
            describing the reason the formula was not valid.
            </exception>
            <seealso cref="P:Infragistics.Excel.NamedReference.Formula"/>
        </member>
        <member name="M:Infragistics.Excel.NamedReference.SetFormula(System.String,Infragistics.Excel.CellReferenceMode)">
            <summary>
            Sets the formula for a named reference.
            </summary>
            <param name="formula">The string containing the formula value.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formula"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="formula"/> is not a valid formula. The inner exception will contain the <see cref="T:Infragistics.Excel.FormulaParseException"/>
            describing the reason the formula was not valid.
            </exception>
            <seealso cref="P:Infragistics.Excel.NamedReference.Formula"/>
        </member>
        <member name="M:Infragistics.Excel.NamedReference.SetFormula(System.String,Infragistics.Excel.CellReferenceMode,System.Globalization.CultureInfo)">
            <summary>
            Sets the formula for a named reference.
            </summary>
            <param name="formula">The string containing the formula value.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="culture">The culture used to parse the formula.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formula"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="formula"/> is not a valid formula. The inner exception will contain the <see cref="T:Infragistics.Excel.FormulaParseException"/>
            describing the reason the formula was not valid.
            </exception>
            <seealso cref="P:Infragistics.Excel.NamedReference.Formula"/>
        </member>
        <member name="P:Infragistics.Excel.NamedReference.Comment">
            <summary>
            Gets or sets the comment associated with the named reference.
            </summary>
            <exception cref="T:System.ArgumentException">
            The value assigned is greater than 255 characters in length.
            </exception>
            <value>The comment associated with the named reference.</value>
        </member>
        <member name="P:Infragistics.Excel.NamedReference.Formula">
            <summary>
            Gets the formula which defines the named reference.
            </summary>
            <value>The formula which defines the named reference.</value>
            <seealso cref="M:Infragistics.Excel.NamedReference.SetFormula(System.String)"/>
            <seealso cref="M:Infragistics.Excel.NamedReference.SetFormula(System.String,Infragistics.Excel.CellReferenceMode)"/>
        </member>
        <member name="T:Infragistics.Excel.ExcelResourceCustomizer">
            <summary>
            Class used to provide the ability to customize resource strings.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.ExcelResourceCustomizer.GetCustomizedString(System.String)">
            <summary>
            Gets the customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource that was customized.</param>
            <returns>The customized string or null if the resource wasn't customized.</returns>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.ExcelResourceCustomizer.ResetAllCustomizedStrings">
            <summary>
            Clears all strings customized by calls to <see cref="M:Infragistics.Excel.ExcelResourceCustomizer.SetCustomizedString(System.String,System.String)"/> method.
            </summary>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.ExcelResourceCustomizer.ResetCustomizedString(System.String)">
            <summary>
            Resets a customized string identified by the specified string resource name so that it will load from the resource file.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.ExcelResourceCustomizer.SetCustomizedString(System.String,System.String)">
            <summary>
            Sets a customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <param name="customizedText">The customized string. If null this has the same effect as calling <see cref="M:Infragistics.Excel.ExcelResourceCustomizer.ResetCustomizedString(System.String)"/>.</param>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="T:Infragistics.Excel.Resources">
            <summary>
            Exposes a <see cref="T:Infragistics.Excel.ExcelResourceCustomizer"/> instance for this assembly. 
            </summary>
            <seealso cref="P:Infragistics.Excel.Resources.Customizer"/> 
            <seealso cref="T:Infragistics.Excel.ExcelResourceCustomizer"/> 
        </member>
        <member name="M:Infragistics.Excel.Resources.GetString(System.String,System.Object[])">
            <summary>
            Returns the resource string using the specified name and default culture.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
            <returns>The resource string using the specified resource name and default culture.</returns>
        </member>
        <member name="M:Infragistics.Excel.Resources.GetString(System.String)">
            <summary>
            Returns the resource string using the specified resource name and default culture. The string is then formatted using the arguments specified.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <returns>The resource string using the specified resource name and default culture.</returns>
        </member>
        <member name="M:Infragistics.Excel.Resources.GetObject(System.String)">
            <summary>
            Returns the resource object using the specified name.
            </summary>
            <param name="name">Name of the resource item.</param>
            <returns>An object containing the specified resource.</returns>
        </member>
        <member name="P:Infragistics.Excel.Resources.Customizer">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.ExcelResourceCustomizer"/> for this assembly.
            </summary>
            <seealso cref="T:Infragistics.Excel.ExcelResourceCustomizer"/> 
        </member>
        <member name="T:Infragistics.Excel.RowColumnBase">
            <summary>
            Abstract base class for worksheet row and worksheet column.
            </summary>
            <seealso cref="T:Infragistics.Excel.WorksheetColumn"/>
            <seealso cref="T:Infragistics.Excel.WorksheetRow"/>
        </member>
        <member name="P:Infragistics.Excel.RowColumnBase.CellFormat">
            <summary>
            Gets the default cell format for cells in this row or column.
            </summary>
            <remarks>
            <p class="body">
            Any default properties of the cell's format will take their value from this format when getting a resolved format.
            </p>
            </remarks>
            <value>The default cell format for cells in this row or column.</value>
        </member>
        <member name="P:Infragistics.Excel.RowColumnBase.Expanded">
            <summary>
            Gets or sets the expanded state of the row or column.
            </summary>
            <remarks>
            <p class="body">This property is deprecated. Use <see cref="P:Infragistics.Excel.RowColumnBase.Hidden"/> instead.</p>
            <p class="note"><B>Note:</B> Hidden and Expanded are opposites (setting Expanded to True is equivalent to setting Hidden to False).</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.RowColumnBase.Hidden">
            <summary>
            Gets or sets the value indicating whether the row or column is hidden.
            </summary>
            <remarks>
            The Hidden state also controls the expanded state of rows or columns in outline groups. Basically, an outline group
            simply provides an easy way to hide and unhide all rows or columns in the group at the same time, via the expansion 
            indicator.
            </remarks>
            <value>The value indicating whether the row or column is hidden.</value>
            <seealso cref="P:Infragistics.Excel.RowColumnBase.OutlineLevel"/>
            <seealso cref="M:Infragistics.Excel.CustomView.GetHiddenColumns(Infragistics.Excel.Worksheet)"/>
            <seealso cref="M:Infragistics.Excel.CustomView.GetHiddenRows(Infragistics.Excel.Worksheet)"/>
        </member>
        <member name="P:Infragistics.Excel.RowColumnBase.Index">
            <summary>
            Gets the index of the row or column in the worksheet.
            </summary>
            <value>The index of the row or column in the worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.RowColumnBase.OutlineLevel">
            <summary>
            Gets or sets the outline level for the row or column.
            </summary>
            <remarks>
            <p class="body">
            Microsoft Excel supports hierarchical grouping of rows and columns with a maximum of seven levels of hierarchy. 
            To create a group, set adjacent rows or columns to same outline level. When rows or columns are grouped, an
            outline indicator will provide a visual representation of the outline level.  In addition, an outline group has
            an expansion indicator at one end of the group, which allows the user to easily hide and unhide all rows or column
            in the group with a single click.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the valid outline level range of 0 and 7.
            </exception>
            <value>The outline level for the row or column.</value>
            <seealso cref="P:Infragistics.Excel.RowColumnBase.Hidden"/>
        </member>
        <member name="P:Infragistics.Excel.RowColumnBase.Worksheet">
            <summary>
            Gets the worksheet to which the row or column belongs.
            </summary>
            <value>The worksheet to which the row or column belongs.</value>
        </member>
        <member name="T:Infragistics.Excel.RowColumnCollectionBase`1">
            <summary>
            Base class for row collection and column collection.
            </summary>
            <typeparam name="T">The type of item contained in the collection.</typeparam>
        </member>
        <member name="T:Infragistics.Excel.WorksheetItemCollection`1">
            <summary>
            Abstract base class for collections of the main worksheet elements (rows, columns, and cells).
            </summary>
            <remarks>
            <p class="body">
            Because of the large number of elements on a worksheet, this collection internally creates elements
            when they are requested. Iterating this collection will only iterate the elements which have already
            been created.
            </p>
            </remarks>
            <typeparam name="T">The type of item contained in the collection.</typeparam>
        </member>
        <member name="P:Infragistics.Excel.WorksheetItemCollection`1.MaxCount">
            <summary>
            Gets the maximum number of items allowed in this collection.
            </summary> 
        </member>
        <member name="T:Infragistics.Excel.UnfrozenPaneSettings">
            <summary>
            Class which controls the way unfrozen panes are arranged and used for a worksheet.
            </summary>
            <remarks>
            <p class="note">
            <B>Note:</B> Frozen and unfrozen panes cannot be used simultaneously, so depending whether the panes are 
            frozen or unfrozen, these settings may not be used or saved.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen"/>
            <seealso cref="T:Infragistics.Excel.FrozenPaneSettings"/>
        </member>
        <member name="M:Infragistics.Excel.UnfrozenPaneSettings.Reset">
            <summary>
            Resets the unfrozen pane settings to their defaults.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.UnfrozenPaneSettings.FirstColumnInLeftPane">
            <summary>
            Gets or sets the first visible column in the left pane(s) of the worksheet. 
            </summary>
            <remarks>
            <p class="body">
            This affects the scroll position for the left pane(s) of the worksheet and is used regardless of whether or not the 
            worksheet is split vertically.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid column range (0 to one less than <see cref="F:Infragistics.Excel.Workbook.MaxExcelColumnCount"/> or 
            <see cref="F:Infragistics.Excel.Workbook.MaxExcel2007ColumnCount"/>, depending on the workbook's 
            <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>).
            </exception>
            <value>The zero-based index of the first visible column in the left pane(s).</value>
        </member>
        <member name="P:Infragistics.Excel.UnfrozenPaneSettings.FirstRowInTopPane">
            <summary>
            Gets or sets the first visible row in the top pane(s) of the worksheet. 
            </summary>
            <remarks>
            <p class="body">
            This affects the scroll position for the top pane(s) of the worksheet and is used regardless of whether or not 
            the worksheet is split horizontally.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid row range (0 to one less than <see cref="F:Infragistics.Excel.Workbook.MaxExcelRowCount"/> or 
            <see cref="F:Infragistics.Excel.Workbook.MaxExcel2007RowCount"/>, depending on the workbook's 
            <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>).
            </exception>
            <value>The zero-based index of the first visible row in the top pane(s).</value>
        </member>
        <member name="P:Infragistics.Excel.UnfrozenPaneSettings.LeftPaneWidth">
            <summary>
            Gets or sets the width of the left pane in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            If this value is zero, the left pane occupies the entire visible area of the worksheet.
            Otherwise, the left pane occupies the specified width and the right pane occupies
            the remaining area of the worksheet.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the width specified is outside the valid width range (0 to 65535).
            </exception>
            <value>The width of the left pane, or zero if there is no horizontal pane split.</value>
        </member>
        <member name="P:Infragistics.Excel.UnfrozenPaneSettings.TopPaneHeight">
            <summary>
            Gets or sets the height of the top pane in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            If this value is zero, the top pane occupies the entire visible area of the worksheet.
            Otherwise, the top pane occupies the specified height and the bottom pane occupies
            the remaining area of the worksheet.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the height specified is outside the valid height range (0 to 65535).
            </exception>
            <value>The height of the top pane, or zero if there is no vertical pane split.</value>
        </member>
        <member name="T:Infragistics.Excel.UnknownShape">
            <summary>
            Represents an unsupported shape which has been loaded from a workbook file.
            </summary>
            <remarks>
            <p class="body">
            This class is used for round-tripping purposes, so unsupported shapes which have been
            loaded can be saved back out with the workbook.  The class allows the unsupported shapes 
            to be identified in shape collections so they can be removed. This shape will become 
            obsolete in future versions when all shape types are supported.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.UnknownShape.ClearUnknownData">
            <summary>
            Throws an exception because all data in an unknown shape is unknown, and clearing that data would leave 
            no data with the shape.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This method is called on an <see cref="T:Infragistics.Excel.UnknownShape"/> instance.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.Utilities.IsNumericType(System.Type)">
            <summary>
            Determines if a given System.Type is a numeric type.
            </summary>
            <param name="type">The System.Type to test.</param>
            <returns>True if the type is a numeric type.</returns>
        </member>
        <member name="M:Infragistics.Excel.Utilities.SortMerge(System.Collections.ArrayList,System.Collections.IComparer)">
            <summary>
            Sorts the passed in array list based on the passed in comparer using a modified merge-sort
            algorithm. 
            </summary>
            <param name="arrayList">The list to be sorted.</param>
            <param name="comparer">The comparer (must not be null).</param>
        </member>
        <member name="M:Infragistics.Excel.Utilities.SortMerge(System.Object[],System.Collections.IComparer)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. It requires allocation of an array equal in size to the array to be sorted.
            Merge sort should be used if the operation of comparing items is expensive.
            </summary>
            <param name="arr">Array to be sorted.</param>
            <param name="comparer">Comparer.</param>
        </member>
        <member name="M:Infragistics.Excel.Utilities.SortMerge(System.Object[],System.Object[],System.Collections.IComparer)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="arr">Array to be sorted.</param>
            <param name="tmpArr">Null or a temporary array equal (or greater) in size to arr.</param>
            <param name="comparer">Comparer.</param>
        </member>
        <member name="M:Infragistics.Excel.Utilities.SortMerge(System.Object[],System.Object[],System.Collections.IComparer,System.Int32,System.Int32)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="arr">Array to be sorted.</param>
            <param name="tmpArr">Null or a temporary array equal (or greater) in size to arr.</param>
            <param name="comparer">Comparer.</param>
            <param name="si">Start index in the array.</param>
            <param name="ei">End index in the array.</param>
        </member>
        <member name="M:Infragistics.Excel.Utilities.SortMergeGeneric``1(System.Collections.Generic.List{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the passed in list based on the passed in comparer using a modified merge-sort
            algorithm. 
            </summary>
            <param name="list">The list to be sorted.</param>
            <param name="comparer">The comparer (must not be null).</param>
        </member>
        <member name="M:Infragistics.Excel.Utilities.SortMergeGeneric``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. It requires allocation of an array equal in size to the array to be sorted.
            Merge sort should be used if the operation of comparing items is expensive.
            </summary>
            <param name="arr"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Infragistics.Excel.Utilities.SortMergeGeneric``1(``0[],``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="arr">Array to be sorted.</param>
            <param name="tmpArr">Null or a temporary array equal (or greater) in size to arr.</param>
            <param name="comparer">Comparer.</param>
        </member>
        <member name="M:Infragistics.Excel.Utilities.SortMergeGeneric``1(``0[],``0[],System.Collections.Generic.IComparer{``0},System.Int32,System.Int32)">
            <summary>
            Sorts the passed in array based on the passed in comparer using a modified merge-sort
            algorithm. Optionally you can pass in a temporary array equal (or greater) in size to arr. 
            The method will make use of that array instead of allocating one. If null is passed in, 
            then it will allocate one. Merge sort should be used if the operation of comparing items 
            is expensive.
            </summary>
            <param name="arr">Array to be sorted.</param>
            <param name="tmpArr">Null or a temporary array equal (or greater) in size to arr.</param>
            <param name="comparer">Comparer.</param>
            <param name="si">Start index in the array.</param>
            <param name="ei">End index in the array.</param>
        </member>
        <member name="M:Infragistics.Excel.Utilities.GetWorksheet(Infragistics.Excel.Serialization.ContextStack)">
            <summary>
            Gets a Worksheet off the specified ContextStack by popping
            the ChildDataItem off the stack, then returning the value of the Data
            property as type Worksheet.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Utilities.ConvertST_SystemColorValToSystemColor(Infragistics.Excel.Serialization.Excel2007.ST_SystemColorVal)">
            <summary>
            Converts the provided ST_SystemColorVal to a Color using SystemColors
            </summary>
            <param name="value">The System Color Value Simple-Type value</param>
            <returns>Returns a Color based on System.Drawing.SystemColors</returns>
        </member>
        <member name="M:Infragistics.Excel.Utilities.FromUnsignedIntHex(System.String)">
            <summary>
            Returns an Int32 value from the specified string, implied
            to be conformant with the pattern expected for the
            ST_UnsignedIntHex data type.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Utilities.ToUnsignedIntHex(System.Int32)">
            <summary>
            Returns a string that is compatible with the ST_UnsignedIntHex
            data type from the specified integer value.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Utilities.FromHexBinary3(System.String)">
            <summary>
            Returns an Int32 value from the specified string, implied
            to be conformant with the pattern expected for the
            ST_HexBinary3 data type.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Utilities.ToHexBinary3(System.Drawing.Color)">
            <summary>
            Returns a string that is compatible with the ST_HexBinary3
            data type from the specified color value.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.Workbook">
            <summary>
            Represents a Microsoft Excel workbook.
            </summary>
            <remarks>
            <p class="body">Every workbook consists of one or more worksheets (<see cref="T:Infragistics.Excel.Worksheet"/>). The default constructor creates an empty workbook.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.Workbook.MaxExcel2007RowCount">
            <summary>
            Maximum number of rows in the worksheet allowed by the Excel 2007 file format.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Workbook.MaxExcel2007ColumnCount">
            <summary>
            Maximum number of columns in the worksheet allowed by the Excel 2007 file format.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Workbook.MaxExcelRowCount">
            <summary>
            Maximum number of rows in the worksheet allowed by the Excel 97-2003 file format.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Workbook.MaxExcelColumnCount">
            <summary>
            Maximum number of columns in the worksheet allowed by the Excel 97-2003 file format.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Workbook.MaxExcelColorCount">
            <summary>
            Maximum number of colors in the workbook allowed by Excel.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Workbook.MaxExcelCellFormatCount">
            <summary>
            Maximum number of distinct cell formats in the workbook allowed by the Excel 97-2003 file format.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Workbook.MaxExcel2007CellFormatCount">
            <summary>
            Maximum number of distinct cell formats in the workbook allowed by the Excel 2007 file format.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Workbook.MaxExcelWorkbookFonts">
            <summary>
            Maximum number fonts in a workbook allowed by Excel.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Workbook.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Excel.Workbook"/> class.
            </summary>
            <remarks>
            <p class="body">
            The new workbook created is empty. At least one <see cref="T:Infragistics.Excel.Worksheet"/> must be added to it before 
            it can be saved.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Excel.Workbook.Worksheets"/>
        </member>
        <member name="M:Infragistics.Excel.Workbook.#ctor(Infragistics.Excel.WorkbookFormat)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Excel.Workbook"/> class.
            </summary>
            <param name="format">The file format to use when imposing format restrictions and saving.</param>
            <remarks>
            <p class="body">
            The new workbook created is empty. At least one <see cref="T:Infragistics.Excel.Worksheet"/> must be added to it before 
            it can be saved.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="format"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <seealso cref="P:Infragistics.Excel.Workbook.Worksheets"/>
        </member>
        <member name="M:Infragistics.Excel.Workbook.#ctor(Infragistics.Excel.WorkbookPaletteMode)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Excel.Workbook"/> class.
            </summary>
            <param name="paletteMode">Determines which palette to use when exporting.</param>
            <remarks>
            <p class="body">
            The new workbook created is empty. At least one <see cref="T:Infragistics.Excel.Worksheet"/> must be added to it before 
            it can be saved.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="paletteMode"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookPaletteMode"/> enumeration.
            </exception>
            <seealso cref="P:Infragistics.Excel.Workbook.Worksheets"/>
        </member>
        <member name="M:Infragistics.Excel.Workbook.#ctor(Infragistics.Excel.WorkbookFormat,Infragistics.Excel.WorkbookPaletteMode)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Excel.Workbook"/> class.
            </summary>
            <param name="format">The file format to use when imposing format restrictions and saving.</param>
            <param name="paletteMode">Determines which palette to use when exporting.</param>
            <remarks>
            <p class="body">
            The new workbook created is empty. At least one <see cref="T:Infragistics.Excel.Worksheet"/> must be added to it before 
            it can be saved.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="format"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="paletteMode"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookPaletteMode"/> enumeration.
            </exception>
            <seealso cref="P:Infragistics.Excel.Workbook.Worksheets"/>
        </member>
        <member name="M:Infragistics.Excel.Workbook.CreateNewWorkbookFont">
            <summary>
            Factory method which creates new workbook font.
            </summary>
            <remarks>
            <p class="body"><see cref="T:Infragistics.Excel.IWorkbookFont"/> describes font used in excel workbook.
            If many parts of excel workbook have same and complex (more than one property in common) font formatting, use this method in following manner: 
            <ol>
            <li class="taskitem"><span class="taskitemtext">Create new font format with <see cref="M:Infragistics.Excel.Workbook.CreateNewWorkbookFont"/>,</span></li>
            <li class="taskitem"><span class="taskitemtext">Set all necessary properties on given font format,</span></li>
            <li class="taskitem"><span class="taskitemtext">Apply font format to all excel objects which use it with <see cref="M:Infragistics.Excel.IWorkbookFont.SetFontFormatting(Infragistics.Excel.IWorkbookFont)"/> method.</span></li>
            </ol></p>
            <p class="body">Use of this procedure will simplify you code for complex font formats and increase speed of resulting program. It will not reduce total number of font formats in a workbook as font formats are internally cached no mather which method is used.</p>
            </remarks>
            <returns>The created excel font object.</returns>
        </member>
        <member name="M:Infragistics.Excel.Workbook.CreateNewWorksheetCellFormat">
            <summary>
            Creates new worksheet cell format.
            </summary>
            <returns>The cell format which was created.</returns>
            <remarks>
            <p class="body"><see cref="T:Infragistics.Excel.IWorksheetCellFormat"/> describes cell specific formatting (font, number format, appearance etc.). Total number of different cell formats in excel workbook is limited to <see cref="F:Infragistics.Excel.Workbook.MaxExcelCellFormatCount"/>. 
            If many parts of excel workbook have same and complex (more than one property in common) cell formatting, use this method in following manner: 
            <ol>
            <li class="taskitem"><span class="taskitemtext">Create new cell format with <see cref="M:Infragistics.Excel.Workbook.CreateNewWorksheetCellFormat"/>,</span></li>
            <li class="taskitem"><span class="taskitemtext">Set all necessary properties on given cell format,</span></li>
            <li class="taskitem"><span class="taskitemtext">Apply cell format to all excel objects which use it with <see cref="M:Infragistics.Excel.IWorksheetCellFormat.SetFormatting(Infragistics.Excel.IWorksheetCellFormat)"/> method.</span></li>
            </ol></p>
            <p class="body">Use of this procedure will simplify you code for complex cell formats and increase speed of resulting program. It will not reduce total number of cell formats in a workbook as cell formats are internally cached no mather which method is used.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.Workbook.Recalculate">
            <summary>
            Recalculates all formulas on the workbook.
            </summary>
            <remarks>
            <p class="body">
            This can be used when the <see cref="P:Infragistics.Excel.Workbook.CalculationMode"/> is Manual. In Manual mode, when cells are dirtied, formuals referencing
            those cells will not be recaluclated until Recalculate is called or <see cref="P:Infragistics.Excel.Workbook.RecalculateBeforeSave"/> is True and the workbook is saved.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Excel.Workbook.CalculationMode"/>
            <seealso cref="P:Infragistics.Excel.Workbook.RecalculateBeforeSave"/>
        </member>
        <member name="M:Infragistics.Excel.Workbook.RegisterUserDefinedFunctionLibrary(System.Reflection.Assembly)">
            <summary>
            Registers an assembly containing <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcFunction"/> derived types.
            </summary>
            <param name="assembly">Loaded assembly to register</param>
            <returns>Returns true if the assembly was registered successfully, else false if the registration failed</returns>
            <remarks>
            <p class="body">
            All types within the registered assembly are enumerated and any that derive from <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcFunction"/> class are added to the list of available formula functions
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.Workbook.RegisterUserDefinedFunction(Infragistics.Excel.CalcEngine.ExcelCalcFunction)">
            <summary>
            Registers a single <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcFunction"/> instance.
            </summary>
            <param name="userDefinedFunction">User defined function instance to register</param>
            <returns>Returns true if the type was registered successfully, else false if the registration failed</returns>
            <remarks>
            <p class="body">
            Users can build custom functions used in formulas by sub-classing the <see cref="T:Infragistics.Excel.CalcEngine.ExcelCalcFunction"/> class.  
            Once the derived class is instaniated it must be registered by using the RegisterUserDefinedFunction method before being avilable and referenced by a formulas.
            Users can build a library of functions packaged in an assembly and register all the functions within the assembly by using the <see cref="M:Infragistics.Excel.Workbook.RegisterUserDefinedFunctionLibrary(System.Reflection.Assembly)"/> method.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.Workbook.ResumeCalculations">
            <summary>
            Resumes the calculation of formulas.
            </summary>
            <remarks>
            <p class="body">
            If calculations were not suspended when this is called, it will have no effect.
            </p>
            <p class="body">
            For each call to <see cref="M:Infragistics.Excel.Workbook.SuspendCalculations"/>, a call to ResumeCalculations must be made. As soon as the number of calls to 
            ResumeCalculations equals the number of calls to SuspendCalculations, calculations will be resumed.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Excel.Workbook.SuspendCalculations"/>
        </member>
        <member name="M:Infragistics.Excel.Workbook.Save(System.String)">
            <summary>
            Writes the workbook to a file.
            </summary>
            <remarks>
            <p class="body">
            The workbook will be written in the format specified by the <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>.
            </p>
            <p class="body">
            The <paramref name="fileName"/> specified should have an extension corresponding to the current format so it can be opened in Microsoft Excel 
            by default (if it is installed).
            </p>
            <p class="note">
            <B>Note:</B> This method creates a <see cref="T:System.IO.FileStream"/> using the 
            <a href="http://msdn2.microsoft.com/en-us/library/tyhc0kft.aspx">FileStream(string, FileMode, FileAccess)</a> overload of the constructor.
            See the remarks section of this overload to for the exceptions that could be thrown.
            </p>
            </remarks>
            <param name="fileName">The file to write the workbook to.</param>
            <exception cref="T:System.InvalidOperationException">
            The workbook has no worksheets in its <see cref="P:Infragistics.Excel.Workbook.Worksheets"/> collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No worksheet in this workbook's Worksheets collection has its <see cref="P:Infragistics.Excel.DisplayOptions.Visibility"/> 
            set to Visible. At least one worksheet in the workbook must be visible.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A <see cref="T:Infragistics.Excel.CustomView"/> in the workbook's <see cref="P:Infragistics.Excel.Workbook.CustomViews"/> collection has all worksheets hidden.
            At least one worksheet must be visible in all custom views.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.Workbook.Save(System.String,Infragistics.Excel.IPackageFactory)">
            <summary>
            Writes the workbook to a file.
            </summary>
            <remarks>
            <p class="body">
            The workbook will be written in the format specified by the <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>.
            </p>
            <p class="body">
            The <paramref name="fileName"/> specified should have an extension corresponding to the current format so it can be opened in Microsoft Excel 
            by default (if it is installed).
            </p>
            <p class="note">
            <B>Note:</B> This method creates a <see cref="T:System.IO.FileStream"/> using the 
            <a href="http://msdn2.microsoft.com/en-us/library/tyhc0kft.aspx">FileStream(string, FileMode, FileAccess)</a> overload of the constructor.
            See the remarks section of this overload to for the exceptions that could be thrown.
            </p>
            </remarks>
            <param name="fileName">The file to write the workbook to.</param>
            <param name="packageFactory">An IPackageFactory which can be used to open an IPackage from a stream.</param>
            <exception cref="T:System.InvalidOperationException">
            The workbook has no worksheets in its <see cref="P:Infragistics.Excel.Workbook.Worksheets"/> collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No worksheet in this workbook's Worksheets collection has its <see cref="P:Infragistics.Excel.DisplayOptions.Visibility"/> 
            set to Visible. At least one worksheet in the workbook must be visible.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A <see cref="T:Infragistics.Excel.CustomView"/> in the workbook's <see cref="P:Infragistics.Excel.Workbook.CustomViews"/> collection has all worksheets hidden.
            At least one worksheet must be visible in all custom views.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.Workbook.Save(System.IO.Stream)">
            <summary>
            Writes the workbook to a stream.
            </summary>
            <remarks>
            <p class="body">
            The workbook will be written in the format specified by the <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>.
            </p>
            </remarks>
            <param name="stream">The stream to write the workbook to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The workbook has no worksheets in its <see cref="P:Infragistics.Excel.Workbook.Worksheets"/> collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No worksheet in this workbook's Worksheets collection has its <see cref="P:Infragistics.Excel.DisplayOptions.Visibility"/> 
            set to Visible.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A <see cref="T:Infragistics.Excel.CustomView"/> in the workbook's <see cref="P:Infragistics.Excel.Workbook.CustomViews"/> collection has all worksheets hidden.
            At least one worksheet must be visible in all custom views.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.Workbook.Save(System.IO.Stream,Infragistics.Excel.IPackageFactory)">
            <summary>
            Writes the workbook to a stream.
            </summary>
            <remarks>
            <p class="body">
            The workbook will be written in the format specified by the <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>.
            </p>
            </remarks>
            <param name="stream">The stream to write the workbook to.</param>
            <param name="packageFactory">An IPackageFactory which can be used to open an IPackage from a stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The workbook has no worksheets in its <see cref="P:Infragistics.Excel.Workbook.Worksheets"/> collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No worksheet in this workbook's Worksheets collection has its <see cref="P:Infragistics.Excel.DisplayOptions.Visibility"/> 
            set to Visible.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A <see cref="T:Infragistics.Excel.CustomView"/> in the workbook's <see cref="P:Infragistics.Excel.Workbook.CustomViews"/> collection has all worksheets hidden.
            At least one worksheet must be visible in all custom views.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.Workbook.SetCurrentFormat(Infragistics.Excel.WorkbookFormat)">
            <summary>
            Sets the current format of the workbook.
            </summary>
            <param name="format">The file format to use when imposing format restrictions and saving.</param>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="format"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookFormat"/> enumeration.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The workbook already contains data which exceeds the limits imposed by <paramref name="format"/>.
            </exception>
            <seealso cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>
        </member>
        <member name="M:Infragistics.Excel.Workbook.SuspendCalculations">
            <summary>
            Temporarily suspends the calculation of formulas.
            </summary>
            <remarks>
            <p class="body">
            This should be used when adding many formulas or modifying large amounts of data on a workbook at once so formulas are not calculated 
            each time cells are dirtied.
            </p>
            <p class="body">
            For each call to SuspendCalculations, a call to <see cref="M:Infragistics.Excel.Workbook.ResumeCalculations"/> must be made. As soon as the number of calls to 
            ResumeCalculations equals the number of calls to SuspendCalculations, calculations will be resumed.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Excel.Workbook.ResumeCalculations"/>
        </member>
        <member name="M:Infragistics.Excel.Workbook.Load(System.String)">
            <summary>
            Reads a workbook from a file.
            </summary>
            <remarks>
            <p class="body">
            When loading the workbook, the format will be determined the file extension or by the contents of the file. If the extension is
            a stanard Excel format entension, the workbook will be assumed to be in the corresponding format. Otherwise, the contents of the
            file will be examined to try to determine the format. The <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/> of the returned workbook will indicate the
            format the workbook was loaded from.
            </p>
            <p class="note">
            <B>Note:</B> This method creates a <see cref="T:System.IO.FileStream"/> using the 
            <a href="http://msdn2.microsoft.com/en-us/library/47ek66wy.aspx">FileStream(string, FileMode)</a> overload of the constructor.  
            See the remarks section of this overload for the exceptions that could be thrown.
            </p>
            </remarks>
            <param name="fileName">The file from which to read the workbook.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="fileName"/> is a path to an invalid Microsoft Excel file.
            </exception>
            <exception cref="T:System.ArgumentException">
            The file format cannot be determined from the specified file.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The format of the workbook data is in an unsupported format.
            </exception>
            <exception cref="T:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceException">
            (<see cref="T:Infragistics.Excel.WorkbookFormat">Excel2007</see>-format specific)
            Thrown when the markup which contains the SpreadsheetML data is determined to be
            non-compliant with the rules defined in Part 2 of the 'Office Open XML - Open Packaging Conventions'
            document (see final draft, <a href="http://www.ecma-international.org">ECMA</a> document TC45).
            </exception>
            <exception cref="T:System.NotSupportedException">
            The workbook being loaded is in an Excel 2007 format and the CLR 2.0 Excel assembly is being used. The overload taking an 
            <see cref="T:Infragistics.Excel.IPackageFactory"/> must be used in this case so the Excel 2007 file package can be accessed.
            </exception>
            <returns>The workbook loaded from the file.</returns>        
        </member>
        <member name="M:Infragistics.Excel.Workbook.Load(System.String,System.Boolean)">
            <summary>
            Reads a workbook from a file.
            </summary>
            <remarks>
            <p class="body">
            When loading the workbook, the format will be determined the file extension or by the contents of the file. If the extension is
            a stanard Excel format entension, the workbook will be assumed to be in the corresponding format. Otherwise, the contents of the
            file will be examined to try to determine the format. The <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/> of the returned workbook will indicate the
            format the workbook was loaded from.
            </p>
            <p class="note">
            <B>Note:</B> This method creates a <see cref="T:System.IO.FileStream"/> using the 
            <a href="http://msdn2.microsoft.com/en-us/library/47ek66wy.aspx">FileStream(string, FileMode)</a> overload of the constructor.  
            See the remarks section of this overload for the exceptions that could be thrown.
            </p>
            </remarks>
            <param name="fileName">The file from which to read the workbook.</param>        
            <param name="verifyExcel2007Xml">A boolean specifying whether or not to verify the contents of the markup against the rules defined in Part 2 of the 'Office Open XML - Open Packaging Conventions' document (see final draft, <a href="http://www.ecma-international.org">ECMA</a> document TC45).</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="fileName"/> is a path to an invalid Microsoft Excel file.
            </exception>
            <exception cref="T:System.ArgumentException">
            The file format cannot be determined from the specified file.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The format of the workbook data is in an unsupported format.
            </exception>
            <exception cref="T:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceException">
            (<see cref="T:Infragistics.Excel.WorkbookFormat">Excel2007</see>-format specific)
            Thrown when the markup which contains the SpreadsheetML data is determined to be
            non-compliant with the rules defined in Part 2 of the 'Office Open XML - Open Packaging Conventions'
            document (see final draft, <a href="http://www.ecma-international.org">ECMA</a> document TC45).
            </exception>
            <exception cref="T:System.NotSupportedException">
            The workbook being loaded is in an Excel 2007 format and the CLR 2.0 Excel assembly is being used. The overload taking an 
            <see cref="T:Infragistics.Excel.IPackageFactory"/> must be used in this case so the Excel 2007 file package can be accessed.
            </exception>
            <returns>The workbook loaded from the file.</returns>        
        </member>
        <member name="M:Infragistics.Excel.Workbook.Load(System.String,Infragistics.Excel.IPackageFactory)">
            <summary>
            Reads a workbook from a file.
            </summary>
            <remarks>
            <p class="body">
            When loading the workbook, the format will be determined the file extension or by the contents of the file. If the extension is
            a stanard Excel format entension, the workbook will be assumed to be in the corresponding format. Otherwise, the contents of the
            file will be examined to try to determine the format. The <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/> of the returned workbook will indicate the
            format the workbook was loaded from.
            </p>
            <p class="note">
            <B>Note:</B> This method creates a <see cref="T:System.IO.FileStream"/> using the 
            <a href="http://msdn2.microsoft.com/en-us/library/47ek66wy.aspx">FileStream(string, FileMode)</a> overload of the constructor.  
            See the remarks section of this overload for the exceptions that could be thrown.
            </p>
            </remarks>
            <param name="fileName">The file from which to read the workbook.</param>
            <param name="packageFactory">An IPackageFactory which can be used to open an IPackage from a stream.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="fileName"/> is a path to an invalid Microsoft Excel file.        
            </exception>
            <exception cref="T:System.ArgumentException">
            The file format cannot be determined from the specified file.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The format of the workbook data is in an unsupported format.
            </exception>
            <exception cref="T:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceException">
            (<see cref="T:Infragistics.Excel.WorkbookFormat">Excel2007</see>-format specific)
            Thrown when the markup which contains the SpreadsheetML data is determined to be
            non-compliant with the rules defined in Part 2 of the 'Office Open XML - Open Packaging Conventions'
            document (see final draft, <a href="http://www.ecma-international.org">ECMA</a> document TC45).
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="packageFactory"/> is null and the workbook being loaded is in an Excel 2007 format and the CLR 2.0 Excel assembly is 
            being used. An <see cref="T:Infragistics.Excel.IPackageFactory"/> must be specified so the Excel 2007 file package can be accessed.
            </exception>
            <returns>The workbook loaded from the file.</returns>        
        </member>
        <member name="M:Infragistics.Excel.Workbook.Load(System.String,Infragistics.Excel.IPackageFactory,System.Boolean)">
            <summary>
            Reads a workbook from a file.
            </summary>
            <remarks>
            <p class="body">
            When loading the workbook, the format will be determined the file extension or by the contents of the file. If the extension is
            a stanard Excel format entension, the workbook will be assumed to be in the corresponding format. Otherwise, the contents of the
            file will be examined to try to determine the format. The <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/> of the returned workbook will indicate the
            format the workbook was loaded from.
            </p>
            <p class="note">
            <B>Note:</B> This method creates a <see cref="T:System.IO.FileStream"/> using the 
            <a href="http://msdn2.microsoft.com/en-us/library/47ek66wy.aspx">FileStream(string, FileMode)</a> overload of the constructor.  
            See the remarks section of this overload for the exceptions that could be thrown.
            </p>
            </remarks>
            <param name="fileName">The file from which to read the workbook.</param>
            <param name="packageFactory">An IPackageFactory which can be used to open an IPackage from a stream.</param>
            <param name="verifyExcel2007Xml">A boolean specifying whether or not to verify the contents of the markup against the rules defined in Part 2 of the 'Office Open XML - Open Packaging Conventions' document (see final draft, <a href="http://www.ecma-international.org">ECMA</a> document TC45).</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="fileName"/> is a path to an invalid Microsoft Excel file.        
            </exception>
            <exception cref="T:System.ArgumentException">
            The file format cannot be determined from the specified file.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The format of the workbook data is in an unsupported format.
            </exception>
            <exception cref="T:Infragistics.Excel.Serialization.Excel2007.OpenPackagingNonConformanceException">
            (<see cref="T:Infragistics.Excel.WorkbookFormat">Excel2007</see>-format specific)
            Thrown when the markup which contains the SpreadsheetML data is determined to be
            non-compliant with the rules defined in Part 2 of the 'Office Open XML - Open Packaging Conventions'
            document (see final draft, <a href="http://www.ecma-international.org">ECMA</a> document TC45).
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="packageFactory"/> is null and the workbook being loaded is in an Excel 2007 format and the CLR 2.0 Excel assembly is 
            being used. An <see cref="T:Infragistics.Excel.IPackageFactory"/> must be specified so the Excel 2007 file package can be accessed.
            </exception>
            <returns>The workbook loaded from the file.</returns>        
        </member>
        <member name="M:Infragistics.Excel.Workbook.Load(System.IO.Stream)">
            <summary>
            Reads a workbook from a stream.
            </summary>
            <remarks>
            <p class="body">
            When loading the workbook, the format will be determined the file extension or by the contents of the file. If a FileStream is 
            specified, the extension of the file will be examined. If the extension is a stanard Excel format entension, the workbook will 
            be assumed to be in the corresponding format. Otherwise, the contents of the file will be examined to try to determine the format. 
            The <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/> of the returned workbook will indicate the format the workbook was loaded from.
            </p>
            </remarks>
            <param name="stream">The stream to read the workbook from.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> does not contain valid Microsoft Excel file contents.
            </exception>
            <exception cref="T:System.ArgumentException">
            The file format cannot be determined from the specified stream.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The format of the workbook data is in an unsupported format.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The workbook being loaded is in an Excel 2007 format and the CLR 2.0 Excel assembly is being used. The overload taking an 
            <see cref="T:Infragistics.Excel.IPackageFactory"/> must be used in this case so the Excel 2007 file package can be accessed.
            </exception>
            <returns>The workbook loaded from the stream.</returns>
        </member>
        <member name="M:Infragistics.Excel.Workbook.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Reads a workbook from a stream.
            </summary>
            <remarks>
            <p class="body">
            When loading the workbook, the format will be determined the file extension or by the contents of the file. If a FileStream is 
            specified, the extension of the file will be examined. If the extension is a stanard Excel format entension, the workbook will 
            be assumed to be in the corresponding format. Otherwise, the contents of the file will be examined to try to determine the format. 
            The <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/> of the returned workbook will indicate the format the workbook was loaded from.
            </p>
            </remarks>
            <param name="stream">The stream to read the workbook from.</param>
            <param name="verifyExcel2007Xml">A boolean specifying whether or not to verify the contents of the markup against the rules defined in Part 2 of the 'Office Open XML - Open Packaging Conventions' document (see final draft, <a href="http://www.ecma-international.org">ECMA</a> document TC45).</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> does not contain valid Microsoft Excel file contents.
            </exception>
            <exception cref="T:System.ArgumentException">
            The file format cannot be determined from the specified stream.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The format of the workbook data is in an unsupported format.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The workbook being loaded is in an Excel 2007 format and the CLR 2.0 Excel assembly is being used. The overload taking an 
            <see cref="T:Infragistics.Excel.IPackageFactory"/> must be used in this case so the Excel 2007 file package can be accessed.
            </exception>
            <returns>The workbook loaded from the stream.</returns>
        </member>
        <member name="M:Infragistics.Excel.Workbook.Load(System.IO.Stream,Infragistics.Excel.IPackageFactory)">
            <summary>
            Reads a workbook from a stream.
            </summary>
            <remarks>
            <p class="body">
            When loading the workbook, the format will be determined the file extension or by the contents of the file. If a FileStream is 
            specified, the extension of the file will be examined. If the extension is a stanard Excel format entension, the workbook will 
            be assumed to be in the corresponding format. Otherwise, the contents of the file will be examined to try to determine the format. 
            The <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/> of the returned workbook will indicate the format the workbook was loaded from.
            </p>
            </remarks>
            <param name="stream">The stream to read the workbook from.</param>
            <param name="packageFactory">An IPackageFactory which can be used to open an IPackage from a stream.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> does not contain valid Microsoft Excel file contents.
            </exception>
            <exception cref="T:System.ArgumentException">
            The file format cannot be determined from the specified stream.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The format of the workbook data is in an unsupported format.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="packageFactory"/> is null and the workbook being loaded is in an Excel 2007 format and the CLR 2.0 Excel assembly is 
            being used. An <see cref="T:Infragistics.Excel.IPackageFactory"/> must be specified so the Excel 2007 file package can be accessed.
            </exception>
            <returns>The workbook loaded from the stream.</returns>
        </member>
        <member name="M:Infragistics.Excel.Workbook.Load(System.IO.Stream,Infragistics.Excel.IPackageFactory,System.Boolean)">
            <summary>
            Reads a workbook from a stream.
            </summary>
            <remarks>
            <p class="body">
            When loading the workbook, the format will be determined the file extension or by the contents of the file. If a FileStream is 
            specified, the extension of the file will be examined. If the extension is a stanard Excel format entension, the workbook will 
            be assumed to be in the corresponding format. Otherwise, the contents of the file will be examined to try to determine the format. 
            The <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/> of the returned workbook will indicate the format the workbook was loaded from.
            </p>
            </remarks>
            <param name="stream">The stream to read the workbook from.</param>
            <param name="packageFactory">An IPackageFactory which can be used to open an IPackage from a stream.</param>
            <param name="verifyExcel2007Xml">A boolean specifying whether or not to verify the contents of the markup against the rules defined in Part 2 of the 'Office Open XML - Open Packaging Conventions' document (see final draft, <a href="http://www.ecma-international.org">ECMA</a> document TC45).</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> does not contain valid Microsoft Excel file contents.
            </exception>
            <exception cref="T:System.ArgumentException">
            The file format cannot be determined from the specified stream.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The format of the workbook data is in an unsupported format.
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="packageFactory"/> is null and the workbook being loaded is in an Excel 2007 format and the CLR 2.0 Excel assembly is 
            being used. An <see cref="T:Infragistics.Excel.IPackageFactory"/> must be specified so the Excel 2007 file package can be accessed.
            </exception>
            <returns>The workbook loaded from the stream.</returns>
        </member>
        <member name="M:Infragistics.Excel.Workbook.GetWorkbookFormat(System.String)">
            <summary>
            Returns the WorkbookFormat based on the file extenstion of the specified file. 
            </summary>
            <param name="fileName">The filename of an excel file.</param>
            <returns>The workbook format based on the file extension of the file, or null if the correct format cannot be determined.</returns>
        </member>
        <member name="M:Infragistics.Excel.Workbook.GetMaxColumnCount(Infragistics.Excel.WorkbookFormat)">
            <summary>
            Returns the number of columns that are supported by the specified format.
            </summary>
            <param name="format">The format used by the workbook.</param>
            <returns>The maximum number of columns supported by the format.</returns>
        </member>
        <member name="M:Infragistics.Excel.Workbook.GetMaxRowCount(Infragistics.Excel.WorkbookFormat)">
            <summary>
            Returns the number of rows that are supported by the specified format.
            </summary>
            <param name="format">The format used by the workbook.</param>
            <returns>The maximum number of rows supported by the format.</returns>
        </member>
        <member name="M:Infragistics.Excel.Workbook.IsValidFunctionName(System.String)">
            <summary>
            Gets a value indicating whether the specified function will be recognized and solved by Microsoft Excel when the workbook is saved out.
            </summary>
            <param name="functionName">The case-insensitive name of the function.</param>
            <returns>True if the function will be recognized in Microsoft Excel; False otherwise.</returns>
        </member>
        <member name="P:Infragistics.Excel.Workbook.ActiveWorksheet">
            <summary>
            Gets or sets the active worksheet.
            </summary>
            <remarks>
            <p class="body">This property is deprecated. Use <see cref="P:Infragistics.Excel.WindowOptions.SelectedWorksheet"/> instead.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.Workbook.CalculationMode">
            <summary>
            Gets or sets the value which indicates how a formula will be recalculated when a referenced value changes.
            </summary>
            <remarks>
            <p class="body">
            If this is set to a value of Manual, the <see cref="P:Infragistics.Excel.Workbook.RecalculateBeforeSave"/> property will determine
            if formulas are recalculated just before saving the file.  Otherwise, that property is ignored.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Infragistics.Excel.CalculationMode"/> enumeration.
            </exception>
            <value>The value which indicates how a formula will be recalculated when a referenced value changes.</value>
            <seealso cref="P:Infragistics.Excel.Workbook.RecalculateBeforeSave"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.CellReferenceMode">
            <summary>
            Gets or sets the value which indicates the way cells in the workbook are referenced.
            </summary>
            <remarks>
            <p class="body">
            The value of this property will affect the row and columns labels of the workbook when opened in Microsoft Excel.
            In addition, it will affect the display of formulas referencing different cells.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <value>The value which indicates the way cells in the workbook are referenced.</value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.CurrentFormat">
            <summary>
            Gets the current format of the workbook. This is the format which will be used when saving and imposing format restricions.
            </summary>
            <seealso cref="M:Infragistics.Excel.Workbook.SetCurrentFormat(Infragistics.Excel.WorkbookFormat)"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.CustomViews">
            <summary>
            Gets the collection of custom views for the workbook.
            </summary>
            <remarks>
            <p class="body">
            Each custom view stores display settings and optionally print settings, which can later be applied to the workbook
            and its worksheets as one operation, through both the Microsoft Excel UI and the Excel assembly by calling the 
            <see cref="M:Infragistics.Excel.CustomView.Apply"/> method.
            </p>
            </remarks>
            <value>The collection of custom views for the workbook.</value>
            <seealso cref="T:Infragistics.Excel.CustomView"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.DateSystem">
            <summary>
            Gets or sets the date system used internally by Microsoft Excel.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Infragistics.Excel.DateSystem"/> enumeration.
            </exception>
            <value>The date system used internally by Microsoft Excel.</value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.DefaultFontHeight">
            <summary>
            Gets or sets the default font height in twips (1/20th of a point).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid font height range of 20 and 8180.
            </exception>
            <value>The default font height in twips (1/20th of a point).</value>
            <seealso cref="P:Infragistics.Excel.IWorkbookFont.Height"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.DocumentProperties">
            <summary>
            Gets the properties associated with the workbook document.
            </summary>
            <remarks>
            <p class="body">
            The document properties are pieces of information which provide details on the content of the workbook,
            such as the author, title, and subject of the workbook.
            </p>
            </remarks>
            <value>The properties associated with the workbook document.</value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.IterativeCalculationsEnabled">
            <summary>
            Gets or sets the value which indicates whether iterations are allowed while calculating formulas containing 
            circular references.
            </summary>
            <remarks>
            <p class="body">
            When iterative calculations are enabled, a formula is allowed to use circular references, 
            or directly or indirectly reference the cell to which it belongs. Microsoft Excel stops iteratively
            calculating formulas after iterating <see cref="P:Infragistics.Excel.Workbook.MaxRecursionIterations"/> times or when all formula
            values change by less than <see cref="P:Infragistics.Excel.Workbook.MaxChangeInIteration"/> between two iterations.
            </p>
            <p class="body">
            When iterative calculations are disabled, circular references are not allowed, and a formula which 
            references the cell to which it belongs, directly or indirectly, will cause Microsoft Excel to show an 
            error message and the cell will contain a <see cref="P:Infragistics.Excel.ErrorValue.Circularity">Circularity</see> error.
            </p>
            </remarks>
            <value>
            The value which indicates whether iterations are allowed while calculating recursive formulas.
            </value>
            <seealso cref="P:Infragistics.Excel.ErrorValue.Circularity"/>
            <seealso cref="P:Infragistics.Excel.Workbook.MaxChangeInIteration"/>
            <seealso cref="P:Infragistics.Excel.Workbook.MaxRecursionIterations"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.MaxChangeInIteration">
            <summary>
            Gets or sets the maximum change of the values in a formula between iterations which will exit from iteration.
            </summary>
            <remarks>
            <p class="body">
            This property is only valid when <see cref="P:Infragistics.Excel.Workbook.IterativeCalculationsEnabled"/> is True. Otherwise it is ignored.
            </p>
            <p class="body">
            When iterative calculations, or circular references, are enabled, this property determines the maximum change in 
            all values of a formula between two iterations that will cause the formula to exit iterative calculations. Iterative
            calculations will also be stopped if the formula iterates <see cref="P:Infragistics.Excel.Workbook.MaxRecursionIterations"/> times.
            </p>
            </remarks>
            <value>The maximum change of the values in a formula between iterations which will exit from iteration.</value>
            <seealso cref="P:Infragistics.Excel.Workbook.IterativeCalculationsEnabled"/>
            <seealso cref="P:Infragistics.Excel.Workbook.MaxRecursionIterations"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.MaxRecursionIterations">
            <summary>
            Gets or sets the maximum number of times formulas should be iteratively calculated.
            </summary>
            <remarks>
            <p class="body">
            This property is only valid when <see cref="P:Infragistics.Excel.Workbook.IterativeCalculationsEnabled"/> is True. Otherwise it is ignored.
            </p>
            <p class="body">
            When iterative calculations, or circular references, are enabled, this property determines the number of iterations
            allowed when calculating iteratively.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of 1 and 32767.
            </exception>
            <value>The maximum number of times formulas should be iteratively calculated.</value>
            <seealso cref="P:Infragistics.Excel.Workbook.IterativeCalculationsEnabled"/>
            <seealso cref="P:Infragistics.Excel.Workbook.MaxChangeInIteration"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.NamedReferences">
            <summary>
            Gets the collection of named references in the workbook.
            </summary>
            <remarks>
            <p class="body">
            Named references are typically used to refer to cells or ranges of cells by name.
            The named reference names are used by formulas instead of explicitly naming the 
            cells or cell ranges.
            </p>
            </remarks>
            <value>The collection of named references in the workbook.</value>
            <seealso cref="T:Infragistics.Excel.NamedReference"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.Precision">
            <summary>
            Gets or sets the precision to use when obtaining a cell's value.
            </summary>
            <remarks>
            <p class="body">
            The precision determines whether to use the actual value of the cell or the display value of the cell.
            These are typically the same, but the format of a cell could cause a loss of precision in the displayed
            value.  For example, if a cell's value is 18.975, and a currency format is used for the cell, the display 
            value will be 18.98.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Precision"/> enumeration.
            </exception>
            <value>The precision to use when obtaining a cell's value.</value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.Protected">
            <summary>
            Gets or sets the value which indicates whether the workbook is protected.
            </summary>
            <remarks>
            <p class="body">If True, prevents changes to worksheet and to locked cells.</p>
            </remarks>
            <value>The value which indicates whether the workbook is protected.</value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.RecalculateBeforeSave">
            <summary>
            Gets or sets the value which indicates whether the workbook should recalculate all formulas before saving.
            </summary>
            <remarks>
            <p class="body">
            This property only applies if the <see cref="P:Infragistics.Excel.Workbook.CalculationMode"/> is set to Manual.  Otherwise, it is ignored.
            </p>
            </remarks>
            <value>The value which indicates whether the workbook should recalculate all formulas before saving.</value>
            <seealso cref="M:Infragistics.Excel.Workbook.Recalculate"/>
            <seealso cref="P:Infragistics.Excel.Workbook.CalculationMode"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.SaveExternalLinkedValues">
            <summary>
            Gets or sets the value which indicates whether to save values linked from external workbooks.
            </summary>
            <remarks>
            <p class="body">
            This value will only be used when the workbook is opened in Microsoft Excel. When referencing external values
            and saving a workbook through the Excel assembly, external linked values will never be saved.
            </p>
            </remarks>
            <value>The value which indicates whether to save values linked from external workbooks.</value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.ShouldRemoveCarriageReturnsOnSave">
            <summary>
            Gets or sets the value which indicates whether carriage return characters should be removed from string values in cells
            when the workbook is saved to an Excel file.
            </summary>
            <remarks>
            <p class="body">
            In Microsfot Excel 2003, carriage return characters are displayed as boxes. Most of the time, this should not be seen
            and removing the carriage return characters has no adverse effect on the layout of the text within a cell. Therefore,
            this property is True by default.
            </p>
            </remarks>
            <value>
            True if the saved workbook file should not contain the carraige return characters from cell values; False to export the 
            string values as they have been set on the cells.
            </value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.Styles">
            <summary>
            Gets the collection of custom styles in the workbook.
            </summary>
            <remarks>
            <p class="body">
            Use this collection to add custom styles to Excel workbook. The user can apply those styles to different 
            parts of excel workbook and thereby set complex formatting with ease.
            </p>
            </remarks>
            <value>The collection of custom styles in the workbook.</value>
            <seealso cref="T:Infragistics.Excel.WorkbookStyle"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.WindowOptions">
            <summary>
            Gets the options which control various workbook level display properties.
            </summary>
            <remarks>
            <p class="body">
            The window options control properties of the child MDI window showing the workbook in Microsoft Excel.
            They also control display options of the workbook which do not change based on the selected worksheet.
            </p>
            </remarks>
            <value>The options which control various workbook level display properties.</value>
            <seealso cref="P:Infragistics.Excel.CustomView.WindowOptions"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.Worksheets">
            <summary>
            Gets the collection of worksheets in the workbook.
            </summary>
            <remarks>
            <p class="body">
            Use <see cref="P:Infragistics.Excel.WindowOptions.SelectedWorksheet">WindowOptions.SelectedWorksheet</see> to set the 
            selected worksheet. The selected worksheet is the worksheet seen when the workbook is opened in Microsoft Excel.
            </p>
            </remarks>
            <value>The collection of worksheets in the workbook.</value>
        </member>
        <member name="T:Infragistics.Excel.WorkbookStyleCollection">
            <summary>
            A collection of workbook styles, or complex formats which can be easily applied to cells in Microsoft Excel.
            </summary>
            <seealso cref="T:Infragistics.Excel.WorkbookStyle"/>
        </member>
        <member name="M:Infragistics.Excel.WorkbookStyleCollection.AddUserDefinedStyle(Infragistics.Excel.IWorksheetCellFormat,System.String)">
            <summary>
            Adds new user defined style to the workbook.
            </summary>
            <param name="styleFormat">A cell format of the style.</param>
            <param name="name">The name which will identify the style in Microsoft Excel.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            A style already exists with the a name of <paramref name="name"/>. Names are compared case-insensitively.
            </exception>
            <returns>The added user defined style as a <see cref="T:Infragistics.Excel.WorkbookStyle"/> instance.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorkbookStyleCollection.Clear">
            <summary>
            Clears all styles from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.WorkbookStyleCollection.Contains(Infragistics.Excel.WorkbookStyle)">
            <summary>
            Determines whether a style is in the collection.
            </summary>
            <param name="style">The style to locate in the collection.</param>
            <returns>True if the style is found; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorkbookStyleCollection.Remove(Infragistics.Excel.WorkbookStyle)">
            <summary>
            Removes the specified style from the collection.
            </summary>
            <param name="style">The style to remove from the collection.</param>
            <returns>
            True if the style was successfully removed; False if the custom view was not 
            in the collection.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.WorkbookStyleCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the style at the specified index from the collection.
            </summary>
            <param name="index">The zero-based index of the style in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or equal to <see cref="P:Infragistics.Excel.WorkbookStyleCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.WorkbookStyleCollection.Count">
            <summary>
            Gets the number of styles in the collection.
            </summary>
            <value>The number of styles in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.WorkbookStyleCollection.Item(System.Int32)">
            <summary>
            Gets the style at the specified index.
            </summary>
            <param name="index">The zero-based index of the style to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or equal to <see cref="P:Infragistics.Excel.WorkbookStyleCollection.Count"/>.
            </exception>
            <value>The style at the specified index.</value>
        </member>
        <member name="T:Infragistics.Excel.WorkbookWindowOptions">
            <summary>
            Represents the window options which are saved with the workbook.
            </summary>
            <remarks>
            <p class="body">
            The properties explicitly defined on this class and not inherited from the base class, 
            <see cref="T:Infragistics.Excel.WindowOptions"/>, are options that can be saved with a workbook, but 
            not with a custom view.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Excel.Workbook.WindowOptions"/>
            <seealso cref="T:Infragistics.Excel.CustomViewWindowOptions"/>
        </member>
        <member name="M:Infragistics.Excel.WorkbookWindowOptions.Reset">
            <summary>
            Resets the window options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank workbook.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.WorkbookWindowOptions.BoundsInTwips">
            <summary>
            Gets or sets the bounds of the workbook's MDI child window in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:Infragistics.Excel.CustomView"/> in the Excel file. It can only be saved
            with a <see cref="T:Infragistics.Excel.Workbook"/>. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.CustomViewWindowOptions"/> and
            a newly created CustomView will not be initialized with the setting from this property.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            The left or top of the value assigned is outside the bounds of -32768 and 32767.
            </exception>
            <exception cref="T:System.ArgumentException">
            The width or height of the value assigned is outside the bounds of 0 and 65535.
            </exception>
            <value>The bounds of the workbook's MDI child window in twips (1/20th of a point).</value>
        </member>
        <member name="P:Infragistics.Excel.WorkbookWindowOptions.FirstVisibleTabIndex">
            <summary>
            Gets or sets the index of the first visible tab in the worksheet tab bar.
            </summary>
            <remarks>
            <p class="body">
            If the worksheet tab bar is not visible, this value will not be used, but it is still saved with the workbook.
            </p>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:Infragistics.Excel.CustomView"/> in the Excel file. It can only be saved
            with a <see cref="T:Infragistics.Excel.Workbook"/>. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.CustomViewWindowOptions"/> and
            a newly created CustomView will not be initialized with the setting from this property.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is less than zero.
            </exception>
            <value>The index of the first visible tab in the worksheet tab bar.</value>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarVisible"/>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarWidth"/>
        </member>
        <member name="P:Infragistics.Excel.WorkbookWindowOptions.Minimized">
            <summary>
            Gets or sets the value indicating whether the workbook's MDI child window is minimized in Microsoft Excel.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:Infragistics.Excel.CustomView"/> in the Excel file. It can only be saved
            with a <see cref="T:Infragistics.Excel.Workbook"/>. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.CustomViewWindowOptions"/> and
            a newly created CustomView will not be initialized with the setting from this property.
            </p>
            </remarks>
            <value>The value indicating whether the workbook's MDI child window is minimized in Microsoft Excel.</value>
            <seealso cref="P:Infragistics.Excel.CustomViewWindowOptions.Maximized"/>
        </member>
        <member name="T:Infragistics.Excel.Worksheet">
            <summary>
            Represents one worksheet in a Microsoft Excel workbook.
            </summary>
            <remarks>
            <p class="body">
            An Excel worksheet is essentially a table with a limited number of rows and columns. To create new worksheet, use 
            <see cref="M:Infragistics.Excel.WorksheetCollection.Add(System.String)"/> method of the <see cref="P:Infragistics.Excel.Workbook.Worksheets"/> 
            collection on a <see cref="P:Infragistics.Excel.Worksheet.Workbook"/> instance.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.Worksheet.GetCell(System.String)">
            <summary>
            Gets the cell at the specified address.
            </summary>
            <remarks>
            <p class="body">
            The <see cref="P:Infragistics.Excel.Workbook.CellReferenceMode"/> of the workbook will be used to parse the region address.
            </p>
            <p class="body">
            If a region reference is specified instead of a cell reference, the top-left cell of the region at the address will be returned.
            </p>
            </remarks>
            <param name="address">The address of the cell.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a valid cell or region address in the workbook's cell reference mode.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="address"/> is a relative R1C1 address. The overload taking an origin cell must be used to resolve relative R1C1 references.
            </exception>
            <returns>A cell represented by the specified address.</returns>
            <seealso cref="P:Infragistics.Excel.Workbook.CellReferenceMode"/>
        </member>
        <member name="M:Infragistics.Excel.Worksheet.GetCell(System.String,Infragistics.Excel.CellReferenceMode)">
            <summary>
            Gets the cell at the specified address.
            </summary>
            <remarks>
            <p class="body">
            If a region reference is specified instead of a cell reference, the top-left cell of the region at the address will be returned.
            </p>
            </remarks>
            <param name="address">The address of the cell.</param>
            <param name="cellReferenceMode">The cell reference mode to use to parse the cell address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is null.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a valid cell or region address in the specified cell reference mode.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="address"/> is a relative R1C1 address. The overload taking an origin cell must be used to resolve relative R1C1 references.
            </exception>
            <returns>A cell represented by the specified address.</returns>
        </member>
        <member name="M:Infragistics.Excel.Worksheet.GetCell(System.String,Infragistics.Excel.WorksheetCell)">
            <summary>
            Gets the cell at the specified address.
            </summary>
            <remarks>
            <p class="body">
            The <see cref="P:Infragistics.Excel.Workbook.CellReferenceMode"/> of the workbook will be used to parse the cell address.
            </p>
            <p class="body">
            If a region reference is specified instead of a cell reference, the top-left cell of the region at the address will be returned.
            </p>
            <p class="body">
            The origin cell specified will not be used if the workbook has an A1 cell reference mode or an absolute R1C1 address is specified.
            </p>
            </remarks>
            <param name="address">The address of the cell.</param>
            <param name="originCell">The origin for resolving relative R1C1 references.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a valid cell or region address in the workbook's cell reference mode.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="address"/> is a relative R1C1 address and <paramref name="originCell"/> is null. An origin cell must be specified to resolve relative 
            R1C1 references.
            </exception>
            <returns>A cell represented by the specified address.</returns>
            <seealso cref="P:Infragistics.Excel.Workbook.CellReferenceMode"/>
        </member>
        <member name="M:Infragistics.Excel.Worksheet.GetCell(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorksheetCell)">
            <summary>
            Gets the cell at the specified address.
            </summary>
            <remarks>
            <p class="body">
            If a region reference is specified instead of a cell reference, the top-left cell of the region at the address will be returned.
            </p>
            <p class="body">
            The origin cell specified will not be used if the specified cell reference mode is A1 or an absolute R1C1 address is specified.
            </p>
            </remarks>
            <param name="address">The address of the cell.</param>
            <param name="cellReferenceMode">The cell reference mode to use to parse the cell address.</param>
            <param name="originCell">The origin for resolving relative R1C1 references.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is null.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a valid cell or region address in the specified cell reference mode.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="address"/> is a relative R1C1 address and <paramref name="originCell"/> is null. An origin cell must be specified to resolve relative 
            R1C1 references.
            </exception>
            <returns>A cell represented by the specified address.</returns>
        </member>
        <member name="M:Infragistics.Excel.Worksheet.GetRegion(System.String)">
            <summary>
            Gets the region at the specified address.
            </summary>
            <remarks>
            <p class="body">
            The <see cref="P:Infragistics.Excel.Workbook.CellReferenceMode"/> of the workbook will be used to parse the region address.
            </p>
            <p class="body">
            If a cell reference is specified instead of a region reference, a 1x1 region containing the cell at the address will be returned.
            </p>
            </remarks>
            <param name="address">The address of the region.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a valid cell or region address in the workbook's cell reference mode.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="address"/> is a relative R1C1 address. The overload taking an origin cell must be used to resolve relative R1C1 references.
            </exception>
            <returns>A region represented by the specified address.</returns>
            <seealso cref="P:Infragistics.Excel.Workbook.CellReferenceMode"/>
        </member>
        <member name="M:Infragistics.Excel.Worksheet.GetRegion(System.String,Infragistics.Excel.CellReferenceMode)">
            <summary>
            Gets the region at the specified address.
            </summary>
            <remarks>
            <p class="body">
            If a cell reference is specified instead of a region reference, a 1x1 region containing the cell at the address will be returned.
            </p>
            </remarks>
            <param name="address">The address of the region.</param>
            <param name="cellReferenceMode">The cell reference mode to use to parse the region address.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is null.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a valid cell or region address in the specified cell reference mode.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="address"/> is a relative R1C1 address. The overload taking an origin cell must be used to resolve relative R1C1 references.
            </exception>
            <returns>A region represented by the specified address.</returns>
        </member>
        <member name="M:Infragistics.Excel.Worksheet.GetRegion(System.String,Infragistics.Excel.WorksheetCell)">
            <summary>
            Gets the region at the specified address.
            </summary>
            <remarks>
            <p class="body">
            The <see cref="P:Infragistics.Excel.Workbook.CellReferenceMode"/> of the workbook will be used to parse the region address.
            </p>
            <p class="body">
            If a cell reference is specified instead of a region reference, a 1x1 region containing the cell at the address will be returned.
            </p>
            <p class="body">
            The origin cell specified will not be used if the workbook has an A1 cell reference mode or an absolute R1C1 address is specified.
            </p>
            </remarks>
            <param name="address">The address of the region.</param>
            <param name="originCell">The origin for resolving relative R1C1 references.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a valid cell or region address in the workbook's cell reference mode.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="address"/> is a relative R1C1 address and <paramref name="originCell"/> is null. An origin cell must be specified to resolve relative 
            R1C1 references.
            </exception>
            <returns>A region represented by the specified address.</returns>
            <seealso cref="P:Infragistics.Excel.Workbook.CellReferenceMode"/>
        </member>
        <member name="M:Infragistics.Excel.Worksheet.GetRegion(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.WorksheetCell)">
            <summary>
            Gets the region at the specified address.
            </summary>
            <remarks>
            <p class="body">
            If a cell reference is specified instead of a region reference, a 1x1 region containing the cell at the address will be returned.
            </p>
            <p class="body">
            The origin cell specified will not be used if the specified cell reference mode is A1 or an absolute R1C1 address is specified.
            </p>
            </remarks>
            <param name="address">The address of the region.</param>
            <param name="cellReferenceMode">The cell reference mode to use to parse the region address.</param>
            <param name="originCell">The origin for resolving relative R1C1 references.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is null.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a valid cell or region address in the specified cell reference mode.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="address"/> is a relative R1C1 address and <paramref name="originCell"/> is null. An origin cell must be specified to resolve relative 
            R1C1 references.
            </exception>
            <returns>A region represented by the specified address.</returns>
        </member>
        <member name="M:Infragistics.Excel.Worksheet.MoveToIndex(System.Int32)">
            <summary>
            Moves the worksheet to a new position in the owning workbook's collections of worksheets.
            </summary>
            <param name="index">The new 0-based index to where the worksheet should be moved.</param>
            <exception cref="T:System.InvalidOperationException">
            The worksheet has previously been removed from its workbook.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than 0 or greater than or equal to the number of worksheets in the owning workbook.
            </exception>
            <seealso cref="P:Infragistics.Excel.Workbook.Worksheets"/>
            <seealso cref="M:Infragistics.Excel.WorksheetCollection.IndexOf(Infragistics.Excel.Worksheet)"/>
            <seealso cref="P:Infragistics.Excel.Worksheet.Index"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Columns">
            <summary>
            Gets the collection of columns in the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The collection of columns is a fixed length collection, with the maximum number of columns in the collection being 
            <see cref="F:Infragistics.Excel.Workbook.MaxExcelColumnCount"/> or <see cref="F:Infragistics.Excel.Workbook.MaxExcel2007ColumnCount"/>,
            depending on the <see cref="P:Infragistics.Excel.Workbook.CurrentFormat">Workbook.CurrentFormat</see>. Internally, the columns 
            are only created and added to the collection when they are requested.
            </p>
            <p class="note">
            <b>Note:</b> Iterating the collection will not create all columns. It will only iterate the columns which have already 
            been used.  To create and iterate all columns in the worksheet use a For loop, iterating from 0 to one less than 
            the maximum column count, and pass in each index to the collection's indexer.
            </p>
            </remarks>
            <value>The collection of columns in the worksheet.</value>
            <seealso cref="T:Infragistics.Excel.WorksheetColumn"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.DataTables">
            <summary>
            Gets the collection of data tables in the worksheet.
            </summary>
            <value>The collection of data tables in the worksheet.</value>
            <seealso cref="T:Infragistics.Excel.WorksheetDataTable"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.DefaultColumnWidth">
            <summary>
            Gets or sets the default column width, in 1/256s of average character width.
            </summary>
            <remarks>
            <p class="body">
            The default column width is the width of all columns which do not have their width explicitly set 
            to a positive number.
            </p>
            <p class="body">
            The value assigned must be between 0 and 65535. Invalid values will be automatically adjusted to valid values.
            </p>
            </remarks>
            <value>The default column width, in 1/256s of average character width.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetColumn.Width"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.DefaultRowHeight">
            <summary>
            Gets or sets the default row height in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            The default row height is the height of all rows which do not have their height explicitly set 
            to a positive number.
            </p>
            <p class="body">
            If the assigned value is -1, the default row height will then be calculated based on the default font 
            for the workbook, and subsequently getting this property will return the font-based default row height.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the value range of -1 and 8192.
            </exception>
            <value>The default row height in twips (1/20th of a point).</value>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.DisplayOptions">
            <summary>
            Gets the object which controls the display of the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The display options include any settings which affect the display of the worksheet when viewed in Microsoft Excel.
            These settings will not affect the printed worksheet or the data stored in the worksheet.
            </p>
            </remarks>
            <value>The object which controls the display of the worksheet.</value>
            <seealso cref="M:Infragistics.Excel.CustomView.GetDisplayOptions(Infragistics.Excel.Worksheet)"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.ImageBackground">
            <summary>
            Gets or sets the background image for the worksheet.
            </summary>
            <remarks>
            <p class="body">
            This image is tiled across the background of the worksheet.  If null, the worksheet will have no background.
            </p>
            </remarks>
            <value>The background image for the worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Index">
            <summary>
            Gets the zero-based index of this worksheet in its parent <see cref="P:Infragistics.Excel.Workbook.Worksheets"/> collection.
            </summary>
            <remarks>
            <p class="body">
            Negative one indicates the worksheet has been removed from its parent collection.
            </p>
            </remarks>
            <value>The zero-based index of this worksheet in its parent Worksheets collection.</value>
            <seealso cref="M:Infragistics.Excel.WorksheetCollection.IndexOf(Infragistics.Excel.Worksheet)"/>
            <seealso cref="M:Infragistics.Excel.Worksheet.MoveToIndex(System.Int32)"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.MergedCellsRegions">
            <summary>
            Gets the collection of merged cell ranges in this worksheet.
            </summary>
            <remarks>
            <p class="body">Use <see cref="M:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32)"/> method to add new merged cell ranges to the worksheet.</p>
            </remarks>
            <value>The collection of merged cell ranges in this worksheet.</value>
            <seealso cref="T:Infragistics.Excel.WorksheetMergedCellsRegion"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Name">
            <summary>
            Gets or sets the worksheet name.
            </summary>
            <remarks>
            <p class="body">The worksheet name is case-insensitively unique in the workbook.</p>
            <p class="body">
            The worksheet name is shown in the tab for the worksheet. In addition, the worksheet name can be used by formulas 
            from other worksheets to refer to cells in this worksheet.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value assigned contains the invalid characters: ':', '\', '/', '?', '*', '[', or ']'.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value assigned exceeds 31 characters in length.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value assigned is being used as the name of another worksheet (worksheet names are case-insensitively compared).
            </exception>
            <value>The worksheet name.</value>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.PrintOptions">
            <summary>
            Gets the object which controls how the worksheet prints.
            </summary>
            <remarks>
            <p class="body">
            The print options include any settings which affect the printed appearance of the worksheet.  These settings will
            not affect the data in the worksheet.  Although these are not display settings, some worksheet display styles will
            display all or some of the print options, so these settings may affect the display of the worksheet when viewed in 
            Microsoft Excel.
            </p>
            </remarks>
            <value>The object which controls how the worksheet prints.</value>
            <seealso cref="M:Infragistics.Excel.CustomView.GetPrintOptions(Infragistics.Excel.Worksheet)"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Protected">
            <summary>
            Gets or sets the protection state of Excel worksheet.
            </summary>
            <remarks>
            <p class="body">In protected worksheet cells which are locked can not be modified.</p>
            </remarks>
            <value>The protection state of Excel worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Rows">
            <summary>
            Gets the collection of rows in the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The collection of rows is a fixed length collection, with the maximum number of rows in the collection being 
            <see cref="F:Infragistics.Excel.Workbook.MaxExcelRowCount"/> or <see cref="F:Infragistics.Excel.Workbook.MaxExcel2007RowCount"/>,
            depending on the <see cref="P:Infragistics.Excel.Workbook.CurrentFormat">Workbook.CurrentFormat</see>.  Internally, the rows are only created and added to the collection
            when they are requested.
            </p>
            <p class="note">
            <b>Note:</b> Iterating the collection will not create all rows. It will only iterate the rows which have already 
            been used.  To create and iterate all rows in the worksheet use a For loop, iterating from 0 to one less than 
            the maximum row count, and pass in each index to the collection's indexer.
            </p>
            </remarks>
            <value>The collection of rows in the worksheet.</value>
            <seealso cref="T:Infragistics.Excel.WorksheetRow"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Selected">
            <summary>
            Gets the value which indicates whether this worksheet is selected.
            </summary>
            <remarks>
            <p class="body">
            If the worksheet has been removed from its parent <see cref="P:Infragistics.Excel.Workbook.Worksheets"/> collection, this will always return False.
            </p>
            </remarks>
            <value>The value which indicates whether this worksheet is selected.</value>
            <seealso cref="T:Infragistics.Excel.WindowOptions"/>
            <seealso cref="T:WindowOptions.SelectedWorksheet"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Shapes">
            <summary>
            Gets the collection of shapes on the worksheet.
            </summary>
            <value>The collection of shapes on the worksheet.</value>
            <seealso cref="T:Infragistics.Excel.WorksheetShape"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Workbook">
            <summary>
            Gets the <see cref="T:Infragistics.Excel.Workbook"/> that owns the worksheet.
            </summary>
            <value>The Workbook that owns the worksheet.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetCell">
            <summary>
            Represents a cell in a Microsoft Excel worksheet.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCell.ToString">
            <summary>
            Gets the string representation of the address of the cell.
            </summary>
            <returns>The string representation of the address of the cell.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCell.ApplyFormula(System.String)">
            <summary>
            Applies a formula to the cell.
            </summary>
            <remarks>
            <p class="body">
            <paramref name="value"/> is parsed based on the <see cref="T:Infragistics.Excel.CellReferenceMode"/> of the <see cref="T:Infragistics.Excel.Workbook"/>
            to which the cell belongs. If the cell's <see cref="P:Infragistics.Excel.WorksheetCell.Worksheet"/> has been removed from its parent collection,
            the A1 CellReferenceMode will be used to parse the formula.
            </p>
            </remarks>
            <param name="value">The formula to parse and apply to the cell.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The cell is part of an array formula or data table which is not confined to just the cell.
            </exception>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.Formula"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCell.ClearComment">
            <summary>
            Removes the comment associated with the cell.
            </summary>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.Comment"/>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.HasComment"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCell.GetBoundsInTwips">
            <summary>
            Gets the bounds of the cell in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            The bounds returned by this method are only valid with the current configuration of the worksheet.
            If any rows or columns before the cell are resized, these bounds will no longer reflect the 
            position of the cell.
            </p>
            </remarks>
            <returns>The bounds of the cell on its worksheet.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCell.IsCellTypeSupported(System.Type)">
            <summary>
            Returns True if a particular type can be exported to excel.
            </summary>
            <param name="cellType">The type to test.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cellType"/> is null.
            </exception>
            <returns>True if the type is supported as a cell value, False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCell.ToString(Infragistics.Excel.CellReferenceMode,System.Boolean)">
            <summary>
            Gets the string representation of the address of the cell.
            </summary>
            <param name="cellReferenceMode">The mode used to generate cell references.</param>
            <param name="includeWorksheetName">The value indicating whether to include the worksheet name in the cell address.</param>
            <returns>The string representation of the address of the cell.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCell.ToString(Infragistics.Excel.CellReferenceMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the string representation of the address of the cell.
            </summary>
            <param name="cellReferenceMode">The mode used to generate cell references.</param>
            <param name="includeWorksheetName">The value indicating whether to include the worksheet name in the cell address.</param>
            <param name="useRelativeColumn">The value indicating whether to use a relative column address.</param>
            <param name="useRelativeRow">The value indicating whether to use a relative row address.</param>
            <returns>The string representation of the address of the cell.</returns>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.AssociatedDataTable">
            <summary>
            Gets the data table to which the cell belongs.
            </summary>
            <remarks>
            <p class="body">
            The cells in the left-most column and top-most row of the data table will return null for the associated data table.
            </p>
            <p class="body">
            If a data table is associated with the cell, getting the <see cref="P:Infragistics.Excel.WorksheetCell.Value"/> will return the calculated value for the cell.
            </p>
            </remarks>
            <value>The data table to which the cell belongs or null if the cell does not belong to a data table.</value>
            <see cref="P:Infragistics.Excel.Worksheet.DataTables"/>
            <see cref="M:Infragistics.Excel.WorksheetDataTableCollection.Add(Infragistics.Excel.WorksheetRegion,Infragistics.Excel.WorksheetCell,Infragistics.Excel.WorksheetCell)"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.AssociatedMergedCellsRegion">
            <summary>
            Gets the merged cells region which contains the cell, or null if the cell is not merged.
            </summary>
            <remarks>
            <p class="body">
            If the cell is part of a merged cell region, getting or setting the <see cref="P:Infragistics.Excel.WorksheetCell.Value"/> and <see cref="P:Infragistics.Excel.WorksheetCell.CellFormat"/>
            of the cell will get or set the <see cref="P:Infragistics.Excel.WorksheetMergedCellsRegion.Value"/> and 
            <see cref="P:Infragistics.Excel.WorksheetMergedCellsRegion.CellFormat"/> of the AssociatedMergedCellsRegion, respectively.
            </p>
            </remarks>
            <value>The merged cells region which contains the cell, or null if the cell is not merged.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.CellFormat">
            <summary>
            Gets the cell formatting for this cell.
            </summary>
            <remarks>
            <p class="body">
            Use this property to set cell formatting specific to the cell. If you will be appling the format to numerous cells, 
            see the <see cref="M:Infragistics.Excel.Workbook.CreateNewWorksheetCellFormat"/> method for performance considerations.
            </p>
            <p class="body">
            If this cell belongs to a merged cell region, getting the CellFormat will get the CellFormat of the associated merged 
            cell region.
            </p>
            </remarks>
            <value>The cell formatting for this cell.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.ColumnIndex">
            <summary>
            Gets the column index of the cell.
            </summary>
            <value>The column index of the cell.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.HasComment">
            <summary>
            Get the value indicating whether the cell has an associated comment.
            </summary>
            <remarks>True if the cell has an associated comment; False otherwise.</remarks>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.Comment"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.Formula">
            <summary>
            Gets the formula which has been applied to the cell.
            </summary>
            <remarks>
            <p class="body">
            If a formula has been applied to the cell, getting the <see cref="P:Infragistics.Excel.WorksheetCell.Value"/> will return the calculated value of the formula.
            </p>
            </remarks>
            <value>The formula which has been applied to the cell or null if no formula has been applied.</value>
            <see cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)"/>
            <see cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion)"/>
            <see cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion[])"/>
            <see cref="M:Infragistics.Excel.WorksheetCell.ApplyFormula(System.String)"/>
            <see cref="M:Infragistics.Excel.WorksheetRegion.ApplyFormula(System.String)"/>
            <see cref="M:Infragistics.Excel.WorksheetRegion.ApplyArrayFormula(System.String)"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.RowIndex">
            <summary>
            Gets the row index of the cell.
            </summary>
            <value>The row index of the cell.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.Value">
            <summary>
            Gets or sets the value of the cell.
            </summary>
            <remarks>
            <p class="body">
            If this cell belongs to a merged cell region and it is the top-left cell of the region, getting and setting the value 
            will get and set the value of the associated merged cell region. Getting the value of other cells in a merged cell region
            will always return null. Setting the value of other cells in a merged cell region will have no effect.
            </p>
            <p class="body">
            If a formula has been applied to the cell or a data table is associated with the cell, getting the Value will return the 
            calculated value of the cell.
            </p>
            <p class="body">
            The types supported for the value are:
            <BR/>
            <ul>
            <li class="taskitem"><span class="taskitemtext">System.Byte</span></li>
            <li class="taskitem"><span class="taskitemtext">System.SByte</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Int16</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Int64</span></li>
            <li class="taskitem"><span class="taskitemtext">System.UInt16</span></li>
            <li class="taskitem"><span class="taskitemtext">System.UInt64</span></li>
            <li class="taskitem"><span class="taskitemtext">System.UInt32</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Int32</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Single</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Double</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Boolean</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Char</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Enum</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Decimal</span></li>
            <li class="taskitem"><span class="taskitemtext">System.DateTime</span></li>
            <li class="taskitem"><span class="taskitemtext">System.String</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Text.StringBuilder</span></li>
            <li class="taskitem"><span class="taskitemtext">System.DBNull</span></li>
            <li class="taskitem"><span class="taskitemtext"><see cref="T:Infragistics.Excel.ErrorValue"/></span></li>
            <li class="taskitem"><span class="taskitemtext"><see cref="T:Infragistics.Excel.FormattedString"/></span></li>
            </ul>
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            The assigned value's type is not supported and can't be exported to Excel.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is a <see cref="T:Infragistics.Excel.Formula"/>. Instead, <see cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)"/> 
            should be called on the Formula, passing in the cell.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is a <see cref="T:Infragistics.Excel.WorksheetDataTable"/>. Instead, the <see cref="P:Infragistics.Excel.WorksheetDataTable.CellsInTable"/>
            should be set to a region containing the cell.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is a FormattedString which is the value another cell or merged cell region.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value is assigned and this cell is part of an <see cref="T:Infragistics.Excel.ArrayFormula"/> or WorksheetDataTable.
            </exception>
            <value>The value of the cell.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.AssociatedMergedCellsRegion"/>
            <seealso cref="M:Infragistics.Excel.WorksheetCell.IsCellTypeSupported(System.Type)"/>
            <seealso cref="P:Infragistics.Excel.WorksheetMergedCellsRegion.Value"/>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.Formula"/>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.AssociatedDataTable"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.Worksheet">
            <summary>
            Gets the worksheet to which the cell belongs.
            </summary>
            <value>The worksheet to which the cell belongs.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.Comment">
            <summary>
            Gets or sets the comment applied to the cell.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The value applied only has only one anchor cell set. It should have both or neither anchor cells set.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value has its <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/> and <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/> 
            anchors set but they are from different worksheets.
            </exception>
            <value>The comment applied to the cell.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetCellCollection">
            <summary>
            A collection of cells in a row.
            </summary>
            <remarks>
            <p class="body">
            Cells in this collection are lazily created (they are only created and added to the collection when they are accessed).
            If this collection is enumerated, it only enumerates the cells which were already accessed.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.Excel.WorksheetCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetRow.Cells"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCellCollection.MaxCount">
            <summary>
            Gets the maximum number of items allowed in this collection.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCellCollection.Item(System.Int32)">
            <summary>
            Gets the cell at the specified column index in the owning row.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> Iterating the collection will not create all cells. It will only iterate the cells which have already 
            been used.  To create and iterate all cells in the worksheet use a For loop, iterating from 0 to one less than 
            the maximum column count, and pass in each index to the collection's indexer.
            </p>
            </remarks>
            <param name="index">The zero-based column index of the cell to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="index"/> is greater than or equal to <see cref="F:Infragistics.Excel.Workbook.MaxExcelColumnCount"/>
            or <see cref="F:Infragistics.Excel.Workbook.MaxExcel2007ColumnCount"/>, depending on the <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>.
            </exception>
            <value>The cell at the specified column index in the owning row.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetColumn">
            <summary>
            Represents a column in a Microsoft Excel worksheet.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.WorksheetColumn.Width">
            <summary>
            Gets or sets the column width, in 1/256s of average character width.
            </summary>
            <remarks>
            <p class="body">
            If the width of the column is less than zero, the <see cref="P:Infragistics.Excel.Worksheet.DefaultColumnWidth"/> of the
            owning worksheet will be used as the column's width.
            </p>
            <p class="body">
            The value assigned must be between -1 and 65535. Invalid values will be automatically adjusted to valid values.
            </p>
            </remarks>
            <value>The column width, in 1/256s of average character width.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetColumnCollection">
            <summary>
            A collection of columns in a worksheet.
            </summary>
            <remarks>
            <p class="body">
            Columns in this collection are lazily created (they are only created and added to the collection when they are accessed).
            Therefore, if this collection is enumerated, it only enumerates the columns which were already accessed.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.Excel.WorksheetColumn"/>
            <seealso cref="P:Infragistics.Excel.Worksheet.Columns"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetColumnCollection.MaxCount">
            <summary>
            Gets the maximum number of items allowed in this collection.
            </summary>  
        </member>
        <member name="P:Infragistics.Excel.WorksheetColumnCollection.Item(System.Int32)">
            <summary>
            Gets the column at the specified index.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> Iterating the collection will not create all columns. It will only iterate the columns which have already 
            been used.  To create and iterate all columns in the worksheet use a For loop, iterating from 0 to one less than 
            the maximum column count, and pass in each index to the collection's indexer.
            </p>
            </remarks>
            <param name="index">The zero-based index of the column to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="index"/> is greater than or equal to <see cref="F:Infragistics.Excel.Workbook.MaxExcelColumnCount"/>
            or <see cref="F:Infragistics.Excel.Workbook.MaxExcel2007ColumnCount"/>, depending on the <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>.
            </exception>
            <value>The column at the specified index.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetDataTable">
            <summary>
            Represents a data table for a range of cells.
            </summary>
            <remarks>
            <p class="body">
            Data tables are a way to show the results of one or more formulas by trying many different values in the variables
            of the formulas at the same time, and showing the different results in a table.  An excellent example of a data table
            application would be for a multiplication table.  A multiplication table shows results for the formula =X*Y.  However, 
            it shows many different results for the formula, where each result is determined by using different values for X and Y.
            These results are displayed in a table, where each cell in the table shows the formula's result for specific values of 
            X and Y, which are labeled in the row and column headers, respectively.  Therefore, each cell in a row will use the 
            same X value, and each cell in a column will use the same Y value.  
            </p>
            <p class="body">
            The multiplication table is known as a two-variable data table. Two-variable data tables are characterized by having a 
            single formula and values in the row and column headers of the table.  The formula is entered into the top-left cell of 
            the data table and usually references at least two cells outside the data table, known as the column-input and row-input 
            cells.  When the formula is evaluated for a specific cell in the data table, the reference to the column-input cell in the
            formula is replaced with the value in the cell's row header (this may seem backwards, but the values in the row headers 
            run down the left column of the data table, which is why they are used for the column-input cell), and the reference to 
            the row-input cell is replaced with the value in the cell's column header.
            </p>
            <p class="body">
            Another type of data table is the one-variable data table.  A one-variable data table can be a column-oriented or 
            a row-oriented data table.  A column-oriented data table has data in the cells of the left column and formulas in the 
            cells of the top row (anything in the top-left cell of the data table is ignored in this type of data table).  Usually, 
            the formulas in the top row all reference the same cell outside the data table, known as the column-input cell.  When a 
            cell in the table is evaluated, the formula in its column header is used, with the reference to the column-input cell
            replaced by the value in cell's row header.
            </p>
            <p class="body">
            A row-oriented one-variable data table is formed like a column-oriented data table, except the values run along the top 
            row, the formulas run down the left column, and the cell referenced by all formulas is known as the row-input cell.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDataTable.CellsInTable">
            <summary>
            Gets or sets the region of cells in the data table.
            </summary>
            <remarks>
            <p class="body">
            Any interior cells (cells not in the left-most column or top row) in this region will have their values removed 
            when this is set. If any interior cells have array formulas with a region that crosses outside the data
            table, an error will occur. However, if the array formula's region is confined to cells in the 
            interior of the data table, the array formula will have <see cref="M:Infragistics.Excel.ArrayFormula.ClearCellRange"/>
            called on it, which will remove it from all its cells. Similarly, if an existing data table's interior cells
            contain some of the interior cells in this region as well as some external cells, an error will occur.
            However, if all interior cells of the existing data table are contained in the interior cells of the new
            region specified here, the existing data table will be removed from the worksheet.
            </p>
            <p class="body">
            After the cells in the table have been specified, the interior cells' values cannot be modified.
            </p>
            <p class="note">
            <B>Note:</B> The <see cref="P:Infragistics.Excel.WorksheetDataTable.RowInputCell"/> and <see cref="P:Infragistics.Excel.WorksheetDataTable.ColumnInputCell"/> cannot be with the region.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value is assigned after the data table has been removed from the worksheet.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value assigned is a region from a worksheet other than the data table's worksheet.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The region specified contains the RowInputCell or the ColumnInputCell.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            One or more of the interior cells of the value assigned (all cells except the left-most column and top row) is an 
            interior cell of another data table or is a cell in an array formula, and the entire range of that other 
            entity extends outside the interior cells of the value assigned.
            </exception>
            <exception cref="T:System.ArgumentException">
            The assigned value is only one row tall or one column wide. The cells in the table must be at least two rows by two columns.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The assigned value contains merged regions which are not confined to the left-most column or top row. No merged regions
            can exist in the interior cells of the data table and no merged regions can exist in the left-most column or top row
            and extend outside the data table region.
            </exception>
            <value>The region of cells in the data table.</value>
            <seealso cref="T:Infragistics.Excel.ArrayFormula"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDataTable.ColumnInputCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDataTable.RowInputCell"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDataTable.ColumnInputCell">
            <summary>
            Gets or sets the cell used as the column-input cell in the data table.
            </summary>
            <remarks>
            <p class="body">
            This represents the cell reference in all formulas of the data table to replace with row header values.
            If this and the <see cref="P:Infragistics.Excel.WorksheetDataTable.RowInputCell"/> are non-null, the data table is a two-variable data table.
            Otherwise, if only one is non-null, this is a one-variable data table.
            </p>
            <p class="note">
            <B>Note:</B> The RowInputCell and ColumnInputCell cannot be within the <see cref="P:Infragistics.Excel.WorksheetDataTable.CellsInTable"/> region.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            The assigned value does not belong to the same worksheet as the data table.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value is assigned after the data table has been removed from the worksheet.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is within the CellsInTable region.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The assigned value is null and RowInputCell is null. At least one input cell must be non-null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The assigned value is the same as RowInputCell. The input cells cannot be the same cell.
            </exception>
            <value>The cell used as the column-input cell in the data table.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetDataTable.CellsInTable"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDataTable.RowInputCell"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDataTable.RowInputCell">
            <summary>
            Gets or sets the cell used as the row-input cell in the data table.
            </summary>
            <remarks>
            <p class="body">
            This represents the cell reference in all formulas of the data table to replace with column header values.
            If this and the <see cref="P:Infragistics.Excel.WorksheetDataTable.ColumnInputCell"/> are non-null, the data table is a two-variable data table.
            Otherwise, if only one is non-null, this is a one-variable data table.
            </p>
            <p class="note">
            <B>Note:</B> The RowInputCell and ColumnInputCell cannot be within the <see cref="P:Infragistics.Excel.WorksheetDataTable.CellsInTable"/> region.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            The assigned value does not belong to the same worksheet as the data table.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value is assigned after the data table has been removed from the worksheet.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is within the CellsInTable region.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The assigned value is null and ColumnInputCell is null. At least one input cell must be non-null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The assigned value is the same as ColumnInputCell. The input cells cannot be the same cell.
            </exception>
            <value>The cell used as the row-input cell in the data table.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetDataTable.CellsInTable"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDataTable.ColumnInputCell"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDataTable.Worksheet">
            <summary>
            Gets the worksheet on which this data table resides.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.WorksheetDataTableCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Excel.WorksheetDataTable"/> instances on a worksheet.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.WorksheetDataTableCollection.Add(Infragistics.Excel.WorksheetRegion,Infragistics.Excel.WorksheetCell,Infragistics.Excel.WorksheetCell)">
            <summary>
            Creates a new data table and adds it to the collection.
            </summary>
            <remarks>
            <p class="body">
            The input cells specified must be different cell references and at least one must be non-null.
            See the <see cref="T:Infragistics.Excel.WorksheetDataTable"/> overview for more information on data tables.
            </p>
            </remarks>
            <param name="cellsInTable">The region of cells in the data table.</param>
            <param name="columnInputCell">The cell used as the column-input cell in the data table.</param>
            <param name="rowInputCell">The cell used as the row-input cell in the data table.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cellsInTable"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="cellsInTable"/> is a region which does not belongs to the worksheet which owns this collection.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="columnInputCell"/> is not null but does not belong to the worksheet which owns this collection.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="rowInputCell"/> is not null but does not belong to the worksheet which owns this collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Both <paramref name="columnInputCell"/> and <paramref name="rowInputCell"/> are null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="columnInputCell"/> and <paramref name="rowInputCell"/> are the same cell.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="columnInputCell"/> or <paramref name="rowInputCell"/> are contained in the 
            <paramref name="cellsInTable"/> region.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            One or more of the interior cells of the <paramref name="cellsInTable"/> region (all cells except the left-most column 
            and top row) is an interior cell of another data table or is a cell in an array formula, and the entire 
            range of that other entity extends outside the interior cells of <paramref name="cellsInTable"/>.
            </exception>
            <returns>The newly created data table.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetDataTableCollection.Clear">
            <summary>
            Clears all data tables from the collection.
            </summary>
            <remarks>
            <p class="body">
            Once a data table is removed from the collection, it can no longer be used.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.WorksheetDataTableCollection.Remove(Infragistics.Excel.WorksheetDataTable)">
            <summary>
            Removes the specified data table from the collection.
            </summary>
            <remarks>
            <p class="body">
            Once a data table is removed from the collection, it can no longer be used.
            </p>
            </remarks>
            <param name="dataTable">The data table to remove from the collection.</param>
            <returns>
            True if the dataTable was successfully removed; False if the dataTable was not in the collection.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetDataTableCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the data table at the specified index from the collection.
            </summary>
            <remarks>
            <p class="body">
            Once a data table is removed from the collection, it can no longer be used.
            </p>
            </remarks>
            <param name="index">The zero-based index of the data table to remove from the collection.</param>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDataTableCollection.Count">
            <summary>
            Gets the number of data tables in the collection.
            </summary>
            <value>The number of data tables in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDataTableCollection.Item(System.Int32)">
            <summary>
            Gets the data table at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the data table to get.</param>
            <value>The data table at the specified index.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetDisplayOptions">
            <summary>
            Class which exposes the display options which can only be controlled through the worksheet.
            </summary>
            <seealso cref="P:Infragistics.Excel.Worksheet.DisplayOptions"/>
            <seealso cref="T:Infragistics.Excel.CustomViewDisplayOptions"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetDisplayOptions.Reset">
            <summary>
            Resets the display options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInNormalView">
            <summary>
            Gets or sets the magnification level of the worksheet when it is displayed in normal view.
            </summary>
            <remarks>
            <p class="body">
            Magnifications are stored as percentages of the normal viewing magnification. A value of 100 indicates normal magnification
            whereas a value of 200 indicates a zoom that is twice the normal viewing magnification.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of magnification levels for a worksheet. The level must be between 10 and 400.
            </exception>
            <value>The magnification level of the worksheet when it is displayed in normal view.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageBreakView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageLayoutView"/>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.View"/>
            <seealso cref="P:Infragistics.Excel.CustomViewDisplayOptions.MagnificationInCurrentView"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageBreakView">
            <summary>
            Gets or sets the magnification level of the worksheet when it is displayed in the page break preview.
            </summary>
            <remarks>
            <p class="body">
            Magnifications are stored as percentages of the normal viewing magnification. A value of 100 indicates normal magnification
            whereas a value of 200 indicates a zoom that is twice the normal viewing magnification.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of magnification levels for a worksheet. The level must be between 10 and 400.
            </exception>
            <value>The magnification level of the worksheet when it is displayed in the page break preview.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInNormalView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageLayoutView"/>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.View"/>
            <seealso cref="P:Infragistics.Excel.CustomViewDisplayOptions.MagnificationInCurrentView"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageLayoutView">
            <summary>
            Gets or sets the magnification level of the worksheet when it is displayed in page layout view.
            </summary>
            <remarks>
            <p class="body">
            Magnifications are stored as percentages of the normal viewing magnification. A value of 100 indicates normal magnification
            whereas a value of 200 indicates a zoom that is twice the normal viewing magnification.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of magnification levels for a worksheet. The level must be between 10 and 400.
            </exception>
            <value>The magnification level of the worksheet when it is displayed in page layout view.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInNormalView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageBreakView"/>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.View"/>
            <seealso cref="P:Infragistics.Excel.CustomViewDisplayOptions.MagnificationInCurrentView"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDisplayOptions.OrderColumnsRightToLeft">
            <summary>
            Gets or sets the value indicating whether the columns are ordered right to left.
            </summary>
            <remarks>
            <p class="body">
            If the columns are ordered right to left, other aspects of the worksheet display differently. The vertical scrollbar
            will display on the left side of the worksheet and the worksheet tab bar, usually displayed on the left side of the
            worksheet, will display on the right side.
            </p>
            </remarks>
            <value>The value indicating whether the columns are ordered right to left.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDisplayOptions.ShowWhitespaceInPageLayoutView">
            <summary>
            Gets or sets the value which indicates whether to show whitespace between worksheet pages in page layout view.
            </summary>
            <remarks>
            <p class="note">
            <B>Note:</B> For this value to affect the display of the worksheet, the <see cref="P:Infragistics.Excel.DisplayOptions.View"/> must 
            be set to PageLayout. However, if a different view is used, this is still saved with the workbook.
            </p>
            <p class="note">
            <b>Note:</b> The <see cref="T:Infragistics.Excel.WorksheetView"/> value of PageLayout is only supported in Excel 2007. 
            If a worksheet with that View is viewed in earlier versions of Microsoft Excel, the view will default to Normal view.
            </p>
            </remarks>
            <value>The value which indicates whether to show white page between worksheet pages in page layout view.</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.View"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDisplayOptions.TabColor">
            <summary>
            Gets or sets the color to use for the associated worksheet's tab in the tab bar of Microsoft Excel.
            </summary>
            <remarks>
            <p class="body">
            If the tab bar is not visible, this color will not be seen.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The workbook is using a custom palette and setting this color would cause the custom palette to use 
            too many colors.
            </exception>
            <value>The color to use for the associated worksheet's tab in the tab bar of Microsoft Excel.</value>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarVisible"/>
        </member>
        <member name="T:Infragistics.Excel.WorksheetImage">
            <summary>
            Represents any image on the worksheet except the background image.
            </summary>
            <seealso cref="P:Infragistics.Excel.Worksheet.ImageBackground"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetImage.#ctor(System.Drawing.Image)">
            <summary>
            Creates a new <see cref="T:Infragistics.Excel.WorksheetImage"/> instance.
            </summary>
            <param name="image">The image displayed in the worksheet for this shape.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is null.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.WorksheetImage.SetBoundsInTwips(Infragistics.Excel.Worksheet,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Sets the bounds of the shape in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            The shape will only be position at the specified bounds while the worksheet remains in the current configuration.
            If any rows or columns before or within the shape are resized, the shape will no longer be placed at the bounds specified.
            </p>
            <p class="body">
            If <paramref name="maintainAspectRatio"/> is False, this just calls <see cref="M:Infragistics.Excel.WorksheetShape.SetBoundsInTwips(Infragistics.Excel.Worksheet,System.Drawing.Rectangle)"/> on its 
            base class.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <param name="worksheet">The worksheet on which the shape should be placed.</param>
            <param name="bounds">The new bounds where the shape should be placed.</param> 
            <param name="maintainAspectRatio">The value indicating whether the image's aspect ratio should be maintained.</param>
        </member>
        <member name="P:Infragistics.Excel.WorksheetImage.Image">
            <summary>
            Gets the image displayed in the worksheet for this shape.
            </summary>
            <value>The image displayed in the worksheet for this shape.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetMergedCellsRegion">
            <summary>
            Represents a merged region of cells, or cells which share a value and format and appear as one cell when 
            viewed in Microsoft Excel.
            </summary>
            <remarks>
            <p class="body">
            Merged cell regions cannot overlap (a cell can only belong to one merged cell region). In addition, 
            <see cref="T:Infragistics.Excel.ArrayFormula"/> and <see cref="T:Infragistics.Excel.WorksheetDataTable"/> instances cannot be applied to merged cell
            regions.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Excel.WorksheetRegion">
            <summary>
            Represents a rectangular region of cells on a worksheet.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.#ctor(Infragistics.Excel.Worksheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.WorksheetRegion"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="firstRow"/> is greater than <paramref name="lastRow"/> or 
            <paramref name="firstColumn"/> is greater than <paramref name="lastColumn"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Any row or column indices specified are outside the valid row or column ranges.
            </exception>
            <param name="worksheet">The worksheet on which the region resides.</param>
            <param name="firstRow">The index of the first row of the region.</param>
            <param name="firstColumn">The index of the first column of the region.</param>
            <param name="lastRow">The index of the last row of the region.</param>
            <param name="lastColumn">The index of the last row column of the region.</param>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.Equals(System.Object)">
            <summary>
            Determines whether the specified value equals this <see cref="T:Infragistics.Excel.WorksheetRegion"/>.
            </summary>
            <param name="obj">The value to test for equality.</param>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.GetHashCode">
            <summary>
            Gtes the hash code for the <see cref="T:Infragistics.Excel.WorksheetRegion"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.ToString">
            <summary>
            Gets the string representation of the range of cells in the region.
            </summary>
            <returns>The string representation of the range of cells in the region.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.ApplyArrayFormula(System.String)">
            <summary>
            Applies a array formula to the region of cells.
            </summary>
            <remarks>
            <p class="body">
            <paramref name="value"/> is parsed based on the <see cref="T:Infragistics.Excel.CellReferenceMode"/> of the <see cref="T:Infragistics.Excel.Workbook"/>
            to which the region belongs. If the region's <see cref="P:Infragistics.Excel.WorksheetRegion.Worksheet"/> has been removed from its parent collection,
            the A1 CellReferenceMode will be used to parse the formula.
            </p>
            </remarks>
            <param name="value">The array formula to parse and apply to the region.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The region contains another array formula or data table which extends outside the region.
            </exception>
            <seealso cref="T:Infragistics.Excel.ArrayFormula"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.ApplyFormula(System.String)">
            <summary>
            Applies a formula to the region of cells.
            </summary>
            <remarks>
            <p class="body">
            <paramref name="value"/> is parsed based on the <see cref="T:Infragistics.Excel.CellReferenceMode"/> of the <see cref="T:Infragistics.Excel.Workbook"/>
            to which the region belongs. If the region's <see cref="P:Infragistics.Excel.WorksheetRegion.Worksheet"/> has been removed from its parent collection,
            the A1 CellReferenceMode will be used to parse the formula.
            </p>
            </remarks>
            <param name="value">The formula to parse and apply to the region.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The region contains an array formula or data table which extends outside the region.
            </exception>
            <seealso cref="T:Infragistics.Excel.Formula"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.GetBoundsInTwips">
            <summary>
            Gets the bounds of the region in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            The bounds returned by this method are only valid with the current configuration of the worksheet.
            If any rows or columns before the region are resized, these bounds will no longer reflect the 
            position of the region.
            </p>
            </remarks>
            <returns>The bounds of the region on its worksheet.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.ToString(Infragistics.Excel.CellReferenceMode,System.Boolean)">
            <summary>
            Gets the string representation of the range of cells in the region.
            </summary>
            <param name="cellReferenceMode">The mode used to generate cell references.</param>
            <param name="includeWorksheetName">The value indicating whether to include the worksheet name in the range address.</param>
            <returns>The string representation of the range of cells in the region.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.ToString(Infragistics.Excel.CellReferenceMode,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the string representation of the range of cells in the region.
            </summary>
            <param name="cellReferenceMode">The mode used to generate cell references.</param>
            <param name="includeWorksheetName">The value indicating whether to include the worksheet name in the range address.</param>
            <param name="useRelativeColumn">The value indicating whether to use a relative column address for the cells in the range.</param>
            <param name="useRelativeRow">The value indicating whether to use a relative row address for the cells in the range.</param>
            <returns>The string representation of the range of cells in the region.</returns>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRegion.FirstColumn">
            <summary>
            Gets the index of the first column in the region.
            </summary>
            <value>The index of the first column in the region.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRegion.FirstRow">
            <summary>
            Gets the index of the first row in the region.
            </summary>
            <value>The index of the first row in the region.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRegion.LastColumn">
            <summary>
            Gets the index of the last column in the region.
            </summary>
            <value>The index of the last column in the region.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRegion.LastRow">
            <summary>
            Gets the index of the last row in the region.
            </summary>
            <value>The index of the last row in the region.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRegion.Worksheet">
            <summary>
            Gets the worksheet on which the region resides.
            </summary>
            <value>The worksheet on which the region resides.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetMergedCellsRegion.CellFormat">
            <summary>
            Gets the cell formatting for the merged cell region.
            </summary>
            <value>The cell formatting for the merged cell region.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetMergedCellsRegion.Comment">
            <summary>
            Gets or sets the comment for the merged cells region.
            </summary>
            <remarks>
            <p class="body">
            The comment of the merged region can also be accessed from the top-left cell of the merged region of cells.
            </p>
            </remarks>
            <value>The comment for the merged cells region.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetMergedCellsRegion.Formula">
            <summary>
            Gets the formula which has been applied to the merged region.
            </summary>
            <value>The formula which has been applied to the merged region or null if no formula has been applied.</value>
            <see cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)"/>
            <see cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion)"/>
            <see cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion[])"/>
            <see cref="M:Infragistics.Excel.WorksheetRegion.ApplyFormula(System.String)"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetMergedCellsRegion.Value">
            <summary>
            Gets or sets the value of the merged cell region.
            </summary>
            <remarks>
            <p class="body">The types supported for the value are:
            <BR/>
            <ul>
            <li class="taskitem"><span class="taskitemtext">System.Byte</span></li>
            <li class="taskitem"><span class="taskitemtext">System.SByte</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Int16</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Int64</span></li>
            <li class="taskitem"><span class="taskitemtext">System.UInt16</span></li>
            <li class="taskitem"><span class="taskitemtext">System.UInt64</span></li>
            <li class="taskitem"><span class="taskitemtext">System.UInt32</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Int32</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Single</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Double</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Boolean</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Char</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Enum</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Decimal</span></li>
            <li class="taskitem"><span class="taskitemtext">System.DateTime</span></li>
            <li class="taskitem"><span class="taskitemtext">System.String</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Text.StringBuilder</span></li>
            <li class="taskitem"><span class="taskitemtext">System.DBNull</span></li>
            <li class="taskitem"><span class="taskitemtext"><see cref="T:Infragistics.Excel.ErrorValue"/></span></li>
            <li class="taskitem"><span class="taskitemtext"><see cref="T:Infragistics.Excel.FormattedString"/></span></li>
            </ul>
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            The assigned value's type is not supported and can't be exported to Excel.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is a <see cref="T:Infragistics.Excel.Formula"/>. Instead, <see cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)"/> 
            should be called on the Formula, passing in the cell.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is a <see cref="T:Infragistics.Excel.WorksheetDataTable"/>. Instead, the <see cref="P:Infragistics.Excel.WorksheetDataTable.CellsInTable"/>
            should be set to a region containing the cell.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is a FormattedString which is the value another cell or merged cell region.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value is assigned and this cell is part of an <see cref="T:Infragistics.Excel.ArrayFormula"/> or WorksheetDataTable.
            </exception>
            <value>The value of the merged cell region.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.Value"/>
            <seealso cref="M:Infragistics.Excel.WorksheetCell.IsCellTypeSupported(System.Type)"/>
        </member>
        <member name="T:Infragistics.Excel.WorksheetMergedCellsRegionCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Excel.WorksheetMergedCellsRegion"/> instances in a <see cref="T:Infragistics.Excel.Worksheet"/>.
            </summary>
            <seealso cref="T:Infragistics.Excel.WorksheetMergedCellsRegion"/>
            <seealso cref="P:Infragistics.Excel.Worksheet.MergedCellsRegions"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new merged cell region and adds it to the collection.
            </summary>
            <remarks>
            <p class="body">
            The new merged cell region will take its value from the first cell containing a value, starting at the top-left and going across 
            then down in the region. The value of all other cells will be lost. Similarly, the new region will initialize its cell format 
            from the first cell containing a non-default cell format.
            </p>
            </remarks>
            <param name="firstRow">The index of the first row of the merged cell region.</param>
            <param name="firstColumn">The index of the first column of the merged cell region.</param>
            <param name="lastRow">The index of the last row of the merged cell region.</param>
            <param name="lastColumn">The index of the last row column of the merged cell region.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="firstRow"/> is greater than <paramref name="lastRow"/> or 
            <paramref name="firstColumn"/> is greater than <paramref name="lastColumn"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Any row or column indices specified are outside the valid row or column ranges.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The new merged cell region overlaps with an existing merged cell region.
            </exception>
            <returns>The newly created <see cref="T:Infragistics.Excel.WorksheetMergedCellsRegion"/>.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Clear">
            <summary>
            Clears all merged cell regions from the collection.
            </summary>
            <remarks>
            <p class="body">
            When a merged cell region is removed, the top-left cell in the region will retain the region's value.
            All other cells in the region will have a null value. In addition, all cells in the merged region will
            have the region's cell format when it is removed.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.WorksheetMergedCellsRegionCollection.IsOverlappingWithMergedRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if any part of specified region is already a part of a merged cell region.
            </summary>
            <param name="firstRow">The index of the first row of the merged cell region.</param>
            <param name="firstColumn">The index of the first column of the merged cell region.</param>
            <param name="lastRow">The index of the last row of the merged cell region.</param>
            <param name="lastColumn">The index of the last row column of the merged cell region.</param>
            <returns>True if any part of specified region is a part of merged cell region; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Remove(Infragistics.Excel.WorksheetMergedCellsRegion)">
            <summary>
            Removes the specified merged cell region from the collection.
            </summary>
            <remarks>
            <p class="body">
            When a merged cell region is removed, the top-left cell in the region will retain the region's value.
            All other cells in the region will have a null value. In addition, all cells in the merged region will
            have the region's cell format when it is removed.
            </p>
            </remarks>
            <param name="region">The merged cell region to remove from the collection.</param>
            <returns>
            True if the merged cell region was successfully removed; False if the merged cell region was not 
            in the collection.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetMergedCellsRegionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the merged cell region at the specified index from the collection.
            </summary>
            <remarks>
            <p class="body">
            When a merged cell region is removed, the top-left cell in the region will retain the region's value.
            All other cells in the region will have a null value. In addition, all cells in the merged region will
            have the region's cell format when it is removed.
            </p>
            </remarks>
            <param name="index">The zero-based index of the merged cell region in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Count">
            <summary>
            Gets the number of merged cell regions in the collection.
            </summary>
            <value>The number of merged cell regions in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Item(System.Int32)">
            <summary>
            Gets the merged cell region at the specified index.
            </summary>
            <param name="index">The zero-based index of the merged cell region to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Count"/>.
            </exception>
            <value>The merged cell region at the specified index.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetRow">
            <summary>
            Represents a row in a Microsoft Excel worksheet.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRow.Cells">
            <summary>
            Gets the collection of cells in the row.
            </summary>
            <remarks>
            <p class="body">
            The collection of cells is a fixed length collection, with the maximum number of cells in the collection being 
            <see cref="F:Infragistics.Excel.Workbook.MaxExcelColumnCount"/> or <see cref="F:Infragistics.Excel.Workbook.MaxExcel2007ColumnCount"/>,
            depending on the <see cref="P:Infragistics.Excel.Workbook.CurrentFormat">Workbook.CurrentFormat</see>.  Internally, the cells 
            are only created and added to the collection when they are requested.
            </p>
            <p class="note">
            <b>Note:</b> Iterating the collection will not create all cells. It will only iterate the cells which have already 
            been used.  To create and iterate all cells in the worksheet use a For loop, iterating from 0 to one less than 
            MaxExcelColumnCount, and pass in each index to the collection's indexer.
            </p>
            </remarks>
            <value>The collection of cells in the row.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRow.Height">
            <summary>
            Gets or sets the height of the row in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            If the height of the row is less than zero, the <see cref="P:Infragistics.Excel.Worksheet.DefaultRowHeight"/> of the
            owning worksheet will be used as the row's height.
            </p>
            <p class="body">
            The value assigned must be between -1 and 8192. Invalid values will be automatically adjusted to valid values.
            </p>
            </remarks>
            <value>The height of the row in twips (1/20th of a point).</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetRowCollection">
            <summary>
            A collection of rows in a worksheet.
            </summary>
            <remarks>
            <p class="body">
            Rows in this collection are lazily created (they are only created and added to the collection when they are accessed).
            If this collection is enumerated, it only enumerates the rows which were already accessed.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.Excel.WorksheetRow"/>
            <seealso cref="P:Infragistics.Excel.Worksheet.Rows"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRowCollection.MaxCount">
            <summary>
            Gets the maximum number of items allowed in this collection.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRowCollection.Item(System.Int32)">
            <summary>
            Gets the row at the specified index.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> Iterating the collection will not create all rows. It will only iterate the rows which have already 
            been used.  To create and iterate all rows in the worksheet use a For loop, iterating from 0 to one less than 
            the maximum row count, and pass in each index to the collection's indexer.
            </p>
            </remarks>
            <param name="index">The zero-based index of the row to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="index"/> is greater than or equal to <see cref="F:Infragistics.Excel.Workbook.MaxExcelRowCount"/>
            or <see cref="F:Infragistics.Excel.Workbook.MaxExcel2007RowCount"/>, depending on the <see cref="P:Infragistics.Excel.Workbook.CurrentFormat"/>.
            </exception>
            <value>The row at the specified index.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetCollection">
            <summary>
            A collection of worksheets in a workbook.
            </summary>
            <seealso cref="T:Infragistics.Excel.Worksheet"/>
            <seealso cref="T:Workbook.Worksheets"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCollection.Add(System.String)">
            <summary>
            Creates a new <see cref="T:Infragistics.Excel.Worksheet"/> and adds it to the collection.
            </summary>
            <remarks>
            <p class="body">
            If the workbook originally had no worksheets, the newly added worksheet will become the selected worksheet of 
            the workbook.  This can be changed after more worksheets are added by setting the <see cref="P:Infragistics.Excel.WindowOptions.SelectedWorksheet"/> 
            of the Workbook.
            </p>
            </remarks>
            <param name="name">The name to give the new Worksheet.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> contains the invalid characters: ':', '\', '/', '?', '*', '[', or ']'.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> exceeds 31 characters in length.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is being used as the name of another worksheet (worksheet names are case-insensitively compared).
            </exception>
            <returns>The Worksheet created with the specified name.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCollection.Clear">
            <summary>
            Clears all worksheets from the collection.
            </summary>
            <remarks>
            <p class="body">
            If there are any <see cref="T:Infragistics.Excel.NamedReference"/> instances in the <see cref="P:Infragistics.Excel.Workbook.NamedReferences"/> collection
            with a worksheet for a scope, they will be removed from the <see cref="T:Infragistics.Excel.Workbook"/>.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCollection.Contains(Infragistics.Excel.Worksheet)">
            <summary>
            Determines whether a worksheet is in the collection.
            </summary>
            <param name="worksheet">The worksheet to locate in the collection.</param>
            <returns>True if the worksheet is found; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCollection.Exists(System.String)">
            <summary>
            Determines whether a worksheet with the specified name exists in the collection.
            </summary>
            <param name="name">The name of the worksheet to search for. The name is compared case-insensitively.</param>
            <returns>True if a worksheet with the specified name is found; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCollection.IndexOf(Infragistics.Excel.Worksheet)">
            <summary>
            Gets the index of the specified worksheet in the collection.
            </summary>
            <param name="worksheet">The worksheet of which to get the index.</param>
            <returns>The index of the specified worksheet in the collection.</returns>
            <seealso cref="P:Infragistics.Excel.Worksheet.Index"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCollection.Remove(Infragistics.Excel.Worksheet)">
            <summary>
            Removes the specified worksheet from the collection.
            </summary>
            <param name="worksheet">The worksheet to remove from the collection.</param>
            <remarks>
            <p class="body">
            If there are any <see cref="T:Infragistics.Excel.NamedReference"/> instances in the <see cref="P:Infragistics.Excel.Workbook.NamedReferences"/> collection
            with the worksheet to remove as their scope, they will be removed from the <see cref="T:Infragistics.Excel.Workbook"/>.
            </p>
            </remarks>
            <returns>
            True if the worksheet was successfully removed from the collection; 
            False if the worksheet did not exist in the collection.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the worksheet at the specified index from the collection.
            </summary>
            <param name="index">The index of the worksheet to remove from the collection.</param>
            <remarks>
            <p class="body">
            If there are any <see cref="T:Infragistics.Excel.NamedReference"/> instances in the <see cref="P:Infragistics.Excel.Workbook.NamedReferences"/> collection
            with the worksheet to remove as their scope, they will be removed from the <see cref="T:Infragistics.Excel.Workbook"/>.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or equal to <see cref="P:Infragistics.Excel.WorksheetCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCollection.Count">
            <summary>
            Gets the number of worksheets in the collection.
            </summary>
            <value>The number of worksheets in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCollection.Item(System.Int32)">
            <summary>
            Gets the worksheet at the specified index.
            </summary>
            <param name="index">The zero-based index of the worksheet to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or equal to <see cref="P:Infragistics.Excel.WorksheetCollection.Count"/>.
            </exception>
            <value>The worksheet at the specified index.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCollection.Item(System.String)">
            <summary>
            Gets the worksheet with the specified name.
            </summary>
            <remarks>
            <p class="body">
            Worksheet names are compared case-insensitively.
            </p>
            </remarks>
            <param name="name">The name of the worksheet to get.</param>
            <exception cref="T:System.InvalidOperationException">
            A worksheet with the specified name does not exist in the collection. 
            </exception>
            <value>The worksheet with the specified name.</value>
            <seealso cref="P:Infragistics.Excel.Worksheet.Name"/>
        </member>
        <member name="T:Infragistics.Excel.WorksheetShapeCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Excel.WorksheetShape"/> instances in a <see cref="T:Infragistics.Excel.Worksheet"/> 
            or <see cref="T:Infragistics.Excel.WorksheetShapeGroup"/>.
            </summary>
            <seealso cref="T:Worksheet.Shapes"/>
            <seealso cref="T:WorksheetShapeGroup.Shapes"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShapeCollection.Add(Infragistics.Excel.WorksheetShape)">
            <summary>
            Adds a shape to the collection.
            </summary>
            <param name="shape">The shape to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shape"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="shape"/> has already been added to a worksheet or group.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="shape"/> does not have the <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/> 
            or <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/> set.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Adding <paramref name="shape"/> to this collection will place it on a different worksheet then either its 
            TopLeftCornerCell or BottomRightCornerCell or <paramref name="shape"/> is a <see cref="T:Infragistics.Excel.WorksheetShapeGroup"/> 
            and adding it to this collection will create a similar situation for one of its descendant shapes.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="shape"/> is a WorksheetShapeGroup and this is the group's collection of shapes.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShapeCollection.Clear">
            <summary>
            Clears all shapes from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShapeCollection.Contains(Infragistics.Excel.WorksheetShape)">
            <summary>
            Determines whether a shape is in the collection.
            </summary>
            <param name="shape">The shape to locate in the collection.</param>
            <returns>True if the shape is found; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShapeCollection.Remove(Infragistics.Excel.WorksheetShape)">
            <summary>
            Removes the specified shape from the collection.
            </summary>
            <param name="shape">The shape to remove from the collection.</param>
            <returns>
            True if the shape was successfully removed from the collection; 
            False if the shape did not exist in the collection.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShapeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the shape at the specified index from the collection.
            </summary>
            <param name="index">The index of the shape to remove from the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or equal to <see cref="P:Infragistics.Excel.WorksheetShapeCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShapeCollection.Count">
            <summary>
            Gets the number of shapes in the collection.
            </summary>
            <value>The number of shapes in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShapeCollection.Item(System.Int32)">
            <summary>
            Gets the shape at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the shape to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or equal to <see cref="P:Infragistics.Excel.WorksheetShapeCollection.Count"/>.
            </exception>
            <value>The shape at the specified index.</value>
        </member>
    </members>
</doc>
